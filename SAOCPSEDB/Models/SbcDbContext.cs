using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using Microsoft.EntityFrameworkCore;

namespace SAOCPSEDB.Models;

public partial class SbcDbContext : DbContext
{
    public SbcDbContext()
    {
    }

    public SbcDbContext(DbContextOptions<SbcDbContext> options)
        : base(options)
    {
    }

    public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
    {
        UpdateTimestamps();
        return base.SaveChangesAsync(cancellationToken);
    }
    private void UpdateTimestamps()
    {
        foreach (var entry in ChangeTracker.Entries())
        {
            if (entry.Entity is ClmfrmClaimX claim)
            {
                if (entry.State == EntityState.Added)
                {
                    int year = DateTime.Today.Year % 100;
                    int number = RandomNumberGenerator.GetInt32(10000000, 99999999);
                    claim.Claimformnumber = string.Format("PC{0:d2}{1:d8}", year, number);
                }
            }
            
        }
    }


    public virtual DbSet<AdmAuthorisationlevel> AdmAuthorisationlevels { get; set; }

    public virtual DbSet<AdmClientX> AdmClientXes { get; set; }

    public virtual DbSet<AdmEmaildisclaimer> AdmEmaildisclaimers { get; set; }

    public virtual DbSet<AdmEmailtemplate> AdmEmailtemplates { get; set; }

    public virtual DbSet<AdmEmailtemplatedocument> AdmEmailtemplatedocuments { get; set; }

    public virtual DbSet<AdmEmployeecount> AdmEmployeecounts { get; set; }

    public virtual DbSet<AdmEventnotificationX> AdmEventnotificationXes { get; set; }

    public virtual DbSet<AdmEventnotificationclientseverityX> AdmEventnotificationclientseverityXes { get; set; }

    public virtual DbSet<AdmEventnotificationcomplaintX> AdmEventnotificationcomplaintXes { get; set; }

    public virtual DbSet<AdmEventnotificationeventstatusX> AdmEventnotificationeventstatusXes { get; set; }

    public virtual DbSet<AdmEventnotificationeventsubtypeX> AdmEventnotificationeventsubtypeXes { get; set; }

    public virtual DbSet<AdmEventnotificationeventsubtypeclientX> AdmEventnotificationeventsubtypeclientXes { get; set; }

    public virtual DbSet<AdmEventnotificationeventtypeX> AdmEventnotificationeventtypeXes { get; set; }

    public virtual DbSet<AdmEventnotificationfeedbackX> AdmEventnotificationfeedbackXes { get; set; }

    public virtual DbSet<AdmEventnotificationhazardX> AdmEventnotificationhazardXes { get; set; }

    public virtual DbSet<AdmEventnotificationorgstructX> AdmEventnotificationorgstructXes { get; set; }

    public virtual DbSet<AdmEventnotificationrecipientX> AdmEventnotificationrecipientXes { get; set; }

    public virtual DbSet<AdmEventnotificationreportableX> AdmEventnotificationreportableXes { get; set; }

    public virtual DbSet<AdmEventnotificationriskX> AdmEventnotificationriskXes { get; set; }

    public virtual DbSet<AdmEventnotificationroleX> AdmEventnotificationroleXes { get; set; }

    public virtual DbSet<AdmEventnotificationtreatmentX> AdmEventnotificationtreatmentXes { get; set; }

    public virtual DbSet<AdmFilenotetemplate> AdmFilenotetemplates { get; set; }

    public virtual DbSet<AdmGovsafetytextX> AdmGovsafetytextXes { get; set; }

    public virtual DbSet<AdmHirmemailX> AdmHirmemailXes { get; set; }

    public virtual DbSet<AdmMergefield> AdmMergefields { get; set; }

    public virtual DbSet<AdmOrgemailX> AdmOrgemailXes { get; set; }

    public virtual DbSet<AdmPayrollcategory> AdmPayrollcategories { get; set; }

    public virtual DbSet<AdmPornotificationX> AdmPornotificationXes { get; set; }

    public virtual DbSet<AdmPornotificationemailX> AdmPornotificationemailXes { get; set; }

    public virtual DbSet<AdmPornotificationroleX> AdmPornotificationroleXes { get; set; }

    public virtual DbSet<AdmPorpositionX> AdmPorpositionXes { get; set; }

    public virtual DbSet<AdmRate> AdmRates { get; set; }

    public virtual DbSet<AdmSmstemplate> AdmSmstemplates { get; set; }

    public virtual DbSet<AdmSpecialdate> AdmSpecialdates { get; set; }

    public virtual DbSet<AdmTaxscale> AdmTaxscales { get; set; }

    public virtual DbSet<AudAudit> AudAudits { get; set; }

    public virtual DbSet<AudAuditdatum> AudAuditdata { get; set; }

    public virtual DbSet<AuthAudit> AuthAudits { get; set; }

    public virtual DbSet<AuthAuthEmaildomain> AuthAuthEmaildomains { get; set; }

    public virtual DbSet<AuthBlocked> AuthBlockeds { get; set; }

    public virtual DbSet<AuthClaimformtokenX> AuthClaimformtokenXes { get; set; }

    public virtual DbSet<AuthWebformguesttokenX> AuthWebformguesttokenXes { get; set; }

    public virtual DbSet<BaseActiveuser> BaseActiveusers { get; set; }

    public virtual DbSet<BaseClaimcount> BaseClaimcounts { get; set; }

    public virtual DbSet<BaseClmAvailabletransaction> BaseClmAvailabletransactions { get; set; }

    public virtual DbSet<BaseClmClaimsummary> BaseClmClaimsummaries { get; set; }

    public virtual DbSet<BaseClmComppayment> BaseClmComppayments { get; set; }

    public virtual DbSet<BaseClmEditriggerSa> BaseClmEditriggerSas { get; set; }

    public virtual DbSet<BaseClmEstimateadjustment> BaseClmEstimateadjustments { get; set; }

    public virtual DbSet<BaseClmEstimatehistory> BaseClmEstimatehistories { get; set; }

    public virtual DbSet<BaseClmEstimatesummary> BaseClmEstimatesummaries { get; set; }

    public virtual DbSet<BaseClmLiabilitySa> BaseClmLiabilitySas { get; set; }

    public virtual DbSet<BaseClmLiabilityhistorySa> BaseClmLiabilityhistorySas { get; set; }

    public virtual DbSet<BaseClmMatchedtransaction> BaseClmMatchedtransactions { get; set; }

    public virtual DbSet<BaseClmPaymentitem> BaseClmPaymentitems { get; set; }

    public virtual DbSet<BaseClmProvider> BaseClmProviders { get; set; }

    public virtual DbSet<BaseClmRecoveryadjustment> BaseClmRecoveryadjustments { get; set; }

    public virtual DbSet<BaseClmRecoveryhistory> BaseClmRecoveryhistories { get; set; }

    public virtual DbSet<BaseClmRecoverysummary> BaseClmRecoverysummaries { get; set; }

    public virtual DbSet<BaseClmRtwstatushistory> BaseClmRtwstatushistories { get; set; }

    public virtual DbSet<BaseClmStatushistory> BaseClmStatushistories { get; set; }

    public virtual DbSet<BaseMedDate> BaseMedDates { get; set; }

    public virtual DbSet<BaseMedDateSa> BaseMedDateSas { get; set; }

    public virtual DbSet<BaseOpenclaim> BaseOpenclaims { get; set; }

    public virtual DbSet<BaseParNumber> BaseParNumbers { get; set; }

    public virtual DbSet<BaseTskClaimtask> BaseTskClaimtasks { get; set; }

    public virtual DbSet<BaseTskFilenote> BaseTskFilenotes { get; set; }

    public virtual DbSet<BaseTskLegaldispute> BaseTskLegaldisputes { get; set; }

    public virtual DbSet<BaseTskWorkflowalert> BaseTskWorkflowalerts { get; set; }

    public virtual DbSet<BaseTskWorkflowtimeframe> BaseTskWorkflowtimeframes { get; set; }

    public virtual DbSet<BsbBranch> BsbBranches { get; set; }

    public virtual DbSet<ClmAuthorisedperson> ClmAuthorisedpeople { get; set; }

    public virtual DbSet<ClmAuthorisedpersondocument> ClmAuthorisedpersondocuments { get; set; }

    public virtual DbSet<ClmCasemanagementplan> ClmCasemanagementplans { get; set; }

    public virtual DbSet<ClmCasemanagementplanbarrier> ClmCasemanagementplanbarriers { get; set; }

    public virtual DbSet<ClmCasemanagementplandoc> ClmCasemanagementplandocs { get; set; }

    public virtual DbSet<ClmClaim> ClmClaims { get; set; }

    public virtual DbSet<ClmClaim1> ClmClaims1 { get; set; }

    public virtual DbSet<ClmClaimSa> ClmClaimSas { get; set; }

    public virtual DbSet<ClmClaimX> ClmClaimXes { get; set; }

    public virtual DbSet<ClmClaimtask> ClmClaimtasks { get; set; }

    public virtual DbSet<ClmClaimtaskdocument> ClmClaimtaskdocuments { get; set; }

    public virtual DbSet<ClmClassificationhistory> ClmClassificationhistories { get; set; }

    public virtual DbSet<ClmCompensationrecipient> ClmCompensationrecipients { get; set; }

    public virtual DbSet<ClmCorrespondencein> ClmCorrespondenceins { get; set; }

    public virtual DbSet<ClmCorrespondenceout> ClmCorrespondenceouts { get; set; }

    public virtual DbSet<ClmCovidisolation> ClmCovidisolations { get; set; }

    public virtual DbSet<ClmCovidsymptom> ClmCovidsymptoms { get; set; }

    public virtual DbSet<ClmDependant> ClmDependants { get; set; }

    public virtual DbSet<ClmDeterminationSa> ClmDeterminationSas { get; set; }

    public virtual DbSet<ClmDeterminationSaX> ClmDeterminationSaXes { get; set; }

    public virtual DbSet<ClmDeterminationhistorySa> ClmDeterminationhistorySas { get; set; }

    public virtual DbSet<ClmDeterminationhistorySaX> ClmDeterminationhistorySaXes { get; set; }

    public virtual DbSet<ClmDraftpayment> ClmDraftpayments { get; set; }

    public virtual DbSet<ClmEarning> ClmEarnings { get; set; }

    public virtual DbSet<ClmEarningsSa> ClmEarningsSas { get; set; }

    public virtual DbSet<ClmEarningsSaX> ClmEarningsSaXes { get; set; }

    public virtual DbSet<ClmEarningsdocument> ClmEarningsdocuments { get; set; }

    public virtual DbSet<ClmEmail> ClmEmails { get; set; }

    public virtual DbSet<ClmEmploymentcurrent> ClmEmploymentcurrents { get; set; }

    public virtual DbSet<ClmEmploymentdoi> ClmEmploymentdois { get; set; }

    public virtual DbSet<ClmEstimate> ClmEstimates { get; set; }

    public virtual DbSet<ClmEstimateworksheet> ClmEstimateworksheets { get; set; }

    public virtual DbSet<ClmEstimateworksheetSa> ClmEstimateworksheetSas { get; set; }

    public virtual DbSet<ClmEstimateworksheetdocument> ClmEstimateworksheetdocuments { get; set; }

    public virtual DbSet<ClmFilenote> ClmFilenotes { get; set; }

    public virtual DbSet<ClmFiletracking> ClmFiletrackings { get; set; }

    public virtual DbSet<ClmIncapacity> ClmIncapacities { get; set; }

    public virtual DbSet<ClmIncident> ClmIncidents { get; set; }

    public virtual DbSet<ClmIncidentX> ClmIncidentXes { get; set; }

    public virtual DbSet<ClmInjuredworker> ClmInjuredworkers { get; set; }

    public virtual DbSet<ClmInjury> ClmInjuries { get; set; }

    public virtual DbSet<ClmInjurymanagementplan> ClmInjurymanagementplans { get; set; }

    public virtual DbSet<ClmInsurerIn> ClmInsurerIns { get; set; }

    public virtual DbSet<ClmInsurerreferral> ClmInsurerreferrals { get; set; }

    public virtual DbSet<ClmInvestigation> ClmInvestigations { get; set; }

    public virtual DbSet<ClmLegaldispute> ClmLegaldisputes { get; set; }

    public virtual DbSet<ClmLegaldisputeevent> ClmLegaldisputeevents { get; set; }

    public virtual DbSet<ClmLegaldisputerep> ClmLegaldisputereps { get; set; }

    public virtual DbSet<ClmLegaldisputetask> ClmLegaldisputetasks { get; set; }

    public virtual DbSet<ClmLegaldisputetaskresp> ClmLegaldisputetaskresps { get; set; }

    public virtual DbSet<ClmLegalentity> ClmLegalentities { get; set; }

    public virtual DbSet<ClmLegalrep> ClmLegalreps { get; set; }

    public virtual DbSet<ClmMedcert> ClmMedcerts { get; set; }

    public virtual DbSet<ClmMotorvehicle> ClmMotorvehicles { get; set; }

    public virtual DbSet<ClmNominateddoctor> ClmNominateddoctors { get; set; }

    public virtual DbSet<ClmOtheremployment> ClmOtheremployments { get; set; }

    public virtual DbSet<ClmOtherinjurydetail> ClmOtherinjurydetails { get; set; }

    public virtual DbSet<ClmOtherinjurysummary> ClmOtherinjurysummaries { get; set; }

    public virtual DbSet<ClmPayment> ClmPayments { get; set; }

    public virtual DbSet<ClmPaymentrestriction> ClmPaymentrestrictions { get; set; }

    public virtual DbSet<ClmPayroll> ClmPayrolls { get; set; }

    public virtual DbSet<ClmPermimpairSa> ClmPermimpairSas { get; set; }

    public virtual DbSet<ClmPermimpaireconomicSaX> ClmPermimpaireconomicSaXes { get; set; }

    public virtual DbSet<ClmPermimpairinjurySa> ClmPermimpairinjurySas { get; set; }

    public virtual DbSet<ClmPiawe> ClmPiawes { get; set; }

    public virtual DbSet<ClmPiaweSa> ClmPiaweSas { get; set; }

    public virtual DbSet<ClmPiawedocument> ClmPiawedocuments { get; set; }

    public virtual DbSet<ClmPiawehistory> ClmPiawehistories { get; set; }

    public virtual DbSet<ClmPiawemodifyhistory> ClmPiawemodifyhistories { get; set; }

    public virtual DbSet<ClmProvider> ClmProviders { get; set; }

    public virtual DbSet<ClmPurchaseauth> ClmPurchaseauths { get; set; }

    public virtual DbSet<ClmPurchaseitem> ClmPurchaseitems { get; set; }

    public virtual DbSet<ClmPurchaseorder> ClmPurchaseorders { get; set; }

    public virtual DbSet<ClmRecovery> ClmRecoveries { get; set; }

    public virtual DbSet<ClmRecoveryestimate> ClmRecoveryestimates { get; set; }

    public virtual DbSet<ClmReferral> ClmReferrals { get; set; }

    public virtual DbSet<ClmRegistration> ClmRegistrations { get; set; }

    public virtual DbSet<ClmRegistrationhistory> ClmRegistrationhistories { get; set; }

    public virtual DbSet<ClmRehab> ClmRehabs { get; set; }

    public virtual DbSet<ClmRehabnote> ClmRehabnotes { get; set; }

    public virtual DbSet<ClmRehabstatus> ClmRehabstatuses { get; set; }

    public virtual DbSet<ClmRehabstatushistory> ClmRehabstatushistories { get; set; }

    public virtual DbSet<ClmRiskassessment> ClmRiskassessments { get; set; }

    public virtual DbSet<ClmRiskassessmentdoc> ClmRiskassessmentdocs { get; set; }

    public virtual DbSet<ClmRiskassessmentfactor> ClmRiskassessmentfactors { get; set; }

    public virtual DbSet<ClmRole> ClmRoles { get; set; }

    public virtual DbSet<ClmRolehistory> ClmRolehistories { get; set; }

    public virtual DbSet<ClmRtwassessmentX> ClmRtwassessmentXes { get; set; }

    public virtual DbSet<ClmRtwstatus> ClmRtwstatuses { get; set; }

    public virtual DbSet<ClmRtwstatushistory> ClmRtwstatushistories { get; set; }

    public virtual DbSet<ClmSadetailsSa> ClmSadetailsSas { get; set; }

    public virtual DbSet<ClmSecurityX> ClmSecurityXes { get; set; }

    public virtual DbSet<ClmSecurityXBak> ClmSecurityXBaks { get; set; }

    public virtual DbSet<ClmServiceX> ClmServiceXes { get; set; }

    public virtual DbSet<ClmSmsmessage> ClmSmsmessages { get; set; }

    public virtual DbSet<ClmSmsrecipient> ClmSmsrecipients { get; set; }

    public virtual DbSet<ClmStatus> ClmStatuses { get; set; }

    public virtual DbSet<ClmStatushistory> ClmStatushistories { get; set; }

    public virtual DbSet<ClmSurgerySa> ClmSurgerySas { get; set; }

    public virtual DbSet<ClmTreatment> ClmTreatments { get; set; }

    public virtual DbSet<ClmTreatmentdocument> ClmTreatmentdocuments { get; set; }

    public virtual DbSet<ClmTreatmentitem> ClmTreatmentitems { get; set; }

    public virtual DbSet<ClmTreatmentstatushistory> ClmTreatmentstatushistories { get; set; }

    public virtual DbSet<ClmWitness> ClmWitnesses { get; set; }

    public virtual DbSet<ClmempEmployment> ClmempEmployments { get; set; }

    public virtual DbSet<ClmempEmploymentSa> ClmempEmploymentSas { get; set; }

    public virtual DbSet<ClmfrmClaimX> ClmfrmClaimXes { get; set; }

    public virtual DbSet<ClmfrmClaimdocumentX> ClmfrmClaimdocumentXes { get; set; }

    public virtual DbSet<CorCorrespondencein> CorCorrespondenceins { get; set; }

    public virtual DbSet<CorCorrespondenceout> CorCorrespondenceouts { get; set; }

    public virtual DbSet<CorIndocument> CorIndocuments { get; set; }

    public virtual DbSet<CorOutdocument> CorOutdocuments { get; set; }

    public virtual DbSet<Cr062016> Cr062016s { get; set; }

    public virtual DbSet<DmsDocument> DmsDocuments { get; set; }

    public virtual DbSet<DmsDocumentreviewhistory> DmsDocumentreviewhistories { get; set; }

    public virtual DbSet<DmsPersonrespClaim> DmsPersonrespClaims { get; set; }

    public virtual DbSet<DmsPersonresponsiblehistory> DmsPersonresponsiblehistories { get; set; }

    public virtual DbSet<DmsRevision> DmsRevisions { get; set; }

    public virtual DbSet<DmsRevisionfile> DmsRevisionfiles { get; set; }

    public virtual DbSet<EmlAddress> EmlAddresses { get; set; }

    public virtual DbSet<EmlAttachment> EmlAttachments { get; set; }

    public virtual DbSet<EmlEmail> EmlEmails { get; set; }

    public virtual DbSet<EmlinAttachment> EmlinAttachments { get; set; }

    public virtual DbSet<EmlinAttachmentpersonresponsiblehistory> EmlinAttachmentpersonresponsiblehistories { get; set; }

    public virtual DbSet<EmlinAttachmentstatushistory> EmlinAttachmentstatushistories { get; set; }

    public virtual DbSet<EmlinCorrin> EmlinCorrins { get; set; }

    public virtual DbSet<EmlinCorrout> EmlinCorrouts { get; set; }

    public virtual DbSet<EmlinEmail> EmlinEmails { get; set; }

    public virtual DbSet<EmlinFilenote> EmlinFilenotes { get; set; }

    public virtual DbSet<EmlinMedcert> EmlinMedcerts { get; set; }

    public virtual DbSet<EmlinPayment> EmlinPayments { get; set; }

    public virtual DbSet<EmlinProviderdocument> EmlinProviderdocuments { get; set; }

    public virtual DbSet<EmlinRehab> EmlinRehabs { get; set; }

    public virtual DbSet<Evt5whyX> Evt5whyXes { get; set; }

    public virtual DbSet<EvtActionX> EvtActionXes { get; set; }

    public virtual DbSet<EvtAggressionassaultX> EvtAggressionassaultXes { get; set; }

    public virtual DbSet<EvtAggressorX> EvtAggressorXes { get; set; }

    public virtual DbSet<EvtBehaviourX> EvtBehaviourXes { get; set; }

    public virtual DbSet<EvtClaggressiondefX> EvtClaggressiondefXes { get; set; }

    public virtual DbSet<EvtClbehaviourdefX> EvtClbehaviourdefXes { get; set; }

    public virtual DbSet<EvtClfraudclassificationX> EvtClfraudclassificationXes { get; set; }

    public virtual DbSet<EvtClientinvestigationX> EvtClientinvestigationXes { get; set; }

    public virtual DbSet<EvtClosureX> EvtClosureXes { get; set; }

    public virtual DbSet<EvtContribfactorX> EvtContribfactorXes { get; set; }

    public virtual DbSet<EvtDocumentX> EvtDocumentXes { get; set; }

    public virtual DbSet<EvtEventX> EvtEventXes { get; set; }

    public virtual DbSet<EvtEventX1> EvtEventXes1 { get; set; }

    public virtual DbSet<EvtEventsubtypeX> EvtEventsubtypeXes { get; set; }

    public virtual DbSet<EvtExposureppeX> EvtExposureppeXes { get; set; }

    public virtual DbSet<EvtFilenoteX> EvtFilenoteXes { get; set; }

    public virtual DbSet<EvtFindingX> EvtFindingXes { get; set; }

    public virtual DbSet<EvtIcamX> EvtIcamXes { get; set; }

    public virtual DbSet<EvtIcamcontribfactorX> EvtIcamcontribfactorXes { get; set; }

    public virtual DbSet<EvtInvestigationX> EvtInvestigationXes { get; set; }

    public virtual DbSet<EvtInvestigationdocX> EvtInvestigationdocXes { get; set; }

    public virtual DbSet<EvtInvestigationmechanismX> EvtInvestigationmechanismXes { get; set; }

    public virtual DbSet<EvtInvestigationreviewX> EvtInvestigationreviewXes { get; set; }

    public virtual DbSet<EvtInvestigatorsX> EvtInvestigatorsXes { get; set; }

    public virtual DbSet<EvtNotificationcontactX> EvtNotificationcontactXes { get; set; }

    public virtual DbSet<EvtNotificationhistoryX> EvtNotificationhistoryXes { get; set; }

    public virtual DbSet<EvtOthervehicleX> EvtOthervehicleXes { get; set; }

    public virtual DbSet<EvtPdfX> EvtPdfXes { get; set; }

    public virtual DbSet<EvtPersoninvolvedX> EvtPersoninvolvedXes { get; set; }

    public virtual DbSet<EvtPsychinvolveX> EvtPsychinvolveXes { get; set; }

    public virtual DbSet<EvtPwresettokenX> EvtPwresettokenXes { get; set; }

    public virtual DbSet<EvtReferredagencyX> EvtReferredagencyXes { get; set; }

    public virtual DbSet<EvtRegnotificationX> EvtRegnotificationXes { get; set; }

    public virtual DbSet<EvtRelateduser> EvtRelatedusers { get; set; }

    public virtual DbSet<EvtSecurityX> EvtSecurityXes { get; set; }

    public virtual DbSet<EvtSecuritycontrolX> EvtSecuritycontrolXes { get; set; }

    public virtual DbSet<EvtSecuritytypeX> EvtSecuritytypeXes { get; set; }

    public virtual DbSet<EvtSleeptypeX> EvtSleeptypeXes { get; set; }

    public virtual DbSet<EvtStatusX> EvtStatusXes { get; set; }

    public virtual DbSet<EvtStatushistoryX> EvtStatushistoryXes { get; set; }

    public virtual DbSet<EvtStatushistorydocX> EvtStatushistorydocXes { get; set; }

    public virtual DbSet<EvtTask> EvtTasks { get; set; }

    public virtual DbSet<EvtVehicleX> EvtVehicleXes { get; set; }

    public virtual DbSet<EvtVehiclecollisionX> EvtVehiclecollisionXes { get; set; }

    public virtual DbSet<EvtVehicleinvolvedX> EvtVehicleinvolvedXes { get; set; }

    public virtual DbSet<EvtWhsreviewX> EvtWhsreviewXes { get; set; }

    public virtual DbSet<EvtWitnessX> EvtWitnessXes { get; set; }

    public virtual DbSet<ExampleKinga> ExampleKingas { get; set; }

    public virtual DbSet<FnDocument> FnDocuments { get; set; }

    public virtual DbSet<FnFilenote> FnFilenotes { get; set; }

    public virtual DbSet<FnResponsibility> FnResponsibilities { get; set; }

    public virtual DbSet<GevtAggressionassaultX> GevtAggressionassaultXes { get; set; }

    public virtual DbSet<GevtAggressorX> GevtAggressorXes { get; set; }

    public virtual DbSet<GevtDocumentX> GevtDocumentXes { get; set; }

    public virtual DbSet<GevtEventGuestX> GevtEventGuestXes { get; set; }

    public virtual DbSet<GevtEventX> GevtEventXes { get; set; }

    public virtual DbSet<GevtEventsubtypeX> GevtEventsubtypeXes { get; set; }

    public virtual DbSet<GevtExposureppeX> GevtExposureppeXes { get; set; }

    public virtual DbSet<GevtNotificationcontactX> GevtNotificationcontactXes { get; set; }

    public virtual DbSet<GevtOthervehicleX> GevtOthervehicleXes { get; set; }

    public virtual DbSet<GevtPdfX> GevtPdfXes { get; set; }

    public virtual DbSet<GevtPersoninvolvedX> GevtPersoninvolvedXes { get; set; }

    public virtual DbSet<GevtPsychinvolveX> GevtPsychinvolveXes { get; set; }

    public virtual DbSet<GevtSecuritycontrolX> GevtSecuritycontrolXes { get; set; }

    public virtual DbSet<GevtSecuritytypeX> GevtSecuritytypeXes { get; set; }

    public virtual DbSet<GevtSleeptypeX> GevtSleeptypeXes { get; set; }

    public virtual DbSet<GevtStatusX> GevtStatusXes { get; set; }

    public virtual DbSet<GevtVehicleX> GevtVehicleXes { get; set; }

    public virtual DbSet<GevtVehiclecollisionX> GevtVehiclecollisionXes { get; set; }

    public virtual DbSet<GevtVehicleinvolvedX> GevtVehicleinvolvedXes { get; set; }

    public virtual DbSet<GevtWitnessGuestX> GevtWitnessGuestXes { get; set; }

    public virtual DbSet<GevtWitnessX> GevtWitnessXes { get; set; }

    public virtual DbSet<GlAccount> GlAccounts { get; set; }

    public virtual DbSet<GlEntry> GlEntries { get; set; }

    public virtual DbSet<GlLinkedcode> GlLinkedcodes { get; set; }

    public virtual DbSet<GlPaymenttype> GlPaymenttypes { get; set; }

    public virtual DbSet<GlRule> GlRules { get; set; }

    public virtual DbSet<GlSubentry> GlSubentries { get; set; }

    public virtual DbSet<GlTransaction> GlTransactions { get; set; }

    public virtual DbSet<HirmAccessattemptX> HirmAccessattemptXes { get; set; }

    public virtual DbSet<HirmAccesstokenX> HirmAccesstokenXes { get; set; }

    public virtual DbSet<HirmIpblockX> HirmIpblockXes { get; set; }

    public virtual DbSet<HrAuditX> HrAuditXes { get; set; }

    public virtual DbSet<HrBatchErrorsX> HrBatchErrorsXes { get; set; }

    public virtual DbSet<HrBatchStagingX> HrBatchStagingXes { get; set; }

    public virtual DbSet<HrBatchX> HrBatchXes { get; set; }

    public virtual DbSet<HrDataX> HrDataXes { get; set; }

    public virtual DbSet<HrDatum> HrData { get; set; }

    public virtual DbSet<HrPasswordX> HrPasswordXes { get; set; }

    public virtual DbSet<HrPasswordhistoryX> HrPasswordhistoryXes { get; set; }

    public virtual DbSet<IfnFilenoteX> IfnFilenoteXes { get; set; }

    public virtual DbSet<ImpDocument> ImpDocuments { get; set; }

    public virtual DbSet<ImpInjurymanagementplan> ImpInjurymanagementplans { get; set; }

    public virtual DbSet<IncActionlevelX> IncActionlevelXes { get; set; }

    public virtual DbSet<IncActionleveltypeX> IncActionleveltypeXes { get; set; }

    public virtual DbSet<IncActionplanX> IncActionplanXes { get; set; }

    public virtual DbSet<IncAggressionactionX> IncAggressionactionXes { get; set; }

    public virtual DbSet<IncAggressionaggressorX> IncAggressionaggressorXes { get; set; }

    public virtual DbSet<IncAggressiondetailsX> IncAggressiondetailsXes { get; set; }

    public virtual DbSet<IncAggressionfactorsX> IncAggressionfactorsXes { get; set; }

    public virtual DbSet<IncAltinvestigatorX> IncAltinvestigatorXes { get; set; }

    public virtual DbSet<IncCorrectiveactionX> IncCorrectiveactionXes { get; set; }

    public virtual DbSet<IncCovidisolationX> IncCovidisolationXes { get; set; }

    public virtual DbSet<IncCovidsymptomX> IncCovidsymptomXes { get; set; }

    public virtual DbSet<IncDetailsX> IncDetailsXes { get; set; }

    public virtual DbSet<IncDocumentX> IncDocumentXes { get; set; }

    public virtual DbSet<IncExposureX> IncExposureXes { get; set; }

    public virtual DbSet<IncExposureareaX> IncExposureareaXes { get; set; }

    public virtual DbSet<IncExposurecauseX> IncExposurecausexes { get; set; }

    public virtual DbSet<IncExposureppeX> IncExposureppeXes { get; set; }

    public virtual DbSet<IncFactorindividualX> IncFactorindividualXes { get; set; }

    public virtual DbSet<IncFactorlayoutX> IncFactorlayoutXes { get; set; }

    public virtual DbSet<IncFactorsystemofworkX> IncFactorsystemofworkXes { get; set; }

    public virtual DbSet<IncFactorworkenvironmentX> IncFactorworkenvironmentXes { get; set; }

    public virtual DbSet<IncFallsliptripX> IncFallsliptripXes { get; set; }

    public virtual DbSet<IncFurtherfindingX> IncFurtherfindingXes { get; set; }

    public virtual DbSet<IncHrdataX> IncHrdataXes { get; set; }

    public virtual DbSet<IncHrloadAgencyruleX> IncHrloadAgencyruleXes { get; set; }

    public virtual DbSet<IncIncidentX> IncIncidentXes { get; set; }

    public virtual DbSet<IncIncidentX1> IncIncidentXes1 { get; set; }

    public virtual DbSet<IncIncidentXSecure> IncIncidentXSecures { get; set; }

    public virtual DbSet<IncIncidentuserX> IncIncidentuserXes { get; set; }

    public virtual DbSet<IncInitialtreatmentX> IncInitialtreatmentXes { get; set; }

    public virtual DbSet<IncInvestigationX> IncInvestigationXes { get; set; }

    public virtual DbSet<IncInvestigationdocumentX> IncInvestigationdocumentXes { get; set; }

    public virtual DbSet<IncInvestigationpartbX> IncInvestigationpartbXes { get; set; }

    public virtual DbSet<IncInvestigationreasonX> IncInvestigationreasonXes { get; set; }

    public virtual DbSet<IncInvestigationreviewX> IncInvestigationreviewXes { get; set; }

    public virtual DbSet<IncInvestigationteamX> IncInvestigationteamXes { get; set; }

    public virtual DbSet<IncManualtaskX> IncManualtaskXes { get; set; }

    public virtual DbSet<IncNotificationsX> IncNotificationsXes { get; set; }

    public virtual DbSet<IncPersoninvolvedX> IncPersoninvolvedXes { get; set; }

    public virtual DbSet<IncPsychologicalX> IncPsychologicalXes { get; set; }

    public virtual DbSet<IncPsychologicalfactorX> IncPsychologicalfactorXes { get; set; }

    public virtual DbSet<IncPsychologicalotherpeopleX> IncPsychologicalotherpeopleXes { get; set; }

    public virtual DbSet<IncRejectX> IncRejectXes { get; set; }

    public virtual DbSet<IncReviewX> IncReviewXes { get; set; }

    public virtual DbSet<IncReviewsummaryX> IncReviewsummaryXes { get; set; }

    public virtual DbSet<IncRiskratingX> IncRiskratingXes { get; set; }

    public virtual DbSet<IncSapolX> IncSapolXes { get; set; }

    public virtual DbSet<IncSapolequipcausedX> IncSapolequipcausedXes { get; set; }

    public virtual DbSet<IncSapolequipusedX> IncSapolequipusedXes { get; set; }

    public virtual DbSet<IncSecurityX> IncSecurityXes { get; set; }

    public virtual DbSet<IncSecuritycontroltypeX> IncSecuritycontroltypeXes { get; set; }

    public virtual DbSet<IncStatusX> IncStatusXes { get; set; }

    public virtual DbSet<IncStatushistoryX> IncStatushistoryXes { get; set; }

    public virtual DbSet<IncWitnessX> IncWitnessXes { get; set; }

    public virtual DbSet<IncdocFilequeueX> IncdocFilequeueXes { get; set; }

    public virtual DbSet<IncnotiCorrectiveactiontypeX> IncnotiCorrectiveactiontypeXes { get; set; }

    public virtual DbSet<IncnotiIncidentfactorsX> IncnotiIncidentfactorsXes { get; set; }

    public virtual DbSet<IncnotiIncidentnotificationX> IncnotiIncidentnotificationXes { get; set; }

    public virtual DbSet<IncnotiIncidentstatusX> IncnotiIncidentstatusXes { get; set; }

    public virtual DbSet<IncnotiIncidentsubtypeX> IncnotiIncidentsubtypeXes { get; set; }

    public virtual DbSet<IncnotiIncidenttypeX> IncnotiIncidenttypeXes { get; set; }

    public virtual DbSet<IncnotiInjurytypeX> IncnotiInjurytypeXes { get; set; }

    public virtual DbSet<IncnotiNotificationemailX> IncnotiNotificationemailXes { get; set; }

    public virtual DbSet<IncnotiNotificationroleX> IncnotiNotificationroleXes { get; set; }

    public virtual DbSet<IncnotiOrganisationalstructureX> IncnotiOrganisationalstructureXes { get; set; }

    public virtual DbSet<IncnotiRiskratingX> IncnotiRiskratingXes { get; set; }

    public virtual DbSet<InsBatch> InsBatches { get; set; }

    public virtual DbSet<InsBatcherror> InsBatcherrors { get; set; }

    public virtual DbSet<InsClaim> InsClaims { get; set; }

    public virtual DbSet<InsClaimstaging> InsClaimstagings { get; set; }

    public virtual DbSet<InsEstimate> InsEstimates { get; set; }

    public virtual DbSet<InsEstimatestaging> InsEstimatestagings { get; set; }

    public virtual DbSet<InsFilenote> InsFilenotes { get; set; }

    public virtual DbSet<InsFilenotestaging> InsFilenotestagings { get; set; }

    public virtual DbSet<InsInsurer> InsInsurers { get; set; }

    public virtual DbSet<InsInsurerload> InsInsurerloads { get; set; }

    public virtual DbSet<InsLiability> InsLiabilities { get; set; }

    public virtual DbSet<InsLiabilitystaging> InsLiabilitystagings { get; set; }

    public virtual DbSet<InsMedcert> InsMedcerts { get; set; }

    public virtual DbSet<InsMedcertstaging> InsMedcertstagings { get; set; }

    public virtual DbSet<InsPayment> InsPayments { get; set; }

    public virtual DbSet<InsPaymentstaging> InsPaymentstagings { get; set; }

    public virtual DbSet<InsRecovery> InsRecoveries { get; set; }

    public virtual DbSet<InsRecoverystaging> InsRecoverystagings { get; set; }

    public virtual DbSet<InsStagingload> InsStagingloads { get; set; }

    public virtual DbSet<InsStatus> InsStatuses { get; set; }

    public virtual DbSet<InsStatusstaging> InsStatusstagings { get; set; }

    public virtual DbSet<InsTimeoffwork> InsTimeoffworks { get; set; }

    public virtual DbSet<InsTimeoffworkstaging> InsTimeoffworkstagings { get; set; }

    public virtual DbSet<InsWorkcapacity> InsWorkcapacities { get; set; }

    public virtual DbSet<InsWorkcapacitystaging> InsWorkcapacitystagings { get; set; }

    public virtual DbSet<JobJob> JobJobs { get; set; }

    public virtual DbSet<JobQueue> JobQueues { get; set; }

    public virtual DbSet<JobRecipient> JobRecipients { get; set; }

    public virtual DbSet<LegLegalentity> LegLegalentities { get; set; }

    public virtual DbSet<LegLegalentityX> LegLegalentityXes { get; set; }

    public virtual DbSet<LegOrgstructure> LegOrgstructures { get; set; }

    public virtual DbSet<LegPolicy> LegPolicies { get; set; }

    public virtual DbSet<MapSbc00046210> MapSbc00046210s { get; set; }

    public virtual DbSet<MedCapacity> MedCapacities { get; set; }

    public virtual DbSet<MedCapacitySa> MedCapacitySas { get; set; }

    public virtual DbSet<MedDocument> MedDocuments { get; set; }

    public virtual DbSet<MedMedcert> MedMedcerts { get; set; }

    public virtual DbSet<MedMedcertSa> MedMedcertSas { get; set; }

    public virtual DbSet<MtpBatchnumberX> MtpBatchnumberXes { get; set; }

    public virtual DbSet<MtpFundaccountX> MtpFundaccountXes { get; set; }

    public virtual DbSet<MtpFundorgstructX> MtpFundorgstructXes { get; set; }

    public virtual DbSet<MtpFundorgstructXDeletedCv> MtpFundorgstructXDeletedCvs { get; set; }

    public virtual DbSet<MtpFundprofileX> MtpFundprofileXes { get; set; }

    public virtual DbSet<MtpMasterpieceX> MtpMasterpieceXes { get; set; }

    public virtual DbSet<MtpOrgstructX> MtpOrgstructXes { get; set; }

    public virtual DbSet<MtpVariableX> MtpVariableXes { get; set; }

    public virtual DbSet<NewFundingProfilesCv> NewFundingProfilesCvs { get; set; }

    public virtual DbSet<NewFundingProfilesMappingCv> NewFundingProfilesMappingCvs { get; set; }

    public virtual DbSet<NewFundingProfilesOrgstructCv> NewFundingProfilesOrgstructCvs { get; set; }

    public virtual DbSet<NewFundingProfilesOrgstuctCv> NewFundingProfilesOrgstuctCvs { get; set; }

    public virtual DbSet<OrgstructBatchX> OrgstructBatchXes { get; set; }

    public virtual DbSet<OrgstructErrorsX> OrgstructErrorsXes { get; set; }

    public virtual DbSet<OrgstructStagingX> OrgstructStagingXes { get; set; }

    public virtual DbSet<OsOrgstructure> OsOrgstructures { get; set; }

    public virtual DbSet<OsOrgstructureX> OsOrgstructureXes { get; set; }

    public virtual DbSet<OsOrgstructureXBak> OsOrgstructureXBaks { get; set; }

    public virtual DbSet<ParBank> ParBanks { get; set; }

    public virtual DbSet<ParBusiness> ParBusinesses { get; set; }

    public virtual DbSet<ParBusinessdocument> ParBusinessdocuments { get; set; }

    public virtual DbSet<ParBusinesspermission> ParBusinesspermissions { get; set; }

    public virtual DbSet<ParBusinessprovider> ParBusinessproviders { get; set; }

    public virtual DbSet<ParContact> ParContacts { get; set; }

    public virtual DbSet<ParContacthistory> ParContacthistories { get; set; }

    public virtual DbSet<ParCorrespondencein> ParCorrespondenceins { get; set; }

    public virtual DbSet<ParEmployee> ParEmployees { get; set; }

    public virtual DbSet<ParEmployeeSa> ParEmployeeSas { get; set; }

    public virtual DbSet<ParEmployeeX> ParEmployeeXes { get; set; }

    public virtual DbSet<ParEmployeenamehistory> ParEmployeenamehistories { get; set; }

    public virtual DbSet<ParEmployeenumberhistoryX> ParEmployeenumberhistoryXes { get; set; }

    public virtual DbSet<ParFinance> ParFinances { get; set; }

    public virtual DbSet<ParFinstatushistory> ParFinstatushistories { get; set; }

    public virtual DbSet<ParLocation> ParLocations { get; set; }

    public virtual DbSet<ParLocationhistory> ParLocationhistories { get; set; }

    public virtual DbSet<ParNumber> ParNumbers { get; set; }

    public virtual DbSet<ParParty> ParParties { get; set; }

    public virtual DbSet<ParPartyX> ParPartyXes { get; set; }

    public virtual DbSet<ParProvider> ParProviders { get; set; }

    public virtual DbSet<ParProvidernumber> ParProvidernumbers { get; set; }

    public virtual DbSet<ParProvidertype> ParProvidertypes { get; set; }

    public virtual DbSet<ParProvidertypenumber> ParProvidertypenumbers { get; set; }

    public virtual DbSet<ParSpecialtyX> ParSpecialtyXes { get; set; }

    public virtual DbSet<PayComp> PayComps { get; set; }

    public virtual DbSet<PayCompSa> PayCompSas { get; set; }

    public virtual DbSet<PayCompensationrecipient> PayCompensationrecipients { get; set; }

    public virtual DbSet<PayCompitem> PayCompitems { get; set; }

    public virtual DbSet<PayCompsuitableduty> PayCompsuitableduties { get; set; }

    public virtual DbSet<PayDraft> PayDrafts { get; set; }

    public virtual DbSet<PayDraftitem> PayDraftitems { get; set; }

    public virtual DbSet<PayDraftpayee> PayDraftpayees { get; set; }

    public virtual DbSet<PayInsurerreimbursementIn> PayInsurerreimbursementIns { get; set; }

    public virtual DbSet<PayInvoiceitem> PayInvoiceitems { get; set; }

    public virtual DbSet<PayInvoiceitemX> PayInvoiceitemXes { get; set; }

    public virtual DbSet<PayItem> PayItems { get; set; }

    public virtual DbSet<PayItemsubentry> PayItemsubentries { get; set; }

    public virtual DbSet<PayItemtransaction> PayItemtransactions { get; set; }

    public virtual DbSet<PayPayee> PayPayees { get; set; }

    public virtual DbSet<PayPayeeX> PayPayeeXes { get; set; }

    public virtual DbSet<PayPayment> PayPayments { get; set; }

    public virtual DbSet<PayPaymentX> PayPaymentXes { get; set; }

    public virtual DbSet<PayPaymentmodifyhistory> PayPaymentmodifyhistories { get; set; }

    public virtual DbSet<PayReversal> PayReversals { get; set; }

    public virtual DbSet<PayTransaction> PayTransactions { get; set; }

    public virtual DbSet<PolCoverage> PolCoverages { get; set; }

    public virtual DbSet<PolPolicy> PolPolicies { get; set; }

    public virtual DbSet<PorInjuredworkerX> PorInjuredworkerXes { get; set; }

    public virtual DbSet<PorInjuredworkerassociateddocumentX> PorInjuredworkerassociateddocumentXes { get; set; }

    public virtual DbSet<PorProviderX> PorProviderXes { get; set; }

    public virtual DbSet<PorProvideractionhistoryX> PorProvideractionhistoryXes { get; set; }

    public virtual DbSet<PorProviderassociateddocumentX> PorProviderassociateddocumentXes { get; set; }

    public virtual DbSet<PorTicketX> PorTicketXes { get; set; }

    public virtual DbSet<PorUserX> PorUserXes { get; set; }

    public virtual DbSet<PorUserassociateddocumentX> PorUserassociateddocumentXes { get; set; }

    public virtual DbSet<PorUserpositionX> PorUserpositionXes { get; set; }

    public virtual DbSet<Postcode> Postcodes { get; set; }

    public virtual DbSet<PqPortalqueue> PqPortalqueues { get; set; }

    public virtual DbSet<PqPortalqueuearchive> PqPortalqueuearchives { get; set; }

    public virtual DbSet<PredActiveuser> PredActiveusers { get; set; }

    public virtual DbSet<PredOpenclaim> PredOpenclaims { get; set; }

    public virtual DbSet<Pretransition> Pretransitions { get; set; }

    public virtual DbSet<RecRecovery> RecRecoveries { get; set; }

    public virtual DbSet<RecRecoveryWa> RecRecoveryWas { get; set; }

    public virtual DbSet<RecRecoveryX> RecRecoveryXes { get; set; }

    public virtual DbSet<RehActionX> RehActionXes { get; set; }

    public virtual DbSet<RehDocument> RehDocuments { get; set; }

    public virtual DbSet<RehGoalX> RehGoalXes { get; set; }

    public virtual DbSet<RehRehab> RehRehabs { get; set; }

    public virtual DbSet<RehRehabX> RehRehabXes { get; set; }

    public virtual DbSet<RehSdrosterX> RehSdrosterXes { get; set; }

    public virtual DbSet<RptDocument> RptDocuments { get; set; }

    public virtual DbSet<RptDocumentX> RptDocumentXes { get; set; }

    public virtual DbSet<RptReport> RptReports { get; set; }

    public virtual DbSet<RskLinkedeventX> RskLinkedeventXes { get; set; }

    public virtual DbSet<SaLicenceSa> SaLicenceSas { get; set; }

    public virtual DbSet<SaLicenceregistrationSa> SaLicenceregistrationSas { get; set; }

    public virtual DbSet<SaRegistrationSa> SaRegistrationSas { get; set; }

    public virtual DbSet<SaRegistrationSaX> SaRegistrationSaXes { get; set; }

    public virtual DbSet<SaRegistrationlocationSa> SaRegistrationlocationSas { get; set; }

    public virtual DbSet<SaWorkcoverlocationSa> SaWorkcoverlocationSas { get; set; }

    public virtual DbSet<Sbc00053784> Sbc00053784s { get; set; }

    public virtual DbSet<Sbc00055453> Sbc00055453s { get; set; }

    public virtual DbSet<Sbc00056028> Sbc00056028s { get; set; }

    public virtual DbSet<SchDayofweek> SchDayofweeks { get; set; }

    public virtual DbSet<SchMetadatum> SchMetadata { get; set; }

    public virtual DbSet<SchSchedule> SchSchedules { get; set; }

    public virtual DbSet<SchemaVersion> SchemaVersions { get; set; }

    public virtual DbSet<SecAudit> SecAudits { get; set; }

    public virtual DbSet<SecClaimexclusionsX> SecClaimexclusionsXes { get; set; }

    public virtual DbSet<SecClaiminclusionsX> SecClaiminclusionsXes { get; set; }

    public virtual DbSet<SecHistory> SecHistories { get; set; }

    public virtual DbSet<SecObject> SecObjects { get; set; }

    public virtual DbSet<SecOrgstructX> SecOrgstructXes { get; set; }

    public virtual DbSet<SecPassword> SecPasswords { get; set; }

    public virtual DbSet<SecPasswordhistory> SecPasswordhistories { get; set; }

    public virtual DbSet<SecPermission> SecPermissions { get; set; }

    public virtual DbSet<SecPosition> SecPositions { get; set; }

    public virtual DbSet<SecPositionprofile> SecPositionprofiles { get; set; }

    public virtual DbSet<SecSession> SecSessions { get; set; }

    public virtual DbSet<SecSession2> SecSession2s { get; set; }

    public virtual DbSet<SecUser> SecUsers { get; set; }

    public virtual DbSet<SecUserCommon> SecUserCommons { get; set; }

    public virtual DbSet<SecUserEventtypeX> SecUserEventtypeXes { get; set; }

    public virtual DbSet<SecUserX> SecUserXes { get; set; }

    public virtual DbSet<SecUserXBak> SecUserXBaks { get; set; }

    public virtual DbSet<SecUserdocumentX> SecUserdocumentXes { get; set; }

    public virtual DbSet<SecUserposition> SecUserpositions { get; set; }

    public virtual DbSet<SecUserpositionClaim> SecUserpositionClaims { get; set; }

    public virtual DbSet<SecUserpositionCommon> SecUserpositionCommons { get; set; }

    public virtual DbSet<SerAma> SerAmas { get; set; }

    public virtual DbSet<SerAmadescription> SerAmadescriptions { get; set; }

    public virtual DbSet<SerAmarate> SerAmarates { get; set; }

    public virtual DbSet<SerCustom> SerCustoms { get; set; }

    public virtual DbSet<SerCustomdescription> SerCustomdescriptions { get; set; }

    public virtual DbSet<SerCustomrate> SerCustomrates { get; set; }

    public virtual DbSet<SerPrivatehospSa> SerPrivatehospSas { get; set; }

    public virtual DbSet<SerPrivatehospdescriptionSa> SerPrivatehospdescriptionSas { get; set; }

    public virtual DbSet<SerPrivatehosprateSa> SerPrivatehosprateSas { get; set; }

    public virtual DbSet<SerRate> SerRates { get; set; }

    public virtual DbSet<SerSascheduleSa> SerSascheduleSas { get; set; }

    public virtual DbSet<SerSascheduledescriptionSa> SerSascheduledescriptionSas { get; set; }

    public virtual DbSet<SerSaschedulerateSa> SerSaschedulerateSas { get; set; }

    public virtual DbSet<SerSpecialtyX> SerSpecialtyXes { get; set; }

    public virtual DbSet<SiteLicenceSa> SiteLicenceSas { get; set; }

    public virtual DbSet<SiteSite> SiteSites { get; set; }

    public virtual DbSet<SiteSiteSa> SiteSiteSas { get; set; }

    public virtual DbSet<SubDocument> SubDocuments { get; set; }

    public virtual DbSet<SubExclusionX> SubExclusionXes { get; set; }

    public virtual DbSet<SubReportable> SubReportables { get; set; }

    public virtual DbSet<SubReportabledate> SubReportabledates { get; set; }

    public virtual DbSet<SubReturnSa> SubReturnSas { get; set; }

    public virtual DbSet<SubReturnerrorSa> SubReturnerrorSas { get; set; }

    public virtual DbSet<SubSubmission> SubSubmissions { get; set; }

    public virtual DbSet<SubSubmissionSa> SubSubmissionSas { get; set; }

    public virtual DbSet<Systemnumber> Systemnumbers { get; set; }

    public virtual DbSet<TeamExclusionsX> TeamExclusionsXes { get; set; }

    public virtual DbSet<TeamInclusionsX> TeamInclusionsXes { get; set; }

    public virtual DbSet<TeamOrgstructX> TeamOrgstructXes { get; set; }

    public virtual DbSet<TeamTeamX> TeamTeamXes { get; set; }

    public virtual DbSet<TeamUsersX> TeamUsersXes { get; set; }

    public virtual DbSet<TempHrdatum> TempHrdata { get; set; }

    public virtual DbSet<TempOrgstruct> TempOrgstructs { get; set; }

    public virtual DbSet<TempOrgstructCv> TempOrgstructCvs { get; set; }

    public virtual DbSet<TempOrgstructTj> TempOrgstructTjs { get; set; }

    public virtual DbSet<TskInjuredworkerrequestX> TskInjuredworkerrequestXes { get; set; }

    public virtual DbSet<TskProviderbankrequestX> TskProviderbankrequestXes { get; set; }

    public virtual DbSet<TskProviderrequestX> TskProviderrequestXes { get; set; }

    public virtual DbSet<TskTask> TskTasks { get; set; }

    public virtual DbSet<TskUserrequestX> TskUserrequestXes { get; set; }

    public virtual DbSet<UtilClaimcount> UtilClaimcounts { get; set; }

    public virtual DbSet<UtilClmProvider> UtilClmProviders { get; set; }

    public virtual DbSet<UtilMedDate> UtilMedDates { get; set; }

    public virtual DbSet<UtilParNumber> UtilParNumbers { get; set; }

    public virtual DbSet<VclmAvailabletransaction> VclmAvailabletransactions { get; set; }

    public virtual DbSet<VclmClaimsummary> VclmClaimsummaries { get; set; }

    public virtual DbSet<VclmComppayment> VclmComppayments { get; set; }

    public virtual DbSet<VclmEditriggerSa> VclmEditriggerSas { get; set; }

    public virtual DbSet<VclmEstimateadjustment> VclmEstimateadjustments { get; set; }

    public virtual DbSet<VclmEstimatehistory> VclmEstimatehistories { get; set; }

    public virtual DbSet<VclmEstimatesummary> VclmEstimatesummaries { get; set; }

    public virtual DbSet<VclmLiability> VclmLiabilities { get; set; }

    public virtual DbSet<VclmLiabilityhistory> VclmLiabilityhistories { get; set; }

    public virtual DbSet<VclmMatchedtransaction> VclmMatchedtransactions { get; set; }

    public virtual DbSet<VclmPaymentitem> VclmPaymentitems { get; set; }

    public virtual DbSet<VclmRecoveryadjustment> VclmRecoveryadjustments { get; set; }

    public virtual DbSet<VclmRecoveryhistory> VclmRecoveryhistories { get; set; }

    public virtual DbSet<VclmRecoverysummary> VclmRecoverysummaries { get; set; }

    public virtual DbSet<VclmRtwstatushistory> VclmRtwstatushistories { get; set; }

    public virtual DbSet<VclmRtwstatusmeasure> VclmRtwstatusmeasures { get; set; }

    public virtual DbSet<VclmSecurityX> VclmSecurityXes { get; set; }

    public virtual DbSet<VclmStatushistory> VclmStatushistories { get; set; }

    public virtual DbSet<VevtAssociateduser> VevtAssociatedusers { get; set; }

    public virtual DbSet<VincAssociateduser> VincAssociatedusers { get; set; }

    public virtual DbSet<VincAssociatedwh> VincAssociatedwhs { get; set; }

    public virtual DbSet<VincResponsibleuser> VincResponsibleusers { get; set; }

    public virtual DbSet<VincSecurityX> VincSecurityXes { get; set; }

    public virtual DbSet<VosOrgstructure> VosOrgstructures { get; set; }

    public virtual DbSet<WfAction> WfActions { get; set; }

    public virtual DbSet<WfActionDetail> WfActionDetails { get; set; }

    public virtual DbSet<WfActionposition> WfActionpositions { get; set; }

    public virtual DbSet<WfActionrole> WfActionroles { get; set; }

    public virtual DbSet<WfEscalatetoteam> WfEscalatetoteams { get; set; }

    public virtual DbSet<WfEvent> WfEvents { get; set; }

    public virtual DbSet<WfEventCode> WfEventCodes { get; set; }

    public virtual DbSet<WfEventCriterion> WfEventCriteria { get; set; }

    public virtual DbSet<WfEventOrgstructX> WfEventOrgstructXes { get; set; }

    public virtual DbSet<WfInitiatingevent> WfInitiatingevents { get; set; }

    public virtual DbSet<WfQueue> WfQueues { get; set; }

    public virtual DbSet<WfTerminatingevent> WfTerminatingevents { get; set; }

    public virtual DbSet<WfTfinitevent> WfTfinitevents { get; set; }

    public virtual DbSet<WfTfsatisfyingevent> WfTfsatisfyingevents { get; set; }

    public virtual DbSet<WfTimeframe> WfTimeframes { get; set; }

    public virtual DbSet<WfWorkflow> WfWorkflows { get; set; }

    public virtual DbSet<WfxEntity> WfxEntities { get; set; }

    public virtual DbSet<WfxLasttriggerid> WfxLasttriggerids { get; set; }

    public virtual DbSet<WfxRole> WfxRoles { get; set; }

    public virtual DbSet<WfxTimeframe> WfxTimeframes { get; set; }

    public virtual DbSet<WfxTrigger> WfxTriggers { get; set; }

    public virtual DbSet<WfxTriggerdatum> WfxTriggerdata { get; set; }

    public virtual DbSet<WfxWorkflow> WfxWorkflows { get; set; }

    public virtual DbSet<WhsBatchErrorsX> WhsBatchErrorsXes { get; set; }

    public virtual DbSet<WhsBatchStagingX> WhsBatchStagingXes { get; set; }

    public virtual DbSet<WhsBatchX> WhsBatchXes { get; set; }

    public virtual DbSet<WhsIncidentX> WhsIncidentXes { get; set; }

    public virtual DbSet<WhsIncidentX1> WhsIncidentXes1 { get; set; }

    public virtual DbSet<Zassociatedcode> Zassociatedcodes { get; set; }

    public virtual DbSet<Zassociatedtype> Zassociatedtypes { get; set; }

    public virtual DbSet<Zmappedcode> Zmappedcodes { get; set; }

    public virtual DbSet<Zprimarycode> Zprimarycodes { get; set; }

    public virtual DbSet<Zprimarycodedef> Zprimarycodedefs { get; set; }

    public virtual DbSet<Zzone> Zzones { get; set; }

    public virtual DbSet<Zzonedcode> Zzonedcodes { get; set; }

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseSqlServer("Data Source=bd-ss19f;Initial Catalog=SAOCPSETechStackDevl; user=saocpse_user; password=saocpse_user; language=British; TrustServerCertificate=True;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AdmAuthorisationlevel>(entity =>
        {
            entity.HasKey(e => e.Authorisationlevelid);

            entity.ToTable("ADM_AUTHORISATIONLEVEL", tb =>
                {
                    tb.HasTrigger("auddel_ADM_AUTHORISATIONLEVEL");
                    tb.HasTrigger("audins_ADM_AUTHORISATIONLEVEL");
                    tb.HasTrigger("audupd_ADM_AUTHORISATIONLEVEL");
                });

            entity.Property(e => e.Authorisationlevelid).HasColumnName("AUTHORISATIONLEVELID");
            entity.Property(e => e.Amount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("AMOUNT");
            entity.Property(e => e.Claimtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Jurisdictionzone).HasColumnName("JURISDICTIONZONE");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORY");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPE");
            entity.Property(e => e.Positionid).HasColumnName("POSITIONID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Position).WithMany(p => p.AdmAuthorisationlevels)
                .HasForeignKey(d => d.Positionid)
                .HasConstraintName("FK_ADM_AUTHORISATIONLEVEL_POSITIONID");
        });

        modelBuilder.Entity<AdmClientX>(entity =>
        {
            entity.HasKey(e => e.Clientid);

            entity.ToTable("ADM_CLIENT_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_CLIENT_X");
                    tb.HasTrigger("audins_ADM_CLIENT_X");
                    tb.HasTrigger("audupd_ADM_CLIENT_X");
                });

            entity.Property(e => e.Clientid).HasColumnName("CLIENTID");
            entity.Property(e => e.Address1)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Agegroup)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGEGROUP");
            entity.Property(e => e.Bed)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BED");
            entity.Property(e => e.Bedowner)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BEDOWNER");
            entity.Property(e => e.Bedstatus)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BEDSTATUS");
            entity.Property(e => e.Clientnumber)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLIENTNUMBER");
            entity.Property(e => e.Costcentrenumber)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COSTCENTRENUMBER");
            entity.Property(e => e.Dateofbirth)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFBIRTH");
            entity.Property(e => e.Firstname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Gender).HasColumnName("GENDER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Phone)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PHONE");
            entity.Property(e => e.Postcode)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.State)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUBURB");
            entity.Property(e => e.Surname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SURNAME");
            entity.Property(e => e.Teamdirectorate)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAMDIRECTORATE");
            entity.Property(e => e.Teamname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAMNAME");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<AdmEmaildisclaimer>(entity =>
        {
            entity.HasKey(e => e.Emaildisclaimerid).HasName("PK_ADM_EMAILDISCLAIMER_EMAILTEMPLATEID");

            entity.ToTable("ADM_EMAILDISCLAIMER", tb =>
                {
                    tb.HasTrigger("auddel_ADM_EMAILDISCLAIMER");
                    tb.HasTrigger("audins_ADM_EMAILDISCLAIMER");
                    tb.HasTrigger("audupd_ADM_EMAILDISCLAIMER");
                });

            entity.Property(e => e.Emaildisclaimerid).HasColumnName("EMAILDISCLAIMERID");
            entity.Property(e => e.Emaildisclaimer)
                .IsUnicode(false)
                .HasColumnName("EMAILDISCLAIMER");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<AdmEmailtemplate>(entity =>
        {
            entity.HasKey(e => e.Emailtemplateid).HasName("PK_ADM_EMAILTEMPLATE_EMAILTEMPLATEID");

            entity.ToTable("ADM_EMAILTEMPLATE", tb =>
                {
                    tb.HasTrigger("auddel_ADM_EMAILTEMPLATE");
                    tb.HasTrigger("audins_ADM_EMAILTEMPLATE");
                    tb.HasTrigger("audupd_ADM_EMAILTEMPLATE");
                });

            entity.Property(e => e.Emailtemplateid).HasColumnName("EMAILTEMPLATEID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Dlm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DLM");
            entity.Property(e => e.Emailbody)
                .IsUnicode(false)
                .HasColumnName("EMAILBODY");
            entity.Property(e => e.Emailtitle)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAILTITLE");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Includeemailsignature).HasColumnName("INCLUDEEMAILSIGNATURE");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Securityclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SECURITYCLASSIFICATION");
            entity.Property(e => e.Subject)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<AdmEmailtemplatedocument>(entity =>
        {
            entity.HasKey(e => new { e.Emailtemplateid, e.Templatedocumentno });

            entity.ToTable("ADM_EMAILTEMPLATEDOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_ADM_EMAILTEMPLATEDOCUME");
                    tb.HasTrigger("audins_ADM_EMAILTEMPLATEDOCUME");
                    tb.HasTrigger("audupd_ADM_EMAILTEMPLATEDOCUME");
                });

            entity.Property(e => e.Emailtemplateid).HasColumnName("EMAILTEMPLATEID");
            entity.Property(e => e.Templatedocumentno).HasColumnName("TEMPLATEDOCUMENTNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.AdmEmailtemplatedocuments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_ADM_EMAILTEMPLATEDOCUMENT_DOCUMENTID");

            entity.HasOne(d => d.Emailtemplate).WithMany(p => p.AdmEmailtemplatedocuments)
                .HasForeignKey(d => d.Emailtemplateid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_EMAILTEMPLATEDOCUMENT_EMAILTEMPLATEID");
        });

        modelBuilder.Entity<AdmEmployeecount>(entity =>
        {
            entity.HasKey(e => e.Employeecountid);

            entity.ToTable("ADM_EMPLOYEECOUNTS", tb =>
                {
                    tb.HasTrigger("auddel_ADM_EMPLOYEECOUNTS");
                    tb.HasTrigger("audins_ADM_EMPLOYEECOUNTS");
                    tb.HasTrigger("audupd_ADM_EMPLOYEECOUNTS");
                });

            entity.Property(e => e.Employeecountid).HasColumnName("EMPLOYEECOUNTID");
            entity.Property(e => e.Dateeffective)
                .HasColumnType("datetime")
                .HasColumnName("DATEEFFECTIVE");
            entity.Property(e => e.Fulltimeemployees).HasColumnName("FULLTIMEEMPLOYEES");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<AdmEventnotificationX>(entity =>
        {
            entity.HasKey(e => e.Eventnotificationid).HasName("PK_ADM_EVENTNOTIFICATION");

            entity.ToTable("ADM_EVENTNOTIFICATION_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_EVENTNOTIFICATION_X");
                    tb.HasTrigger("audins_ADM_EVENTNOTIFICATION_X");
                    tb.HasTrigger("audupd_ADM_EVENTNOTIFICATION_X");
                });

            entity.Property(e => e.Eventnotificationid).HasColumnName("EVENTNOTIFICATIONID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Body)
                .IsUnicode(false)
                .HasColumnName("BODY");
            entity.Property(e => e.Days).HasColumnName("DAYS");
            entity.Property(e => e.Eventtitle)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EVENTTITLE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Includepdfreport).HasColumnName("INCLUDEPDFREPORT");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Restrictedevents).HasColumnName("RESTRICTEDEVENTS");
            entity.Property(e => e.Sendnotification).HasColumnName("SENDNOTIFICATION");
            entity.Property(e => e.Subject)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Triggeringevent)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRIGGERINGEVENT");
        });

        modelBuilder.Entity<AdmEventnotificationclientseverityX>(entity =>
        {
            entity.HasKey(e => new { e.Eventnotificationid, e.Clientseverityno });

            entity.ToTable("ADM_EVENTNOTIFICATIONCLIENTSEVERITY_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_EVENTNOTIFICATIONCL");
                    tb.HasTrigger("audins_ADM_EVENTNOTIFICATIONCL");
                    tb.HasTrigger("audupd_ADM_EVENTNOTIFICATIONCL");
                });

            entity.Property(e => e.Eventnotificationid).HasColumnName("EVENTNOTIFICATIONID");
            entity.Property(e => e.Clientseverityno).HasColumnName("CLIENTSEVERITYNO");
            entity.Property(e => e.Clientseveritytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLIENTSEVERITYTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Eventnotification).WithMany(p => p.AdmEventnotificationclientseverityXes)
                .HasForeignKey(d => d.Eventnotificationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_EVENTNOTIFICATIONCLIENTSEVERITY_X_EVENTNOTIFICATIONID");
        });

        modelBuilder.Entity<AdmEventnotificationcomplaintX>(entity =>
        {
            entity.HasKey(e => new { e.Eventnotificationid, e.Complaintno });

            entity.ToTable("ADM_EVENTNOTIFICATIONCOMPLAINT_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_EVENTNOTIFICATIONCO");
                    tb.HasTrigger("audins_ADM_EVENTNOTIFICATIONCO");
                    tb.HasTrigger("audupd_ADM_EVENTNOTIFICATIONCO");
                });

            entity.Property(e => e.Eventnotificationid).HasColumnName("EVENTNOTIFICATIONID");
            entity.Property(e => e.Complaintno).HasColumnName("COMPLAINTNO");
            entity.Property(e => e.Complainttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMPLAINTTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Eventnotification).WithMany(p => p.AdmEventnotificationcomplaintXes)
                .HasForeignKey(d => d.Eventnotificationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_EVENTNOTIFICATIONCOMPLAINT_X_EVENTNOTIFICATIONID");
        });

        modelBuilder.Entity<AdmEventnotificationeventstatusX>(entity =>
        {
            entity.HasKey(e => new { e.Eventnotificationid, e.Eventstatusno });

            entity.ToTable("ADM_EVENTNOTIFICATIONEVENTSTATUS_X");

            entity.Property(e => e.Eventnotificationid).HasColumnName("EVENTNOTIFICATIONID");
            entity.Property(e => e.Eventstatusno).HasColumnName("EVENTSTATUSNO");
            entity.Property(e => e.Eventstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVENTSTATUS");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Eventnotification).WithMany(p => p.AdmEventnotificationeventstatusXes)
                .HasForeignKey(d => d.Eventnotificationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_EVENTNOTIFICATIONEVENTSTATUS_X_EVENTNOTIFICATIONID");
        });

        modelBuilder.Entity<AdmEventnotificationeventsubtypeX>(entity =>
        {
            entity.HasKey(e => new { e.Eventnotificationid, e.Eventsubtypeno });

            entity.ToTable("ADM_EVENTNOTIFICATIONEVENTSUBTYPE_X");

            entity.Property(e => e.Eventnotificationid).HasColumnName("EVENTNOTIFICATIONID");
            entity.Property(e => e.Eventsubtypeno).HasColumnName("EVENTSUBTYPENO");
            entity.Property(e => e.Eventsubtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVENTSUBTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Eventnotification).WithMany(p => p.AdmEventnotificationeventsubtypeXes)
                .HasForeignKey(d => d.Eventnotificationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_EVENTNOTIFICATIONEVENTSUBTYPE_X_EVENTNOTIFICATIONID");
        });

        modelBuilder.Entity<AdmEventnotificationeventsubtypeclientX>(entity =>
        {
            entity.HasKey(e => new { e.Eventnotificationid, e.Eventsubtypeno });

            entity.ToTable("ADM_EVENTNOTIFICATIONEVENTSUBTYPECLIENT_X");

            entity.Property(e => e.Eventnotificationid).HasColumnName("EVENTNOTIFICATIONID");
            entity.Property(e => e.Eventsubtypeno).HasColumnName("EVENTSUBTYPENO");
            entity.Property(e => e.Clienteventsubtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLIENTEVENTSUBTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Eventnotification).WithMany(p => p.AdmEventnotificationeventsubtypeclientXes)
                .HasForeignKey(d => d.Eventnotificationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_EVENTNOTIFICATIONEVENTSUBTYPECLIENT_X_EVENTNOTIFICATIONID");
        });

        modelBuilder.Entity<AdmEventnotificationeventtypeX>(entity =>
        {
            entity.HasKey(e => new { e.Eventnotificationid, e.Eventtypeno });

            entity.ToTable("ADM_EVENTNOTIFICATIONEVENTTYPE_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_EVENTNOTIFICATIONEV");
                    tb.HasTrigger("audins_ADM_EVENTNOTIFICATIONEV");
                    tb.HasTrigger("audupd_ADM_EVENTNOTIFICATIONEV");
                });

            entity.Property(e => e.Eventnotificationid).HasColumnName("EVENTNOTIFICATIONID");
            entity.Property(e => e.Eventtypeno).HasColumnName("EVENTTYPENO");
            entity.Property(e => e.Eventtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVENTTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Eventnotification).WithMany(p => p.AdmEventnotificationeventtypeXes)
                .HasForeignKey(d => d.Eventnotificationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_EVENTNOTIFICATIONEVENTTYPE_X_EVENTNOTIFICATIONID");
        });

        modelBuilder.Entity<AdmEventnotificationfeedbackX>(entity =>
        {
            entity.HasKey(e => new { e.Eventnotificationid, e.Feedbackno });

            entity.ToTable("ADM_EVENTNOTIFICATIONFEEDBACK_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_EVENTNOTIFICATIONFE");
                    tb.HasTrigger("audins_ADM_EVENTNOTIFICATIONFE");
                    tb.HasTrigger("audupd_ADM_EVENTNOTIFICATIONFE");
                });

            entity.Property(e => e.Eventnotificationid).HasColumnName("EVENTNOTIFICATIONID");
            entity.Property(e => e.Feedbackno).HasColumnName("FEEDBACKNO");
            entity.Property(e => e.Feedbacktype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FEEDBACKTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Eventnotification).WithMany(p => p.AdmEventnotificationfeedbackXes)
                .HasForeignKey(d => d.Eventnotificationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_EVENTNOTIFICATIONFEEDBACK_X_EVENTNOTIFICATIONID");
        });

        modelBuilder.Entity<AdmEventnotificationhazardX>(entity =>
        {
            entity.HasKey(e => new { e.Eventnotificationid, e.Hazardno });

            entity.ToTable("ADM_EVENTNOTIFICATIONHAZARD_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_EVENTNOTIFICATIONHA");
                    tb.HasTrigger("audins_ADM_EVENTNOTIFICATIONHA");
                    tb.HasTrigger("audupd_ADM_EVENTNOTIFICATIONHA");
                });

            entity.Property(e => e.Eventnotificationid).HasColumnName("EVENTNOTIFICATIONID");
            entity.Property(e => e.Hazardno).HasColumnName("HAZARDNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hazardtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAZARDTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Eventnotification).WithMany(p => p.AdmEventnotificationhazardXes)
                .HasForeignKey(d => d.Eventnotificationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_EVENTNOTIFICATIONHAZARD_X_EVENTNOTIFICATIONID");
        });

        modelBuilder.Entity<AdmEventnotificationorgstructX>(entity =>
        {
            entity.HasKey(e => new { e.Eventnotificationid, e.Orgstructno });

            entity.ToTable("ADM_EVENTNOTIFICATIONORGSTRUCT_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_EVENTNOTIFICATIONOR");
                    tb.HasTrigger("audins_ADM_EVENTNOTIFICATIONOR");
                    tb.HasTrigger("audupd_ADM_EVENTNOTIFICATIONOR");
                });

            entity.Property(e => e.Eventnotificationid).HasColumnName("EVENTNOTIFICATIONID");
            entity.Property(e => e.Orgstructno).HasColumnName("ORGSTRUCTNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Eventnotification).WithMany(p => p.AdmEventnotificationorgstructXes)
                .HasForeignKey(d => d.Eventnotificationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_EVENTNOTIFICATIONORGSTRUCT_X_EVENTNOTIFICATIONID");
        });

        modelBuilder.Entity<AdmEventnotificationrecipientX>(entity =>
        {
            entity.HasKey(e => new { e.Eventnotificationid, e.Recipientno });

            entity.ToTable("ADM_EVENTNOTIFICATIONRECIPIENT_X");

            entity.Property(e => e.Eventnotificationid).HasColumnName("EVENTNOTIFICATIONID");
            entity.Property(e => e.Recipientno).HasColumnName("RECIPIENTNO");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Eventnotification).WithMany(p => p.AdmEventnotificationrecipientXes)
                .HasForeignKey(d => d.Eventnotificationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_EVENTNOTIFICATIONRECIPIENT_X_EVENTNOTIFICATIONID");
        });

        modelBuilder.Entity<AdmEventnotificationreportableX>(entity =>
        {
            entity.HasKey(e => new { e.Eventnotificationid, e.Reportableno });

            entity.ToTable("ADM_EVENTNOTIFICATIONREPORTABLE_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_EVENTNOTIFICATIONRE");
                    tb.HasTrigger("audins_ADM_EVENTNOTIFICATIONRE");
                    tb.HasTrigger("audupd_ADM_EVENTNOTIFICATIONRE");
                });

            entity.Property(e => e.Eventnotificationid).HasColumnName("EVENTNOTIFICATIONID");
            entity.Property(e => e.Reportableno).HasColumnName("REPORTABLENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reportabletype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPORTABLETYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Eventnotification).WithMany(p => p.AdmEventnotificationreportableXes)
                .HasForeignKey(d => d.Eventnotificationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_EVENTNOTIFICATIONREPORTABLE_X_EVENTNOTIFICATIONID");
        });

        modelBuilder.Entity<AdmEventnotificationriskX>(entity =>
        {
            entity.HasKey(e => new { e.Eventnotificationid, e.Riskno });

            entity.ToTable("ADM_EVENTNOTIFICATIONRISK_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_EVENTNOTIFICATIONRI");
                    tb.HasTrigger("audins_ADM_EVENTNOTIFICATIONRI");
                    tb.HasTrigger("audupd_ADM_EVENTNOTIFICATIONRI");
                });

            entity.Property(e => e.Eventnotificationid).HasColumnName("EVENTNOTIFICATIONID");
            entity.Property(e => e.Riskno).HasColumnName("RISKNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Riskrating)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RISKRATING");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Eventnotification).WithMany(p => p.AdmEventnotificationriskXes)
                .HasForeignKey(d => d.Eventnotificationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_EVENTNOTIFICATIONRISK_X_EVENTNOTIFICATIONID");
        });

        modelBuilder.Entity<AdmEventnotificationroleX>(entity =>
        {
            entity.HasKey(e => new { e.Eventnotificationid, e.Roleno });

            entity.ToTable("ADM_EVENTNOTIFICATIONROLE_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_EVENTNOTIFICATIONRO");
                    tb.HasTrigger("audins_ADM_EVENTNOTIFICATIONRO");
                    tb.HasTrigger("audupd_ADM_EVENTNOTIFICATIONRO");
                });

            entity.Property(e => e.Eventnotificationid).HasColumnName("EVENTNOTIFICATIONID");
            entity.Property(e => e.Roleno).HasColumnName("ROLENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Role)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Eventnotification).WithMany(p => p.AdmEventnotificationroleXes)
                .HasForeignKey(d => d.Eventnotificationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_EVENTNOTIFICATIONROLE_X_EVENTNOTIFICATIONID");
        });

        modelBuilder.Entity<AdmEventnotificationtreatmentX>(entity =>
        {
            entity.HasKey(e => new { e.Eventnotificationid, e.Treatmentno });

            entity.ToTable("ADM_EVENTNOTIFICATIONTREATMENT_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_EVENTNOTIFICATIONTR");
                    tb.HasTrigger("audins_ADM_EVENTNOTIFICATIONTR");
                    tb.HasTrigger("audupd_ADM_EVENTNOTIFICATIONTR");
                });

            entity.Property(e => e.Eventnotificationid).HasColumnName("EVENTNOTIFICATIONID");
            entity.Property(e => e.Treatmentno).HasColumnName("TREATMENTNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Treatmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TREATMENTTYPE");

            entity.HasOne(d => d.Eventnotification).WithMany(p => p.AdmEventnotificationtreatmentXes)
                .HasForeignKey(d => d.Eventnotificationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_EVENTNOTIFICATIONTREATMENT_X_EVENTNOTIFICATIONID");
        });

        modelBuilder.Entity<AdmFilenotetemplate>(entity =>
        {
            entity.HasKey(e => e.Filenotetemplateid).HasName("PK_ADM_FILENOTETEMPLATE_FILENOTETEMPLATEID");

            entity.ToTable("ADM_FILENOTETEMPLATE", tb =>
                {
                    tb.HasTrigger("auddel_ADM_FILENOTETEMPLATE");
                    tb.HasTrigger("audins_ADM_FILENOTETEMPLATE");
                    tb.HasTrigger("audupd_ADM_FILENOTETEMPLATE");
                });

            entity.Property(e => e.Filenotetemplateid).HasColumnName("FILENOTETEMPLATEID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Category)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CATEGORY");
            entity.Property(e => e.Filenotedescription)
                .IsUnicode(false)
                .HasColumnName("FILENOTEDESCRIPTION");
            entity.Property(e => e.Filenotetitle)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("FILENOTETITLE");
            entity.Property(e => e.Filenotetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILENOTETYPE");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Subject)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<AdmGovsafetytextX>(entity =>
        {
            entity.HasKey(e => e.Govsafetytextid);

            entity.ToTable("ADM_GOVSAFETYTEXT_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_GOVSAFETYTEXT_X");
                    tb.HasTrigger("audins_ADM_GOVSAFETYTEXT_X");
                    tb.HasTrigger("audupd_ADM_GOVSAFETYTEXT_X");
                });

            entity.HasIndex(e => new { e.Formtype, e.Formgrouptype, e.Contentname, e.Conditionaltype, e.Conditionalvalue }, "ADM_GOVSAFETYTEXT_X_IDX_CONTENT").IsUnique();

            entity.Property(e => e.Govsafetytextid).HasColumnName("GOVSAFETYTEXTID");
            entity.Property(e => e.Conditionaltype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONDITIONALTYPE");
            entity.Property(e => e.Conditionalvalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONDITIONALVALUE");
            entity.Property(e => e.Contentname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CONTENTNAME");
            entity.Property(e => e.Displayname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DISPLAYNAME");
            entity.Property(e => e.Formgrouptype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FORMGROUPTYPE");
            entity.Property(e => e.Formtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FORMTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Text)
                .IsUnicode(false)
                .HasColumnName("TEXT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<AdmHirmemailX>(entity =>
        {
            entity.HasKey(e => e.Hirmemailid);

            entity.ToTable("ADM_HIRMEMAIL_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_HIRMEMAIL_X");
                    tb.HasTrigger("audins_ADM_HIRMEMAIL_X");
                    tb.HasTrigger("audupd_ADM_HIRMEMAIL_X");
                });

            entity.Property(e => e.Hirmemailid).HasColumnName("HIRMEMAILID");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<AdmMergefield>(entity =>
        {
            entity.HasKey(e => e.Mergefieldid);

            entity.ToTable("ADM_MERGEFIELDS", tb =>
                {
                    tb.HasTrigger("auddel_ADM_MERGEFIELDS");
                    tb.HasTrigger("audins_ADM_MERGEFIELDS");
                    tb.HasTrigger("audupd_ADM_MERGEFIELDS");
                });

            entity.Property(e => e.Mergefieldid).HasColumnName("MERGEFIELDID");
            entity.Property(e => e.Alias)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ALIAS");
            entity.Property(e => e.Fieldformula)
                .IsUnicode(false)
                .HasColumnName("FIELDFORMULA");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<AdmOrgemailX>(entity =>
        {
            entity.HasKey(e => e.Orgemailid);

            entity.ToTable("ADM_ORGEMAIL_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_ORGEMAIL_X");
                    tb.HasTrigger("audins_ADM_ORGEMAIL_X");
                    tb.HasTrigger("audupd_ADM_ORGEMAIL_X");
                });

            entity.Property(e => e.Orgemailid).HasColumnName("ORGEMAILID");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Orgstruct).WithMany(p => p.AdmOrgemailXes)
                .HasForeignKey(d => d.Orgstructid)
                .HasConstraintName("FK_ADM_ORGEMAIL_X_OS_ORGSTRUCTURE");
        });

        modelBuilder.Entity<AdmPayrollcategory>(entity =>
        {
            entity.HasKey(e => e.Payrollcategoryid).HasName("PK_ADM_PAYROLLCATEGORY_PAYROLLCATEGORYID");

            entity.ToTable("ADM_PAYROLLCATEGORY", tb =>
                {
                    tb.HasTrigger("auddel_ADM_PAYROLLCATEGORY");
                    tb.HasTrigger("audins_ADM_PAYROLLCATEGORY");
                    tb.HasTrigger("audupd_ADM_PAYROLLCATEGORY");
                });

            entity.Property(e => e.Payrollcategoryid).HasColumnName("PAYROLLCATEGORYID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Dateeffective)
                .HasColumnType("datetime")
                .HasColumnName("DATEEFFECTIVE");
            entity.Property(e => e.Earningscategorycodevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EARNINGSCATEGORYCODEVALUE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Includeinhours).HasColumnName("INCLUDEINHOURS");
            entity.Property(e => e.Jurisdictionzone).HasColumnName("JURISDICTIONZONE");
            entity.Property(e => e.Payrolldescriptioncodevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYROLLDESCRIPTIONCODEVALUE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<AdmPornotificationX>(entity =>
        {
            entity.HasKey(e => e.Pornotificationid).HasName("PK_ADM_PORNOTIFICATION");

            entity.ToTable("ADM_PORNOTIFICATION_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_PORNOTIFICATION_X");
                    tb.HasTrigger("audins_ADM_PORNOTIFICATION_X");
                    tb.HasTrigger("audupd_ADM_PORNOTIFICATION_X");
                });

            entity.Property(e => e.Pornotificationid).HasColumnName("PORNOTIFICATIONID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Body)
                .IsUnicode(false)
                .HasColumnName("BODY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Includepdfreport).HasColumnName("INCLUDEPDFREPORT");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Shorttitle)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SHORTTITLE");
            entity.Property(e => e.Subject)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Triggeringevent)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRIGGERINGEVENT");
        });

        modelBuilder.Entity<AdmPornotificationemailX>(entity =>
        {
            entity.HasKey(e => new { e.Pornotificationid, e.Emailno });

            entity.ToTable("ADM_PORNOTIFICATIONEMAIL_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_PORNOTIFICATIONEMAI");
                    tb.HasTrigger("audins_ADM_PORNOTIFICATIONEMAI");
                    tb.HasTrigger("audupd_ADM_PORNOTIFICATIONEMAI");
                });

            entity.Property(e => e.Pornotificationid).HasColumnName("PORNOTIFICATIONID");
            entity.Property(e => e.Emailno).HasColumnName("EMAILNO");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Pornotification).WithMany(p => p.AdmPornotificationemailXes)
                .HasForeignKey(d => d.Pornotificationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_PORNOTIFICATIONEMAIL_X_PORNOTIFICATIONID");
        });

        modelBuilder.Entity<AdmPornotificationroleX>(entity =>
        {
            entity.HasKey(e => new { e.Pornotificationid, e.Roleno });

            entity.ToTable("ADM_PORNOTIFICATIONROLE_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_PORNOTIFICATIONROLE");
                    tb.HasTrigger("audins_ADM_PORNOTIFICATIONROLE");
                    tb.HasTrigger("audupd_ADM_PORNOTIFICATIONROLE");
                });

            entity.Property(e => e.Pornotificationid).HasColumnName("PORNOTIFICATIONID");
            entity.Property(e => e.Roleno).HasColumnName("ROLENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Role)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Pornotification).WithMany(p => p.AdmPornotificationroleXes)
                .HasForeignKey(d => d.Pornotificationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADM_PORNOTIFICATIONROLE_X_PORNOTIFICATIONID");
        });

        modelBuilder.Entity<AdmPorpositionX>(entity =>
        {
            entity.HasKey(e => e.Porpositionid);

            entity.ToTable("ADM_PORPOSITION_X", tb =>
                {
                    tb.HasTrigger("auddel_ADM_PORPOSITION_X");
                    tb.HasTrigger("audins_ADM_PORPOSITION_X");
                    tb.HasTrigger("audupd_ADM_PORPOSITION_X");
                });

            entity.Property(e => e.Porpositionid).HasColumnName("PORPOSITIONID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Positionid).HasColumnName("POSITIONID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Position).WithMany(p => p.AdmPorpositionXes)
                .HasForeignKey(d => d.Positionid)
                .HasConstraintName("FK_ADM_PORPOSITION_X_POSITIONID");
        });

        modelBuilder.Entity<AdmRate>(entity =>
        {
            entity.HasKey(e => e.Rateid).HasName("PK_ADM_RATES_RATEID");

            entity.ToTable("ADM_RATES", tb =>
                {
                    tb.HasTrigger("auddel_ADM_RATES");
                    tb.HasTrigger("audins_ADM_RATES");
                    tb.HasTrigger("audupd_ADM_RATES");
                });

            entity.Property(e => e.Rateid).HasColumnName("RATEID");
            entity.Property(e => e.Amount)
                .HasColumnType("numeric(13, 5)")
                .HasColumnName("AMOUNT");
            entity.Property(e => e.Dateeffectivefrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEEFFECTIVEFROM");
            entity.Property(e => e.Dateeffectiveto)
                .HasColumnType("datetime")
                .HasColumnName("DATEEFFECTIVETO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Jurisdictionzone).HasColumnName("JURISDICTIONZONE");
            entity.Property(e => e.Ratetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RATETYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<AdmSmstemplate>(entity =>
        {
            entity.HasKey(e => e.Smstemplateid).HasName("PK_ADM_SMSTEMPLATE_SMSTEMPLATEID");

            entity.ToTable("ADM_SMSTEMPLATE", tb =>
                {
                    tb.HasTrigger("auddel_ADM_SMSTEMPLATE");
                    tb.HasTrigger("audins_ADM_SMSTEMPLATE");
                    tb.HasTrigger("audupd_ADM_SMSTEMPLATE");
                });

            entity.Property(e => e.Smstemplateid).HasColumnName("SMSTEMPLATEID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Smsmessage)
                .HasMaxLength(765)
                .IsUnicode(false)
                .HasColumnName("SMSMESSAGE");
            entity.Property(e => e.Smstitle)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SMSTITLE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<AdmSpecialdate>(entity =>
        {
            entity.HasKey(e => e.Specialdateid).HasName("PK_ADM_SPECIALDATE_SPECIALDATEID");

            entity.ToTable("ADM_SPECIALDATE", tb =>
                {
                    tb.HasTrigger("auddel_ADM_SPECIALDATE");
                    tb.HasTrigger("audins_ADM_SPECIALDATE");
                    tb.HasTrigger("audupd_ADM_SPECIALDATE");
                });

            entity.Property(e => e.Specialdateid).HasColumnName("SPECIALDATEID");
            entity.Property(e => e.Datetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DATETYPE");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Jurisdictionzone).HasColumnName("JURISDICTIONZONE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Specialdate)
                .HasColumnType("datetime")
                .HasColumnName("SPECIALDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<AdmTaxscale>(entity =>
        {
            entity.HasKey(e => e.Taxscaleid);

            entity.ToTable("ADM_TAXSCALE", tb =>
                {
                    tb.HasTrigger("auddel_ADM_TAXSCALE");
                    tb.HasTrigger("audins_ADM_TAXSCALE");
                    tb.HasTrigger("audupd_ADM_TAXSCALE");
                });

            entity.Property(e => e.Taxscaleid).HasColumnName("TAXSCALEID");
            entity.Property(e => e.Coefficienta)
                .HasColumnType("numeric(10, 4)")
                .HasColumnName("COEFFICIENTA");
            entity.Property(e => e.Coefficientb)
                .HasColumnType("numeric(10, 4)")
                .HasColumnName("COEFFICIENTB");
            entity.Property(e => e.Earningsfrom)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("EARNINGSFROM");
            entity.Property(e => e.Earningsto)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("EARNINGSTO");
            entity.Property(e => e.Financialyear)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FINANCIALYEAR");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Schedule)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SCHEDULE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<AudAudit>(entity =>
        {
            entity.HasKey(e => e.AuditId).HasName("PK_AUD_AUDIT_AUDITID");

            entity.ToTable("AUD_AUDIT");

            entity.Property(e => e.AuditId).HasColumnName("auditId");
            entity.Property(e => e.Activity)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AudDatetime)
                .HasColumnType("datetime")
                .HasColumnName("aud_datetime");
            entity.Property(e => e.Idcol).HasColumnName("idcol");
            entity.Property(e => e.SourceTimestamp).HasMaxLength(8);
            entity.Property(e => e.Tablename)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("tablename");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Userlogon)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("userlogon");
        });

        modelBuilder.Entity<AudAuditdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AUD_AUDITDATA");

            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.ColName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NewValue).IsUnicode(false);
            entity.Property(e => e.OldValue).IsUnicode(false);
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<AuthAudit>(entity =>
        {
            entity.HasKey(e => e.Authid).HasName("PK_AUTH_AUDIT_AUTHID");

            entity.ToTable("AUTH_AUDIT", tb =>
                {
                    tb.HasTrigger("auddel_AUTH_AUDIT");
                    tb.HasTrigger("audins_AUTH_AUDIT");
                    tb.HasTrigger("audupd_AUTH_AUDIT");
                });

            entity.Property(e => e.Authid).HasColumnName("AUTHID");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY");
            entity.Property(e => e.Dateaudit)
                .HasColumnType("datetime")
                .HasColumnName("DATEAUDIT");
            entity.Property(e => e.Dob)
                .HasColumnType("datetime")
                .HasColumnName("DOB");
            entity.Property(e => e.Emailladdress)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAILLADDRESS");
            entity.Property(e => e.Error)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.Familyname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("FAMILYNAME");
            entity.Property(e => e.Givenname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("GIVENNAME");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Ip)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IP");
            entity.Property(e => e.Iswhsconsultant).HasColumnName("ISWHSCONSULTANT");
            entity.Property(e => e.Mac)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MAC");
            entity.Property(e => e.Portfolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PORTFOLIO");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Region)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REGION");
            entity.Property(e => e.Stage)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STAGE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Type)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<AuthAuthEmaildomain>(entity =>
        {
            entity.HasKey(e => e.Emaildomainid).HasName("PK_AUTH_AUTH_EMAILDOMAIN_EMAILDOMAINID");

            entity.ToTable("AUTH_AUTH_EMAILDOMAIN", tb =>
                {
                    tb.HasTrigger("auddel_AUTH_AUTH_EMAILDOMAIN");
                    tb.HasTrigger("audins_AUTH_AUTH_EMAILDOMAIN");
                    tb.HasTrigger("audupd_AUTH_AUTH_EMAILDOMAIN");
                });

            entity.Property(e => e.Emaildomainid).HasColumnName("EMAILDOMAINID");
            entity.Property(e => e.Domain)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DOMAIN");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<AuthBlocked>(entity =>
        {
            entity.HasKey(e => e.Blockedid).HasName("PK_AUTH_BLOCKED_BLOCKEDID");

            entity.ToTable("AUTH_BLOCKED", tb =>
                {
                    tb.HasTrigger("auddel_AUTH_BLOCKED");
                    tb.HasTrigger("audins_AUTH_BLOCKED");
                    tb.HasTrigger("audupd_AUTH_BLOCKED");
                });

            entity.Property(e => e.Blockedid).HasColumnName("BLOCKEDID");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Ip)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IP");
            entity.Property(e => e.Mac)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MAC");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<AuthClaimformtokenX>(entity =>
        {
            entity.HasKey(e => e.Tokenid).HasName("PK_TOK_TOKEN");

            entity.ToTable("AUTH_CLAIMFORMTOKEN_X", tb =>
                {
                    tb.HasTrigger("auddel_AUTH_CLAIMFORMTOKEN_X");
                    tb.HasTrigger("audins_AUTH_CLAIMFORMTOKEN_X");
                    tb.HasTrigger("audupd_AUTH_CLAIMFORMTOKEN_X");
                });

            entity.Property(e => e.Tokenid).HasColumnName("TOKENID");
            entity.Property(e => e.Datetimegenerated)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMEGENERATED");
            entity.Property(e => e.Datetimeverified)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMEVERIFIED");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<AuthWebformguesttokenX>(entity =>
        {
            entity.HasKey(e => e.Tokenid).HasName("PK_WEBFORMGUESTTOKEN_X");

            entity.ToTable("AUTH_WEBFORMGUESTTOKEN_X", tb =>
                {
                    tb.HasTrigger("auddel_AUTH_WEBFORMGUESTTOKEN_");
                    tb.HasTrigger("audins_AUTH_WEBFORMGUESTTOKEN_");
                    tb.HasTrigger("audupd_AUTH_WEBFORMGUESTTOKEN_");
                });

            entity.Property(e => e.Tokenid).HasColumnName("TOKENID");
            entity.Property(e => e.Datetimegenerated)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMEGENERATED");
            entity.Property(e => e.Datetimeverified)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMEVERIFIED");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<BaseActiveuser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_ACTIVEUSER");

            entity.Property(e => e.Userid).HasColumnName("userid");
        });

        modelBuilder.Entity<BaseClaimcount>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLAIMCOUNT");

            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Currentcount).HasColumnName("currentcount");
            entity.Property(e => e.Totalcount).HasColumnName("totalcount");
        });

        modelBuilder.Entity<BaseClmAvailabletransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_AVAILABLETRANSACTIONS");

            entity.Property(e => e.Accountid).HasColumnName("ACCOUNTID");
            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Matchedamount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("matchedamount");
            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORY");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPE");
            entity.Property(e => e.Referencenumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REFERENCENUMBER");
            entity.Property(e => e.Totalamount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("TOTALAMOUNT");
            entity.Property(e => e.Transactionid).HasColumnName("TRANSACTIONID");
        });

        modelBuilder.Entity<BaseClmClaimsummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_CLAIMSUMMARY");

            entity.Property(e => e.Claimid)
                .ValueGeneratedOnAdd()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Weekspaid).HasColumnName("WEEKSPAID");
        });

        modelBuilder.Entity<BaseClmComppayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_COMPPAYMENTS");

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Compensationfromdate)
                .HasColumnType("datetime")
                .HasColumnName("COMPENSATIONFROMDATE");
            entity.Property(e => e.Compensationtodate)
                .HasColumnType("datetime")
                .HasColumnName("COMPENSATIONTODATE");
            entity.Property(e => e.Comppay)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("comppay");
            entity.Property(e => e.Dateauthorised)
                .HasColumnType("datetime")
                .HasColumnName("DATEAUTHORISED");
            entity.Property(e => e.Paymentno).HasColumnName("PAYMENTNO");
        });

        modelBuilder.Entity<BaseClmEditriggerSa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_EDITRIGGER_SA");

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Triggerdate)
                .HasColumnType("datetime")
                .HasColumnName("TRIGGERDATE");
        });

        modelBuilder.Entity<BaseClmEstimateadjustment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_ESTIMATEADJUSTMENTS");

            entity.Property(e => e.Changedbyuserid).HasColumnName("CHANGEDBYUSERID");
            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("datetimechanged");
            entity.Property(e => e.Estimatecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESTIMATECATEGORY");
            entity.Property(e => e.Estimateno).HasColumnName("estimateno");
            entity.Property(e => e.Incurredamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("incurredamount");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.Paiditemtotal)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PAIDITEMTOTAL");
            entity.Property(e => e.Paymentid).HasColumnName("paymentid");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("reason");
        });

        modelBuilder.Entity<BaseClmEstimatehistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_ESTIMATEHISTORY");

            entity.Property(e => e.Changedbyuserid).HasColumnName("changedbyuserid");
            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("datetimechanged");
            entity.Property(e => e.Estimatecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("estimatecategory");
            entity.Property(e => e.Estimateno).HasColumnName("estimateno");
            entity.Property(e => e.Incurredvariation)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("incurredvariation");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.Paymentid).HasColumnName("paymentid");
            entity.Property(e => e.Paymentvariation)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("paymentvariation");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("reason");
            entity.Property(e => e.Totalincurred)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("totalincurred");
            entity.Property(e => e.Totalpaid)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("totalpaid");
        });

        modelBuilder.Entity<BaseClmEstimatesummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_ESTIMATESUMMARY");

            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Estimatecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESTIMATECATEGORY");
            entity.Property(e => e.Estimatecategorydisplay)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESTIMATECATEGORYDISPLAY");
            entity.Property(e => e.Incurredamount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("incurredamount");
            entity.Property(e => e.Outstanding)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("outstanding");
            entity.Property(e => e.Paidamount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("paidamount");
            entity.Property(e => e.Pendingpaidamount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("pendingpaidamount");
        });

        modelBuilder.Entity<BaseClmLiabilitySa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_LIABILITY_SA");

            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Dateliabilitychanged)
                .HasColumnType("datetime")
                .HasColumnName("DATELIABILITYCHANGED");
            entity.Property(e => e.Liability)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITY");
            entity.Property(e => e.Liabilitycodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITYCODETYPE");
            entity.Property(e => e.Liabilitydate)
                .HasColumnType("datetime")
                .HasColumnName("LIABILITYDATE");
            entity.Property(e => e.Liabilitydisplayvalue)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITYDISPLAYVALUE");
        });

        modelBuilder.Entity<BaseClmLiabilityhistorySa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_LIABILITYHISTORY_SA");

            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Dateliabilitychanged)
                .HasColumnType("datetime")
                .HasColumnName("DATELIABILITYCHANGED");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Liability)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITY");
            entity.Property(e => e.Liabilitycodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITYCODETYPE");
            entity.Property(e => e.Liabilitydate)
                .HasColumnType("datetime")
                .HasColumnName("LIABILITYDATE");
            entity.Property(e => e.Liabilitydisplayvalue)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITYDISPLAYVALUE");
            entity.Property(e => e.Liabilityhistoryno).HasColumnName("LIABILITYHISTORYNO");
        });

        modelBuilder.Entity<BaseClmMatchedtransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_MATCHEDTRANSACTIONS");

            entity.Property(e => e.Accountid).HasColumnName("accountid");
            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Matchedamount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("matchedamount");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("paymentcategory");
            entity.Property(e => e.Paymentid).HasColumnName("paymentid");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("paymenttype");
            entity.Property(e => e.Transactionid).HasColumnName("transactionid");
        });

        modelBuilder.Entity<BaseClmPaymentitem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_PAYMENTITEMS");

            entity.Property(e => e.Accountid).HasColumnName("ACCOUNTID");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Estimatecategorycodevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESTIMATECATEGORYCODEVALUE");
            entity.Property(e => e.Itemamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("ITEMAMOUNT");
            entity.Property(e => e.Itemdescription)
                .IsUnicode(false)
                .HasColumnName("ITEMDESCRIPTION");
            entity.Property(e => e.Itemgst)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("ITEMGST");
            entity.Property(e => e.Itemno).HasColumnName("ITEMNO");
            entity.Property(e => e.Itemnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ITEMNUMBER");
            entity.Property(e => e.Itemstatuscodevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEMSTATUSCODEVALUE");
            entity.Property(e => e.Itemtotal)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("ITEMTOTAL");
            entity.Property(e => e.Paiditemamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PAIDITEMAMOUNT");
            entity.Property(e => e.Paiditemgst)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PAIDITEMGST");
            entity.Property(e => e.Paiditemtotal)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PAIDITEMTOTAL");
            entity.Property(e => e.Paidsurcharge)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PAIDSURCHARGE");
            entity.Property(e => e.Paymentcategorycodevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORYCODEVALUE");
            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Paymenttypecodevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPECODEVALUE");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Scheduledamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("SCHEDULEDAMOUNT");
            entity.Property(e => e.Servicedate)
                .HasColumnType("datetime")
                .HasColumnName("SERVICEDATE");
            entity.Property(e => e.Serviceproviderpartyid).HasColumnName("SERVICEPROVIDERPARTYID");
            entity.Property(e => e.Supplierreference)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SUPPLIERREFERENCE");
            entity.Property(e => e.Surcharge)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("SURCHARGE");
            entity.Property(e => e.Taxstatuscodevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TAXSTATUSCODEVALUE");
            entity.Property(e => e.Variationreason)
                .IsUnicode(false)
                .HasColumnName("VARIATIONREASON");
        });

        modelBuilder.Entity<BaseClmProvider>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_PROVIDERS");

            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Partyid).HasColumnName("partyid");
        });

        modelBuilder.Entity<BaseClmRecoveryadjustment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_RECOVERYADJUSTMENTS");

            entity.Property(e => e.Changedbyuserid).HasColumnName("CHANGEDBYUSERID");
            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("datetimechanged");
            entity.Property(e => e.Estimatedrecoveryamount)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("ESTIMATEDRECOVERYAMOUNT");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("reason");
            entity.Property(e => e.Recoveredamount)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("RECOVEREDAMOUNT");
            entity.Property(e => e.Recoveryestimatecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECOVERYESTIMATECATEGORY");
            entity.Property(e => e.Recoveryestimateno).HasColumnName("RECOVERYESTIMATENO");
            entity.Property(e => e.Recoveryid).HasColumnName("recoveryid");
        });

        modelBuilder.Entity<BaseClmRecoveryhistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_RECOVERYHISTORY");

            entity.Property(e => e.Changedbyuserid).HasColumnName("changedbyuserid");
            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("datetimechanged");
            entity.Property(e => e.Estimatedrecoveryvariation)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("estimatedrecoveryvariation");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("reason");
            entity.Property(e => e.Recoveryestimatecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("recoveryestimatecategory");
            entity.Property(e => e.Recoveryestimateno).HasColumnName("recoveryestimateno");
            entity.Property(e => e.Recoveryid).HasColumnName("recoveryid");
            entity.Property(e => e.Recoveryvariation)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("recoveryvariation");
            entity.Property(e => e.Totalestimatedrecovery)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("totalestimatedrecovery");
            entity.Property(e => e.Totalrecovered)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("totalrecovered");
        });

        modelBuilder.Entity<BaseClmRecoverysummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_RECOVERYSUMMARY");

            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Outstandingrecoveries)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("outstandingrecoveries");
            entity.Property(e => e.Pendingrecoveries)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("pendingrecoveries");
            entity.Property(e => e.Recoveryestimatecatdisplay)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECOVERYESTIMATECATDISPLAY");
            entity.Property(e => e.Recoveryestimatecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECOVERYESTIMATECATEGORY");
            entity.Property(e => e.Totalrecovered)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("totalrecovered");
            entity.Property(e => e.Totalrecoveryestimate)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("totalrecoveryestimate");
        });

        modelBuilder.Entity<BaseClmRtwstatushistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_RTWSTATUSHISTORY");

            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("FROMDATE");
            entity.Property(e => e.Rtwstatusno).HasColumnName("rtwstatusno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODATE");
        });

        modelBuilder.Entity<BaseClmStatushistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_CLM_STATUSHISTORY");

            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("FROMDATE");
            entity.Property(e => e.Statusno).HasColumnName("statusno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODATE");
        });

        modelBuilder.Entity<BaseMedDate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_MED_DATE");

            entity.Property(e => e.Datefrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEFROM");
            entity.Property(e => e.Dateto)
                .HasColumnType("datetime")
                .HasColumnName("DATETO");
            entity.Property(e => e.Medcertid).HasColumnName("MEDCERTID");
        });

        modelBuilder.Entity<BaseMedDateSa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_MED_DATE_SA");

            entity.Property(e => e.Datefrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEFROM");
            entity.Property(e => e.Dateto)
                .HasColumnType("datetime")
                .HasColumnName("DATETO");
            entity.Property(e => e.Medcertid).HasColumnName("MEDCERTID");
        });

        modelBuilder.Entity<BaseOpenclaim>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_OPENCLAIM");

            entity.Property(e => e.Claimclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMCLASSIFICATION");
            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Claimnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CLAIMNUMBER");
            entity.Property(e => e.Claimtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMTYPE");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datestatuschanged)
                .HasColumnType("datetime")
                .HasColumnName("DATESTATUSCHANGED");
            entity.Property(e => e.Jurisdictionzone).HasColumnName("JURISDICTIONZONE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUSCODETYPE");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
        });

        modelBuilder.Entity<BaseParNumber>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_PAR_NUMBER");

            entity.Property(e => e.Number)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("number");
            entity.Property(e => e.Numbertype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("numbertype");
            entity.Property(e => e.Numbertypecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("numbertypecodetype");
            entity.Property(e => e.Partyid).HasColumnName("partyid");
        });

        modelBuilder.Entity<BaseTskClaimtask>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_TSK_CLAIMTASK");

            entity.Property(e => e.Clusterid).HasColumnName("clusterid");
            entity.Property(e => e.Clustertype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("clustertype");
            entity.Property(e => e.Compositeid).HasMaxLength(56);
            entity.Property(e => e.Datecompleted)
                .HasColumnType("datetime")
                .HasColumnName("datecompleted");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("duedate");
            entity.Property(e => e.Extrainfo)
                .HasMaxLength(81)
                .IsUnicode(false)
                .HasColumnName("extrainfo");
            entity.Property(e => e.Iconname)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("iconname");
            entity.Property(e => e.Recordguid).HasColumnName("recordguid");
            entity.Property(e => e.Recordid).HasColumnName("recordid");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Taskdescription)
                .HasMaxLength(323)
                .IsUnicode(false)
                .HasColumnName("taskdescription");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tasktype");
            entity.Property(e => e.Userid).HasColumnName("userid");
        });

        modelBuilder.Entity<BaseTskFilenote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_TSK_FILENOTE");

            entity.Property(e => e.Clusterid).HasColumnName("clusterid");
            entity.Property(e => e.Clustertype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("clustertype");
            entity.Property(e => e.Compositeid).HasMaxLength(168);
            entity.Property(e => e.Datecompleted)
                .HasColumnType("datetime")
                .HasColumnName("datecompleted");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("duedate");
            entity.Property(e => e.Extrainfo)
                .HasMaxLength(81)
                .IsUnicode(false)
                .HasColumnName("extrainfo");
            entity.Property(e => e.Iconname)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("iconname");
            entity.Property(e => e.Recordguid).HasColumnName("recordguid");
            entity.Property(e => e.Recordid).HasColumnName("recordid");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Taskdescription)
                .HasMaxLength(323)
                .IsUnicode(false)
                .HasColumnName("taskdescription");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tasktype");
            entity.Property(e => e.Userid).HasColumnName("userid");
        });

        modelBuilder.Entity<BaseTskLegaldispute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_TSK_LEGALDISPUTE");

            entity.Property(e => e.Clusterid).HasColumnName("clusterid");
            entity.Property(e => e.Clustertype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("clustertype");
            entity.Property(e => e.Compositeid).HasMaxLength(112);
            entity.Property(e => e.Datecompleted)
                .HasColumnType("datetime")
                .HasColumnName("datecompleted");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("duedate");
            entity.Property(e => e.Extrainfo).HasColumnName("extrainfo");
            entity.Property(e => e.Iconname)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("iconname");
            entity.Property(e => e.Recordguid).HasColumnName("recordguid");
            entity.Property(e => e.Recordid).HasColumnName("recordid");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Taskdescription)
                .IsUnicode(false)
                .HasColumnName("taskdescription");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tasktype");
            entity.Property(e => e.Userid).HasColumnName("userid");
        });

        modelBuilder.Entity<BaseTskWorkflowalert>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_TSK_WORKFLOWALERT");

            entity.Property(e => e.Clusterid).HasColumnName("CLUSTERID");
            entity.Property(e => e.Clustertype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLUSTERTYPE");
            entity.Property(e => e.Compositeid)
                .HasMaxLength(216)
                .HasColumnName("compositeid");
            entity.Property(e => e.Datecompleted)
                .HasColumnType("datetime")
                .HasColumnName("datecompleted");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("duedate");
            entity.Property(e => e.Extrainfo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("extrainfo");
            entity.Property(e => e.Iconname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("iconname");
            entity.Property(e => e.Recordguid).HasColumnName("recordguid");
            entity.Property(e => e.Recordid).HasColumnName("recordid");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.TaskType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Taskdescription)
                .IsUnicode(false)
                .HasColumnName("taskdescription");
            entity.Property(e => e.Userid).HasColumnName("userid");
        });

        modelBuilder.Entity<BaseTskWorkflowtimeframe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_TSK_WORKFLOWTIMEFRAME");

            entity.Property(e => e.Clusterid).HasColumnName("clusterid");
            entity.Property(e => e.Clustertype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clustertype");
            entity.Property(e => e.Completable).HasColumnName("completable");
            entity.Property(e => e.Compositeid)
                .HasMaxLength(176)
                .HasColumnName("compositeid");
            entity.Property(e => e.Datecompleted)
                .HasColumnType("datetime")
                .HasColumnName("datecompleted");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("duedate");
            entity.Property(e => e.Extrainfo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("extrainfo");
            entity.Property(e => e.Iconname)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("iconname");
            entity.Property(e => e.Recordguid).HasColumnName("recordguid");
            entity.Property(e => e.Recordid).HasColumnName("recordid");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Taskdescription)
                .HasMaxLength(303)
                .IsUnicode(false)
                .HasColumnName("taskdescription");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tasktype");
            entity.Property(e => e.Timeframeno).HasColumnName("timeframeno");
            entity.Property(e => e.Userid).HasColumnName("userid");
            entity.Property(e => e.Workflowid).HasColumnName("workflowid");
        });

        modelBuilder.Entity<BsbBranch>(entity =>
        {
            entity.HasKey(e => e.Bsbid).HasName("PK_BSB_BRANCH_BSBID");

            entity.ToTable("BSB_BRANCH", tb =>
                {
                    tb.HasTrigger("auddel_BSB_BRANCH");
                    tb.HasTrigger("audins_BSB_BRANCH");
                    tb.HasTrigger("audupd_BSB_BRANCH");
                });

            entity.Property(e => e.Bsbid).HasColumnName("BSBID");
            entity.Property(e => e.Address)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ADDRESS");
            entity.Property(e => e.Bank)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BANK");
            entity.Property(e => e.Banktype)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BANKTYPE");
            entity.Property(e => e.Branch)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("BRANCH");
            entity.Property(e => e.Bsb1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BSB1");
            entity.Property(e => e.Bsb2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BSB2");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Postcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<ClmAuthorisedperson>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_AUTHORISEDPERSON", tb =>
                {
                    tb.HasTrigger("auddel_CLM_AUTHORISEDPERSON");
                    tb.HasTrigger("audins_CLM_AUTHORISEDPERSON");
                    tb.HasTrigger("audupd_CLM_AUTHORISEDPERSON");
                });

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Addressline1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE1");
            entity.Property(e => e.Addressline2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE2");
            entity.Property(e => e.Addressline3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE3");
            entity.Property(e => e.Comments)
                .IsUnicode(false)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Country)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Familyname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("FAMILYNAME");
            entity.Property(e => e.Givenname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("GIVENNAME");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.International).HasColumnName("INTERNATIONAL");
            entity.Property(e => e.Mobilephone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("MOBILEPHONE");
            entity.Property(e => e.Phone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.Postcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Role)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmAuthorisedperson)
                .HasForeignKey<ClmAuthorisedperson>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_AUTHORISEDPERSON_CLAIMID");
        });

        modelBuilder.Entity<ClmAuthorisedpersondocument>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Documentno });

            entity.ToTable("CLM_AUTHORISEDPERSONDOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_CLM_AUTHORISEDPERSONDOC");
                    tb.HasTrigger("audins_CLM_AUTHORISEDPERSONDOC");
                    tb.HasTrigger("audupd_CLM_AUTHORISEDPERSONDOC");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Documentno).HasColumnName("DOCUMENTNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmAuthorisedpersondocuments)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_AUTHORISEDPERSONDOCUMENT_CLAIMID");

            entity.HasOne(d => d.Document).WithMany(p => p.ClmAuthorisedpersondocuments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_CLM_AUTHORISEDPERSONDOCUMENT_DOCUMENTID");
        });

        modelBuilder.Entity<ClmCasemanagementplan>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Casemanagementplanno }).HasName("PK_CLM_CLAIMREVIEW");

            entity.ToTable("CLM_CASEMANAGEMENTPLAN", tb =>
                {
                    tb.HasTrigger("WF_CLM_CASEMANAGEMENTPLAN");
                    tb.HasTrigger("auddel_CLM_CASEMANAGEMENTPLAN");
                    tb.HasTrigger("audins_CLM_CASEMANAGEMENTPLAN");
                    tb.HasTrigger("audupd_CLM_CASEMANAGEMENTPLAN");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Casemanagementplanno).HasColumnName("CASEMANAGEMENTPLANNO");
            entity.Property(e => e.Actions)
                .IsUnicode(false)
                .HasColumnName("ACTIONS");
            entity.Property(e => e.Capacity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAPACITY");
            entity.Property(e => e.Capacitydatefrom)
                .HasColumnType("datetime")
                .HasColumnName("CAPACITYDATEFROM");
            entity.Property(e => e.Capacitydateto)
                .HasColumnType("datetime")
                .HasColumnName("CAPACITYDATETO");
            entity.Property(e => e.Claimclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMCLASSIFICATION");
            entity.Property(e => e.Confidential).HasColumnName("CONFIDENTIAL");
            entity.Property(e => e.Currentstatusstrategy)
                .IsUnicode(false)
                .HasColumnName("CURRENTSTATUSSTRATEGY");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Dayslost).HasColumnName("DAYSLOST");
            entity.Property(e => e.Enteredbyuserid).HasColumnName("ENTEREDBYUSERID");
            entity.Property(e => e.Grossincured)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("GROSSINCURED");
            entity.Property(e => e.Grossoutstanding)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("GROSSOUTSTANDING");
            entity.Property(e => e.Grosspaid)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("GROSSPAID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hourslost).HasColumnName("HOURSLOST");
            entity.Property(e => e.Lastweekofpayment).HasColumnName("LASTWEEKOFPAYMENT");
            entity.Property(e => e.Mechanism2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MECHANISM2");
            entity.Property(e => e.Mechanism2codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MECHANISM2CODETYPE");
            entity.Property(e => e.Netincured)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("NETINCURED");
            entity.Property(e => e.Netoutstanding)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("NETOUTSTANDING");
            entity.Property(e => e.Netpaid)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("NETPAID");
            entity.Property(e => e.Nextreviewdate)
                .HasColumnType("datetime")
                .HasColumnName("NEXTREVIEWDATE");
            entity.Property(e => e.Outstandingrecoveries)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("OUTSTANDINGRECOVERIES");
            entity.Property(e => e.Plandocumentid).HasColumnName("PLANDOCUMENTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Recovered)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("RECOVERED");
            entity.Property(e => e.Reviewdate)
                .HasColumnType("datetime")
                .HasColumnName("REVIEWDATE");
            entity.Property(e => e.Reviewedbyuserid).HasColumnName("REVIEWEDBYUSERID");
            entity.Property(e => e.Reviewtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REVIEWTYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Totalrecoveries)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("TOTALRECOVERIES");
            entity.Property(e => e.Weekssinceinjury).HasColumnName("WEEKSSINCEINJURY");
            entity.Property(e => e.Workerdateofbirth)
                .HasColumnType("datetime")
                .HasColumnName("WORKERDATEOFBIRTH");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmCasemanagementplans)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_CLAIMREVIEW_CLAIMID");

            entity.HasOne(d => d.Reviewedbyuser).WithMany(p => p.ClmCasemanagementplans)
                .HasForeignKey(d => d.Reviewedbyuserid)
                .HasConstraintName("FK_CLM_CLAIMREVIEW_REVIEWEDBYUSERID");
        });

        modelBuilder.Entity<ClmCasemanagementplanbarrier>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Casemanagementplanno, e.Barrierno });

            entity.ToTable("CLM_CASEMANAGEMENTPLANBARRIER", tb =>
                {
                    tb.HasTrigger("auddel_CLM_CASEMANAGEMENTPLANB");
                    tb.HasTrigger("audins_CLM_CASEMANAGEMENTPLANB");
                    tb.HasTrigger("audupd_CLM_CASEMANAGEMENTPLANB");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Casemanagementplanno).HasColumnName("CASEMANAGEMENTPLANNO");
            entity.Property(e => e.Barrierno).HasColumnName("BARRIERNO");
            entity.Property(e => e.Barrier)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BARRIER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.ClmCasemanagementplan).WithMany(p => p.ClmCasemanagementplanbarriers)
                .HasForeignKey(d => new { d.Claimid, d.Casemanagementplanno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_CASEMANAGEMENTPLANBARRIER_CASEMANAGEMENTPLANNO");
        });

        modelBuilder.Entity<ClmCasemanagementplandoc>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Casemanagementplanno, e.Documentno });

            entity.ToTable("CLM_CASEMANAGEMENTPLANDOCS", tb =>
                {
                    tb.HasTrigger("auddel_CLM_CASEMANAGEMENTPLAND");
                    tb.HasTrigger("audins_CLM_CASEMANAGEMENTPLAND");
                    tb.HasTrigger("audupd_CLM_CASEMANAGEMENTPLAND");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Casemanagementplanno).HasColumnName("CASEMANAGEMENTPLANNO");
            entity.Property(e => e.Documentno).HasColumnName("DOCUMENTNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.ClmCasemanagementplandocs)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_CLM_CASEMANAGEMENTPLANDOCS_DOCUMENTID");

            entity.HasOne(d => d.ClmCasemanagementplan).WithMany(p => p.ClmCasemanagementplandocs)
                .HasForeignKey(d => new { d.Claimid, d.Casemanagementplanno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_CASEMANAGEMENTPLANDOCS_CASEMANAGEMENTPLANNO");
        });

        modelBuilder.Entity<ClmClaim>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CLM_CLAIM");

            entity.Property(e => e.Claimclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMCLASSIFICATION");
            entity.Property(e => e.Claimid)
                .ValueGeneratedOnAdd()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Claimisconfidential).HasColumnName("CLAIMISCONFIDENTIAL");
            entity.Property(e => e.Claimnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CLAIMNUMBER");
            entity.Property(e => e.Claimtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMTYPE");
            entity.Property(e => e.Convertedby).HasColumnName("CONVERTEDBY");
            entity.Property(e => e.Convertedfromclaimid).HasColumnName("CONVERTEDFROMCLAIMID");
            entity.Property(e => e.Dateclaimconverted)
                .HasColumnType("datetime")
                .HasColumnName("DATECLAIMCONVERTED");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Dateinsurernotifiedofclaim)
                .HasColumnType("datetime")
                .HasColumnName("DATEINSURERNOTIFIEDOFCLAIM");
            entity.Property(e => e.Dateinsurernotifiedofinjury)
                .HasColumnType("datetime")
                .HasColumnName("DATEINSURERNOTIFIEDOFINJURY");
            entity.Property(e => e.Datereceivedemployer)
                .HasColumnType("datetime")
                .HasColumnName("DATERECEIVEDEMPLOYER");
            entity.Property(e => e.Datereceivedinsurer)
                .HasColumnType("datetime")
                .HasColumnName("DATERECEIVEDINSURER");
            entity.Property(e => e.Datesignedemployee)
                .HasColumnType("datetime")
                .HasColumnName("DATESIGNEDEMPLOYEE");
            entity.Property(e => e.Datesignedemployer)
                .HasColumnType("datetime")
                .HasColumnName("DATESIGNEDEMPLOYER");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Jurisdictionzone).HasColumnName("JURISDICTIONZONE");
            entity.Property(e => e.Potentialcommonlaw).HasColumnName("POTENTIALCOMMONLAW");
            entity.Property(e => e.Potentialrecovery).HasColumnName("POTENTIALRECOVERY");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<ClmClaim1>(entity =>
        {
            entity.HasKey(e => e.Claimid).HasName("PK_CLM_CLAIM_CLAIMID");

            entity.ToTable("CLM_CLAIM", "secure", tb =>
                {
                    tb.HasTrigger("WF_CLM_CLAIM");
                    tb.HasTrigger("auddel_CLM_CLAIM");
                    tb.HasTrigger("audins_CLM_CLAIM");
                    tb.HasTrigger("audupd_CLM_CLAIM");
                });

            entity.HasIndex(e => e.Claimclassification, "IDX_CLM_CLAIM_CLASSIFICATION");

            entity.HasIndex(e => e.Dateentered, "IDX_CLM_CLAIM_DATEENTERED");

            entity.HasIndex(e => e.Datereceivedemployer, "IDX_CLM_CLAIM_DATERECEMP");

            entity.HasIndex(e => e.Datereceivedinsurer, "IDX_CLM_CLAIM_DATERECINS");

            entity.HasIndex(e => e.Jurisdictionzone, "IDX_CLM_CLAIM_JURISDICTION");

            entity.HasIndex(e => e.State, "IDX_CLM_CLAIM_STATE");

            entity.HasIndex(e => e.Claimtype, "IDX_CLM_CLAIM_TYPE");

            entity.HasIndex(e => e.Claimnumber, "UNQ_CLM_CLAIM_CLAIMNUMBER").IsUnique();

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Claimclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMCLASSIFICATION");
            entity.Property(e => e.Claimisconfidential).HasColumnName("CLAIMISCONFIDENTIAL");
            entity.Property(e => e.Claimnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CLAIMNUMBER");
            entity.Property(e => e.Claimtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMTYPE");
            entity.Property(e => e.Convertedby).HasColumnName("CONVERTEDBY");
            entity.Property(e => e.Convertedfromclaimid).HasColumnName("CONVERTEDFROMCLAIMID");
            entity.Property(e => e.Dateclaimconverted)
                .HasColumnType("datetime")
                .HasColumnName("DATECLAIMCONVERTED");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Dateinsurernotifiedofclaim)
                .HasColumnType("datetime")
                .HasColumnName("DATEINSURERNOTIFIEDOFCLAIM");
            entity.Property(e => e.Dateinsurernotifiedofinjury)
                .HasColumnType("datetime")
                .HasColumnName("DATEINSURERNOTIFIEDOFINJURY");
            entity.Property(e => e.Datereceivedemployer)
                .HasColumnType("datetime")
                .HasColumnName("DATERECEIVEDEMPLOYER");
            entity.Property(e => e.Datereceivedinsurer)
                .HasColumnType("datetime")
                .HasColumnName("DATERECEIVEDINSURER");
            entity.Property(e => e.Datesignedemployee)
                .HasColumnType("datetime")
                .HasColumnName("DATESIGNEDEMPLOYEE");
            entity.Property(e => e.Datesignedemployer)
                .HasColumnType("datetime")
                .HasColumnName("DATESIGNEDEMPLOYER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Jurisdictionzone).HasColumnName("JURISDICTIONZONE");
            entity.Property(e => e.Potentialcommonlaw).HasColumnName("POTENTIALCOMMONLAW");
            entity.Property(e => e.Potentialrecovery).HasColumnName("POTENTIALRECOVERY");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.ConvertedbyNavigation).WithMany(p => p.ClmClaim1s)
                .HasForeignKey(d => d.Convertedby)
                .HasConstraintName("FK_CLM_CLAIM_CONVERTEDBY");

            entity.HasOne(d => d.Convertedfromclaim).WithMany(p => p.InverseConvertedfromclaim)
                .HasForeignKey(d => d.Convertedfromclaimid)
                .HasConstraintName("FK_CLM_CLAIM_CONVERTEDFROMCLAIMID");
        });

        modelBuilder.Entity<ClmClaimSa>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_CLAIM_SA", tb =>
                {
                    tb.HasTrigger("auddel_CLM_CLAIM_SA");
                    tb.HasTrigger("audins_CLM_CLAIM_SA");
                    tb.HasTrigger("audupd_CLM_CLAIM_SA");
                });

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reportableid).HasColumnName("REPORTABLEID");
            entity.Property(e => e.Tail).HasColumnName("TAIL");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Workcoverclaimnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WORKCOVERCLAIMNUMBER");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmClaimSa)
                .HasForeignKey<ClmClaimSa>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_CLAIM_SA_CLAIMID");

            entity.HasOne(d => d.Reportable).WithMany(p => p.ClmClaimSas)
                .HasForeignKey(d => d.Reportableid)
                .HasConstraintName("FK_CLM_CLAIM_SA_REPORTABLEID");
        });

        modelBuilder.Entity<ClmClaimX>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_CLAIM_X", tb =>
                {
                    tb.HasTrigger("auddel_CLM_CLAIM_X");
                    tb.HasTrigger("audins_CLM_CLAIM_X");
                    tb.HasTrigger("audupd_CLM_CLAIM_X");
                });

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Claimiscoded).HasColumnName("CLAIMISCODED");
            entity.Property(e => e.Claimsequencenumber).HasColumnName("CLAIMSEQUENCENUMBER");
            entity.Property(e => e.Daterehabreceived)
                .HasColumnType("datetime")
                .HasColumnName("DATEREHABRECEIVED");
            entity.Property(e => e.Daterehabreferred)
                .HasColumnType("datetime")
                .HasColumnName("DATEREHABREFERRED");
            entity.Property(e => e.Firstcontactdate)
                .HasColumnType("datetime")
                .HasColumnName("FIRSTCONTACTDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Placementdetails)
                .IsUnicode(false)
                .HasColumnName("PLACEMENTDETAILS");
            entity.Property(e => e.Placementrequired).HasColumnName("PLACEMENTREQUIRED");
            entity.Property(e => e.Provisionalliability).HasColumnName("PROVISIONALLIABILITY");
            entity.Property(e => e.Receiptmethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECEIPTMETHOD");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Rtwdate103week)
                .HasColumnType("datetime")
                .HasColumnName("RTWDATE103WEEK");
            entity.Property(e => e.Rtwdate13week)
                .HasColumnType("datetime")
                .HasColumnName("RTWDATE13WEEK");
            entity.Property(e => e.Rtwdate26week)
                .HasColumnType("datetime")
                .HasColumnName("RTWDATE26WEEK");
            entity.Property(e => e.Rtwdate4week)
                .HasColumnType("datetime")
                .HasColumnName("RTWDATE4WEEK");
            entity.Property(e => e.Rtwdate52week)
                .HasColumnType("datetime")
                .HasColumnName("RTWDATE52WEEK");
            entity.Property(e => e.Rtwdate78week)
                .HasColumnType("datetime")
                .HasColumnName("RTWDATE78WEEK");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmClaimX)
                .HasForeignKey<ClmClaimX>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_CLAIM_X_CLM_CLAIM");
        });

        modelBuilder.Entity<ClmClaimtask>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Taskno });

            entity.ToTable("CLM_CLAIMTASK", tb =>
                {
                    tb.HasTrigger("auddel_CLM_CLAIMTASK");
                    tb.HasTrigger("audins_CLM_CLAIMTASK");
                    tb.HasTrigger("audupd_CLM_CLAIMTASK");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Taskno).HasColumnName("TASKNO");
            entity.Property(e => e.Datecompleted)
                .HasColumnType("datetime")
                .HasColumnName("DATECOMPLETED");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("DUEDATE");
            entity.Property(e => e.Enteredbyuserid).HasColumnName("ENTEREDBYUSERID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("NOTE");
            entity.Property(e => e.Personresp).HasColumnName("PERSONRESP");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reminderdate)
                .HasColumnType("datetime")
                .HasColumnName("REMINDERDATE");
            entity.Property(e => e.Task)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("TASK");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmClaimtasks)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_CLAIMTASK_CLAIMID");

            entity.HasOne(d => d.Enteredbyuser).WithMany(p => p.ClmClaimtasks)
                .HasForeignKey(d => d.Enteredbyuserid)
                .HasConstraintName("FK_CLM_CLAIMTASK_ENTEREDBYUSERID");
        });

        modelBuilder.Entity<ClmClaimtaskdocument>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Taskno, e.Documentno });

            entity.ToTable("CLM_CLAIMTASKDOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_CLM_CLAIMTASKDOCUMENT");
                    tb.HasTrigger("audins_CLM_CLAIMTASKDOCUMENT");
                    tb.HasTrigger("audupd_CLM_CLAIMTASKDOCUMENT");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Taskno).HasColumnName("TASKNO");
            entity.Property(e => e.Documentno).HasColumnName("DOCUMENTNO");
            entity.Property(e => e.Documentdate)
                .HasColumnType("datetime")
                .HasColumnName("DOCUMENTDATE");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Document).WithMany(p => p.ClmClaimtaskdocuments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_CLM_CLAIMTASKDOCUMENT_DOCUMENTID");

            entity.HasOne(d => d.ClmClaimtask).WithMany(p => p.ClmClaimtaskdocuments)
                .HasForeignKey(d => new { d.Claimid, d.Taskno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_CLAIMTASKDOCUMENT_TASKNO");
        });

        modelBuilder.Entity<ClmClassificationhistory>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Classificationhistoryno });

            entity.ToTable("CLM_CLASSIFICATIONHISTORY", tb =>
                {
                    tb.HasTrigger("WF_CLM_CLASSIFICATIONHISTORY");
                    tb.HasTrigger("auddel_CLM_CLASSIFICATIONHISTO");
                    tb.HasTrigger("audins_CLM_CLASSIFICATIONHISTO");
                    tb.HasTrigger("audupd_CLM_CLASSIFICATIONHISTO");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Classificationhistoryno).HasColumnName("CLASSIFICATIONHISTORYNO");
            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Classification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Datechanged)
                .HasColumnType("datetime")
                .HasColumnName("DATECHANGED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.ChangedbyNavigation).WithMany(p => p.ClmClassificationhistories)
                .HasForeignKey(d => d.Changedby)
                .HasConstraintName("FK_CLM_CLASSIFICATIONHISTORY_CHANGEDBY");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmClassificationhistories)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_CLASSIFICATIONHISTORY_CLAIMID");
        });

        modelBuilder.Entity<ClmCompensationrecipient>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Compensationrecipientno });

            entity.ToTable("CLM_COMPENSATIONRECIPIENT", tb =>
                {
                    tb.HasTrigger("auddel_CLM_COMPENSATIONRECIPIE");
                    tb.HasTrigger("audins_CLM_COMPENSATIONRECIPIE");
                    tb.HasTrigger("audupd_CLM_COMPENSATIONRECIPIE");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Compensationrecipientno).HasColumnName("COMPENSATIONRECIPIENTNO");
            entity.Property(e => e.Amountperpayment)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("AMOUNTPERPAYMENT");
            entity.Property(e => e.Contactno).HasColumnName("CONTACTNO");
            entity.Property(e => e.Datefrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEFROM");
            entity.Property(e => e.Dateto)
                .HasColumnType("datetime")
                .HasColumnName("DATETO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Locationno).HasColumnName("LOCATIONNO");
            entity.Property(e => e.Maxamountperclaim)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("MAXAMOUNTPERCLAIM");
            entity.Property(e => e.Maxamountperpayment)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("MAXAMOUNTPERPAYMENT");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Percentageperpayment)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("PERCENTAGEPERPAYMENT");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Recipientreference)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("RECIPIENTREFERENCE");
            entity.Property(e => e.Recipienttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECIPIENTTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Withholdworkerpayg).HasColumnName("WITHHOLDWORKERPAYG");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmCompensationrecipients)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_COMPENSATIONRECIPIENT_CLAIMID");

            entity.HasOne(d => d.Party).WithMany(p => p.ClmCompensationrecipients)
                .HasForeignKey(d => d.Partyid)
                .HasConstraintName("FK_CLM_COMPENSATIONRECIPIENT_PARTYID");

            entity.HasOne(d => d.ParLocation).WithMany(p => p.ClmCompensationrecipients)
                .HasForeignKey(d => new { d.Partyid, d.Locationno })
                .HasConstraintName("FK_CLM_COMPENSATIONRECIPIENT_LOCATIONNO");

            entity.HasOne(d => d.ParContact).WithMany(p => p.ClmCompensationrecipients)
                .HasForeignKey(d => new { d.Partyid, d.Locationno, d.Contactno })
                .HasConstraintName("FK_CLM_COMPENSATIONRECIPIENT_CONTACTNO");
        });

        modelBuilder.Entity<ClmCorrespondencein>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Correspondenceinno });

            entity.ToTable("CLM_CORRESPONDENCEIN", tb =>
                {
                    tb.HasTrigger("WF_CLM_CORRESPONDENCEIN");
                    tb.HasTrigger("auddel_CLM_CORRESPONDENCEIN");
                    tb.HasTrigger("audins_CLM_CORRESPONDENCEIN");
                    tb.HasTrigger("audupd_CLM_CORRESPONDENCEIN");
                });

            entity.HasIndex(e => new { e.Guid, e.Correspondenceinid }, "IX_CLM_CORRESPONDENCEIN_WF");

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Correspondenceinno).HasColumnName("CORRESPONDENCEINNO");
            entity.Property(e => e.Correspondenceinid).HasColumnName("CORRESPONDENCEINID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmCorrespondenceins)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_CORRESPONDENCEIN_CLAIMID");

            entity.HasOne(d => d.Correspondencein).WithMany(p => p.ClmCorrespondenceins)
                .HasForeignKey(d => d.Correspondenceinid)
                .HasConstraintName("FK_CLM_CORRESPONDENCEIN_CORRESPONDENCEINID");
        });

        modelBuilder.Entity<ClmCorrespondenceout>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Correspondenceoutno });

            entity.ToTable("CLM_CORRESPONDENCEOUT", tb =>
                {
                    tb.HasTrigger("WF_CLM_CORRESPONDENCEOUT");
                    tb.HasTrigger("auddel_CLM_CORRESPONDENCEOUT");
                    tb.HasTrigger("audins_CLM_CORRESPONDENCEOUT");
                    tb.HasTrigger("audupd_CLM_CORRESPONDENCEOUT");
                });

            entity.HasIndex(e => new { e.Guid, e.Correspondenceoutid }, "IX_CLM_CORRESPONDENCEOUT_WF");

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Correspondenceoutno).HasColumnName("CORRESPONDENCEOUTNO");
            entity.Property(e => e.Correspondenceoutid).HasColumnName("CORRESPONDENCEOUTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmCorrespondenceouts)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_CORRESPONDENCEOUT_CLAIMID");

            entity.HasOne(d => d.Correspondenceout).WithMany(p => p.ClmCorrespondenceouts)
                .HasForeignKey(d => d.Correspondenceoutid)
                .HasConstraintName("FK_CLM_CORRESPONDENCEOUT_CORRESPONDENCEOUTID");
        });

        modelBuilder.Entity<ClmCovidisolation>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Covidisolationno });

            entity.ToTable("CLM_COVIDISOLATION", tb =>
                {
                    tb.HasTrigger("auddel_CLM_COVIDISOLATION");
                    tb.HasTrigger("audins_CLM_COVIDISOLATION");
                    tb.HasTrigger("audupd_CLM_COVIDISOLATION");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Covidisolationno).HasColumnName("COVIDISOLATIONNO");
            entity.Property(e => e.Comfirmationresult)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMFIRMATIONRESULT");
            entity.Property(e => e.Dateisolatedfrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEISOLATEDFROM");
            entity.Property(e => e.Dateisolatedto)
                .HasColumnType("datetime")
                .HasColumnName("DATEISOLATEDTO");
            entity.Property(e => e.Dateofexposure)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFEXPOSURE");
            entity.Property(e => e.Dateoftestconfirmation)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFTESTCONFIRMATION");
            entity.Property(e => e.Datetestcompleted)
                .HasColumnType("datetime")
                .HasColumnName("DATETESTCOMPLETED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hospitalised).HasColumnName("HOSPITALISED");
            entity.Property(e => e.Isolationtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ISOLATIONTYPE");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Testedforcovid).HasColumnName("TESTEDFORCOVID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Typeofexposure)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TYPEOFEXPOSURE");
            entity.Property(e => e.Typeofinjury)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TYPEOFINJURY");
            entity.Property(e => e.Workingfromhome).HasColumnName("WORKINGFROMHOME");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmCovidisolations)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_COVIDISOLATION_CLAIMID");
        });

        modelBuilder.Entity<ClmCovidsymptom>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Covidisolationno, e.Covidsymptomno });

            entity.ToTable("CLM_COVIDSYMPTOM", tb =>
                {
                    tb.HasTrigger("auddel_CLM_COVIDSYMPTOM");
                    tb.HasTrigger("audins_CLM_COVIDSYMPTOM");
                    tb.HasTrigger("audupd_CLM_COVIDSYMPTOM");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Covidisolationno).HasColumnName("COVIDISOLATIONNO");
            entity.Property(e => e.Covidsymptomno).HasColumnName("COVIDSYMPTOMNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Symptom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SYMPTOM");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.ClmCovidisolation).WithMany(p => p.ClmCovidsymptoms)
                .HasForeignKey(d => new { d.Claimid, d.Covidisolationno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_COVIDSYMPTOM_COVIDISOLATIONNO");
        });

        modelBuilder.Entity<ClmDependant>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Dependantno });

            entity.ToTable("CLM_DEPENDANT", tb =>
                {
                    tb.HasTrigger("auddel_CLM_DEPENDANT");
                    tb.HasTrigger("audins_CLM_DEPENDANT");
                    tb.HasTrigger("audupd_CLM_DEPENDANT");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Dependantno).HasColumnName("DEPENDANTNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Joinedby)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("JOINEDBY");
            entity.Property(e => e.Partialdependant).HasColumnName("PARTIALDEPENDANT");
            entity.Property(e => e.Partycontactno).HasColumnName("PARTYCONTACTNO");
            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Partylocationno).HasColumnName("PARTYLOCATIONNO");
            entity.Property(e => e.Reasonjoined)
                .IsUnicode(false)
                .HasColumnName("REASONJOINED");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Relationship)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATIONSHIP");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Undertakingfulltimeeducation).HasColumnName("UNDERTAKINGFULLTIMEEDUCATION");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmDependants)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_DEPENDANT_CLAIMID");

            entity.HasOne(d => d.Party).WithMany(p => p.ClmDependants)
                .HasForeignKey(d => d.Partyid)
                .HasConstraintName("FK_CLM_DEPENDANT_PARTYID");

            entity.HasOne(d => d.ParLocation).WithMany(p => p.ClmDependants)
                .HasForeignKey(d => new { d.Partyid, d.Partylocationno })
                .HasConstraintName("FK_CLM_DEPENDANT_LOCATIONNO");

            entity.HasOne(d => d.ParContact).WithMany(p => p.ClmDependants)
                .HasForeignKey(d => new { d.Partyid, d.Partylocationno, d.Partycontactno })
                .HasConstraintName("FK_CLM_DEPENDANT_CONTACTNO");
        });

        modelBuilder.Entity<ClmDeterminationSa>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_DETERMINATION_SA", tb =>
                {
                    tb.HasTrigger("auddel_CLM_DETERMINATION_SA");
                    tb.HasTrigger("audins_CLM_DETERMINATION_SA");
                    tb.HasTrigger("audupd_CLM_DETERMINATION_SA");
                });

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Datedeterminationchanged)
                .HasColumnType("datetime")
                .HasColumnName("DATEDETERMINATIONCHANGED");
            entity.Property(e => e.Datedetermined)
                .HasColumnType("datetime")
                .HasColumnName("DATEDETERMINED");
            entity.Property(e => e.Dateperiodfrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEPERIODFROM");
            entity.Property(e => e.Dateperiodto)
                .HasColumnType("datetime")
                .HasColumnName("DATEPERIODTO");
            entity.Property(e => e.Determination)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DETERMINATION");
            entity.Property(e => e.Determinationcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DETERMINATIONCODETYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Interimpayments).HasColumnName("INTERIMPAYMENTS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.ChangedbyNavigation).WithMany(p => p.ClmDeterminationSas)
                .HasForeignKey(d => d.Changedby)
                .HasConstraintName("FK_CLM_DETERMINATION_SA_CHANGEDBY");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmDeterminationSa)
                .HasForeignKey<ClmDeterminationSa>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_DETERMINATION_SA_CLAIMID");
        });

        modelBuilder.Entity<ClmDeterminationSaX>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_DETERMINATION_SA_X", tb =>
                {
                    tb.HasTrigger("auddel_CLM_DETERMINATION_SA_X");
                    tb.HasTrigger("audins_CLM_DETERMINATION_SA_X");
                    tb.HasTrigger("audupd_CLM_DETERMINATION_SA_X");
                });

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Disability)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DISABILITY");
            entity.Property(e => e.Dpcdetermination)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DPCDETERMINATION");
            entity.Property(e => e.Dpcdeterminationcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DPCDETERMINATIONCODETYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmDeterminationSaX)
                .HasForeignKey<ClmDeterminationSaX>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_DETERMINATION_SA_X_CLAIMID");
        });

        modelBuilder.Entity<ClmDeterminationhistorySa>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Determinationhistoryno });

            entity.ToTable("CLM_DETERMINATIONHISTORY_SA", tb => tb.HasTrigger("WF_CLM_DETERMINATIONHISTORY_SA"));

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Determinationhistoryno).HasColumnName("DETERMINATIONHISTORYNO");
            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Datedeterminationchanged)
                .HasColumnType("datetime")
                .HasColumnName("DATEDETERMINATIONCHANGED");
            entity.Property(e => e.Datedetermined)
                .HasColumnType("datetime")
                .HasColumnName("DATEDETERMINED");
            entity.Property(e => e.Dateperiodfrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEPERIODFROM");
            entity.Property(e => e.Dateperiodto)
                .HasColumnType("datetime")
                .HasColumnName("DATEPERIODTO");
            entity.Property(e => e.Determination)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DETERMINATION");
            entity.Property(e => e.Determinationcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DETERMINATIONCODETYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.ChangedbyNavigation).WithMany(p => p.ClmDeterminationhistorySas)
                .HasForeignKey(d => d.Changedby)
                .HasConstraintName("FK_CLM_DETERMINATIONHISTORY_SA_CHANGEDBY");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmDeterminationhistorySas)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_DETERMINATIONHISTORY_SA_CLAIMID");
        });

        modelBuilder.Entity<ClmDeterminationhistorySaX>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Determinationhistoryno });

            entity.ToTable("CLM_DETERMINATIONHISTORY_SA_X", tb =>
                {
                    tb.HasTrigger("auddel_CLM_DETERMINATIONHISTOR");
                    tb.HasTrigger("audins_CLM_DETERMINATIONHISTOR");
                    tb.HasTrigger("audupd_CLM_DETERMINATIONHISTOR");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Determinationhistoryno).HasColumnName("DETERMINATIONHISTORYNO");
            entity.Property(e => e.Dpcdetermination)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DPCDETERMINATION");
            entity.Property(e => e.Dpcdeterminationcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DPCDETERMINATIONCODETYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Inactivedate)
                .HasColumnType("datetime")
                .HasColumnName("INACTIVEDATE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.ClmDeterminationhistorySa).WithOne(p => p.ClmDeterminationhistorySaX)
                .HasForeignKey<ClmDeterminationhistorySaX>(d => new { d.Claimid, d.Determinationhistoryno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_DETERMINATIONHISTORY_SA_X_DETERMINATIONHISTORYNO");
        });

        modelBuilder.Entity<ClmDraftpayment>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Draftpaymentno });

            entity.ToTable("CLM_DRAFTPAYMENT", tb =>
                {
                    tb.HasTrigger("auddel_CLM_DRAFTPAYMENT");
                    tb.HasTrigger("audins_CLM_DRAFTPAYMENT");
                    tb.HasTrigger("audupd_CLM_DRAFTPAYMENT");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Draftpaymentno).HasColumnName("DRAFTPAYMENTNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmDraftpayments)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_DRAFTPAYMENT_CLAIMID");

            entity.HasOne(d => d.Payment).WithMany(p => p.ClmDraftpayments)
                .HasForeignKey(d => d.Paymentid)
                .HasConstraintName("FK_CLM_DRAFTPAYMENT_PAYMENTID");
        });

        modelBuilder.Entity<ClmEarning>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Earningsno });

            entity.ToTable("CLM_EARNINGS", tb =>
                {
                    tb.HasTrigger("WF_CLM_EARNINGS");
                    tb.HasTrigger("auddel_CLM_EARNINGS");
                    tb.HasTrigger("audins_CLM_EARNINGS");
                    tb.HasTrigger("audupd_CLM_EARNINGS");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Earningsno).HasColumnName("EARNINGSNO");
            entity.Property(e => e.Dateeffective)
                .HasColumnType("datetime")
                .HasColumnName("DATEEFFECTIVE");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Enteredbyuserid).HasColumnName("ENTEREDBYUSERID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmEarnings)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_EARNINGS_CLAIMID");

            entity.HasOne(d => d.Enteredbyuser).WithMany(p => p.ClmEarnings)
                .HasForeignKey(d => d.Enteredbyuserid)
                .HasConstraintName("FK_CLM_EARNINGS_ENTEREDBYUSERID");
        });

        modelBuilder.Entity<ClmEarningsSa>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Earningsno });

            entity.ToTable("CLM_EARNINGS_SA", tb =>
                {
                    tb.HasTrigger("auddel_CLM_EARNINGS_SA");
                    tb.HasTrigger("audins_CLM_EARNINGS_SA");
                    tb.HasTrigger("audupd_CLM_EARNINGS_SA");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Earningsno).HasColumnName("EARNINGSNO");
            entity.Property(e => e.Baseawardrate)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("BASEAWARDRATE");
            entity.Property(e => e.Baseweeklyearnings)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("BASEWEEKLYEARNINGS");
            entity.Property(e => e.Daysperweek).HasColumnName("DAYSPERWEEK");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hoursperweek)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("HOURSPERWEEK");
            entity.Property(e => e.Hoursperweekallemployment)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("HOURSPERWEEKALLEMPLOYMENT");
            entity.Property(e => e.Nonpecuniary)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("NONPECUNIARY");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Otheremploymentbaseawardrate)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHEREMPLOYMENTBASEAWARDRATE");
            entity.Property(e => e.Otheremploymentbaseweeklyearn)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHEREMPLOYMENTBASEWEEKLYEARN");
            entity.Property(e => e.Otheremploymenthoursperweek)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHEREMPLOYMENTHOURSPERWEEK");
            entity.Property(e => e.Otheremploymentnonpecuniary)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHEREMPLOYMENTNONPECUNIARY");
            entity.Property(e => e.Otheremploymentovertime)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHEREMPLOYMENTOVERTIME");
            entity.Property(e => e.Otheremploymentpenaltyrates)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHEREMPLOYMENTPENALTYRATES");
            entity.Property(e => e.Otheremploymentshift)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHEREMPLOYMENTSHIFT");
            entity.Property(e => e.Otheremploymentsuitableduties)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHEREMPLOYMENTSUITABLEDUTIES");
            entity.Property(e => e.Overriddennweamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OVERRIDDENNWEAMOUNT");
            entity.Property(e => e.Overridenweamount).HasColumnName("OVERRIDENWEAMOUNT");
            entity.Property(e => e.Overtime)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OVERTIME");
            entity.Property(e => e.Penaltyrates)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("PENALTYRATES");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reductionofweeklypayment)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("REDUCTIONOFWEEKLYPAYMENT");
            entity.Property(e => e.Shift)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("SHIFT");
            entity.Property(e => e.Suitableduties)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("SUITABLEDUTIES");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.ClmEarning).WithOne(p => p.ClmEarningsSa)
                .HasForeignKey<ClmEarningsSa>(d => new { d.Claimid, d.Earningsno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_EARNINGS_SA_EARNINGSNO");
        });

        modelBuilder.Entity<ClmEarningsSaX>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Earningsno });

            entity.ToTable("CLM_EARNINGS_SA_X", tb =>
                {
                    tb.HasTrigger("auddel_CLM_EARNINGS_SA_X");
                    tb.HasTrigger("audins_CLM_EARNINGS_SA_X");
                    tb.HasTrigger("audupd_CLM_EARNINGS_SA_X");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Earningsno).HasColumnName("EARNINGSNO");
            entity.Property(e => e.Enterprisebargainingcompensationrate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENTERPRISEBARGAININGCOMPENSATIONRATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.ClmEarningsSa).WithOne(p => p.ClmEarningsSaX)
                .HasForeignKey<ClmEarningsSaX>(d => new { d.Claimid, d.Earningsno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_EARNINGS_SA_X_EARNINGSNO");
        });

        modelBuilder.Entity<ClmEarningsdocument>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Earningsdocumentno });

            entity.ToTable("CLM_EARNINGSDOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_CLM_EARNINGSDOCUMENT");
                    tb.HasTrigger("audins_CLM_EARNINGSDOCUMENT");
                    tb.HasTrigger("audupd_CLM_EARNINGSDOCUMENT");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Earningsdocumentno).HasColumnName("EARNINGSDOCUMENTNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmEarningsdocuments)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_EARNINGSDOCUMENT_ClAIMID");

            entity.HasOne(d => d.Document).WithMany(p => p.ClmEarningsdocuments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_CLM_EARNINGSDOCUMENT_DOCUMENTID");
        });

        modelBuilder.Entity<ClmEmail>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Emailno }).HasName("PK_CLM_EMAIL_CLAIMID_EMAILNO");

            entity.ToTable("CLM_EMAIL", tb =>
                {
                    tb.HasTrigger("auddel_CLM_EMAIL");
                    tb.HasTrigger("audins_CLM_EMAIL");
                    tb.HasTrigger("audupd_CLM_EMAIL");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Emailno).HasColumnName("EMAILNO");
            entity.Property(e => e.Emailid).HasColumnName("EMAILID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmEmails)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_EMAIL_CLAIMID");

            entity.HasOne(d => d.Email).WithMany(p => p.ClmEmails)
                .HasForeignKey(d => d.Emailid)
                .HasConstraintName("FK_CLM_EMAIL_EMAILID");
        });

        modelBuilder.Entity<ClmEmploymentcurrent>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_EMPLOYMENTCURRENT", tb =>
                {
                    tb.HasTrigger("auddel_CLM_EMPLOYMENTCURRENT");
                    tb.HasTrigger("audins_CLM_EMPLOYMENTCURRENT");
                    tb.HasTrigger("audupd_CLM_EMPLOYMENTCURRENT");
                });

            entity.HasIndex(e => e.Claimemploymentid, "IDX_CLM_EMPLOYMENTCURRENT_CLAIMEMPLOYMENTID");

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Claimemploymentid).HasColumnName("CLAIMEMPLOYMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claimemployment).WithMany(p => p.ClmEmploymentcurrents)
                .HasForeignKey(d => d.Claimemploymentid)
                .HasConstraintName("FK_CLM_EMPLOYMENTCURRENT_CLAIMEMPLOYMENTID");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmEmploymentcurrent)
                .HasForeignKey<ClmEmploymentcurrent>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_EMPLOYMENTCURRENT_CLAIMID");
        });

        modelBuilder.Entity<ClmEmploymentdoi>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_EMPLOYMENTDOI", tb =>
                {
                    tb.HasTrigger("auddel_CLM_EMPLOYMENTDOI");
                    tb.HasTrigger("audins_CLM_EMPLOYMENTDOI");
                    tb.HasTrigger("audupd_CLM_EMPLOYMENTDOI");
                });

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Claimemploymentid).HasColumnName("CLAIMEMPLOYMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Workerhasotheremployment).HasColumnName("WORKERHASOTHEREMPLOYMENT");
            entity.Property(e => e.Workplacedoiissameascurrent).HasColumnName("WORKPLACEDOIISSAMEASCURRENT");

            entity.HasOne(d => d.Claimemployment).WithMany(p => p.ClmEmploymentdois)
                .HasForeignKey(d => d.Claimemploymentid)
                .HasConstraintName("FK_CLM_EMPLOYMENTDOI_CLAIMEMPLOYMENTID");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmEmploymentdoi)
                .HasForeignKey<ClmEmploymentdoi>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_EMPLOYMENTDOI_CLAIMID");
        });

        modelBuilder.Entity<ClmEstimate>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Estimateno }).HasName("PK_CLM_ESTIMATEHISTORY");

            entity.ToTable("CLM_ESTIMATE", tb =>
                {
                    tb.HasTrigger("WF_CLM_ESTIMATE");
                    tb.HasTrigger("auddel_CLM_ESTIMATE");
                    tb.HasTrigger("audins_CLM_ESTIMATE");
                    tb.HasTrigger("audupd_CLM_ESTIMATE");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Estimateno).HasColumnName("ESTIMATENO");
            entity.Property(e => e.Changedbyuserid).HasColumnName("CHANGEDBYUSERID");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMECHANGED");
            entity.Property(e => e.Estimatecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESTIMATECATEGORY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Incurredamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("INCURREDAMOUNT");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REASON");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Transactionid).HasColumnName("TRANSACTIONID");

            entity.HasOne(d => d.Changedbyuser).WithMany(p => p.ClmEstimates)
                .HasForeignKey(d => d.Changedbyuserid)
                .HasConstraintName("FK_CLM_ESTIMATEHISTORY_CHANGEDBYUSERID");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmEstimates)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_ESTIMATEHISTORY_CLAIMID");

            entity.HasOne(d => d.Transaction).WithMany(p => p.ClmEstimates)
                .HasForeignKey(d => d.Transactionid)
                .HasConstraintName("FK_CLM_ESTIMATE_TRANSACTIONID");
        });

        modelBuilder.Entity<ClmEstimateworksheet>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Estimateworksheetno });

            entity.ToTable("CLM_ESTIMATEWORKSHEET", tb =>
                {
                    tb.HasTrigger("auddel_CLM_ESTIMATEWORKSHEET");
                    tb.HasTrigger("audins_CLM_ESTIMATEWORKSHEET");
                    tb.HasTrigger("audupd_CLM_ESTIMATEWORKSHEET");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Estimateworksheetno).HasColumnName("ESTIMATEWORKSHEETNO");
            entity.Property(e => e.Appliedby).HasColumnName("APPLIEDBY");
            entity.Property(e => e.Comments)
                .IsUnicode(false)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Dateapplied)
                .HasColumnType("datetime")
                .HasColumnName("DATEAPPLIED");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Enteredby).HasColumnName("ENTEREDBY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Reasonforchange)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REASONFORCHANGE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.AppliedbyNavigation).WithMany(p => p.ClmEstimateworksheetAppliedbyNavigations)
                .HasForeignKey(d => d.Appliedby)
                .HasConstraintName("FK_CLM_ESTIMATEWORKSHEET_APPLIEDBY");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmEstimateworksheets)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_ESTIMATEWORKSHEET_CLAIMID");

            entity.HasOne(d => d.EnteredbyNavigation).WithMany(p => p.ClmEstimateworksheetEnteredbyNavigations)
                .HasForeignKey(d => d.Enteredby)
                .HasConstraintName("FK_CLM_ESTIMATEWORKSHEET_ENTEREDBY");
        });

        modelBuilder.Entity<ClmEstimateworksheetSa>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Estimateworksheetno });

            entity.ToTable("CLM_ESTIMATEWORKSHEET_SA", tb =>
                {
                    tb.HasTrigger("auddel_CLM_ESTIMATEWORKSHEET_S");
                    tb.HasTrigger("audins_CLM_ESTIMATEWORKSHEET_S");
                    tb.HasTrigger("audupd_CLM_ESTIMATEWORKSHEET_S");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Estimateworksheetno).HasColumnName("ESTIMATEWORKSHEETNO");
            entity.Property(e => e.Commonlawamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("COMMONLAWAMOUNT");
            entity.Property(e => e.Deedofreleaseamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("DEEDOFRELEASEAMOUNT");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hospitalinpatientrate)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("HOSPITALINPATIENTRATE");
            entity.Property(e => e.Hospitalinpatientyears)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("HOSPITALINPATIENTYEARS");
            entity.Property(e => e.Hospitaloutpatientrate)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("HOSPITALOUTPATIENTRATE");
            entity.Property(e => e.Hospitaloutpatientyears)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("HOSPITALOUTPATIENTYEARS");
            entity.Property(e => e.Investigationamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("INVESTIGATIONAMOUNT");
            entity.Property(e => e.Legalamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("LEGALAMOUNT");
            entity.Property(e => e.Lumpsumeconomiclossamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("LUMPSUMECONOMICLOSSAMOUNT");
            entity.Property(e => e.Lumpsumnoneconomiclossamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("LUMPSUMNONECONOMICLOSSAMOUNT");
            entity.Property(e => e.Medicalalliedhealthrate)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("MEDICALALLIEDHEALTHRATE");
            entity.Property(e => e.Medicalalliedhealthyears)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("MEDICALALLIEDHEALTHYEARS");
            entity.Property(e => e.Medicalothergoodsservicesrate)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("MEDICALOTHERGOODSSERVICESRATE");
            entity.Property(e => e.Medicalothergoodsservicesyears)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("MEDICALOTHERGOODSSERVICESYEARS");
            entity.Property(e => e.Medicalservicesrate)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("MEDICALSERVICESRATE");
            entity.Property(e => e.Medicalservicesyears)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("MEDICALSERVICESYEARS");
            entity.Property(e => e.Othergoodsservicesamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHERGOODSSERVICESAMOUNT");
            entity.Property(e => e.Otherincapacityrate)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHERINCAPACITYRATE");
            entity.Property(e => e.Otherincapacityweeks)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHERINCAPACITYWEEKS");
            entity.Property(e => e.Othernoncompensationamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHERNONCOMPENSATIONAMOUNT");
            entity.Property(e => e.Partialincapacityrate)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("PARTIALINCAPACITYRATE");
            entity.Property(e => e.Partialincapacityweeks)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("PARTIALINCAPACITYWEEKS");
            entity.Property(e => e.Propertydamageamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("PROPERTYDAMAGEAMOUNT");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Recoveredamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("RECOVEREDAMOUNT");
            entity.Property(e => e.Redemptionincomesupportamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("REDEMPTIONINCOMESUPPORTAMOUNT");
            entity.Property(e => e.Redemptionmedexpensesamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("REDEMPTIONMEDEXPENSESAMOUNT");
            entity.Property(e => e.Rehabilitationrate)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("REHABILITATIONRATE");
            entity.Property(e => e.Rehabilitationyears)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("REHABILITATIONYEARS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Totalincapacityrate)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("TOTALINCAPACITYRATE");
            entity.Property(e => e.Totalincapacityweeks)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("TOTALINCAPACITYWEEKS");
            entity.Property(e => e.Travelamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("TRAVELAMOUNT");

            entity.HasOne(d => d.ClmEstimateworksheet).WithOne(p => p.ClmEstimateworksheetSa)
                .HasForeignKey<ClmEstimateworksheetSa>(d => new { d.Claimid, d.Estimateworksheetno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_ESTIMATEWORKSHEET_SA_WORKSHEETNO");
        });

        modelBuilder.Entity<ClmEstimateworksheetdocument>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Estimateworksheetno, e.Documentno });

            entity.ToTable("CLM_ESTIMATEWORKSHEETDOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_CLM_ESTIMATEWORKSHEETDO");
                    tb.HasTrigger("audins_CLM_ESTIMATEWORKSHEETDO");
                    tb.HasTrigger("audupd_CLM_ESTIMATEWORKSHEETDO");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Estimateworksheetno).HasColumnName("ESTIMATEWORKSHEETNO");
            entity.Property(e => e.Documentno).HasColumnName("DOCUMENTNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.ClmEstimateworksheet).WithMany(p => p.ClmEstimateworksheetdocuments)
                .HasForeignKey(d => new { d.Claimid, d.Estimateworksheetno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_ESTIMATEWORKSHEETDOCUMENT_CLAIMID_ESTIMATEWORKSHEETNO");
        });

        modelBuilder.Entity<ClmFilenote>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Filenoteno });

            entity.ToTable("CLM_FILENOTE", tb =>
                {
                    tb.HasTrigger("WF_CLM_FILENOTE");
                    tb.HasTrigger("auddel_CLM_FILENOTE");
                    tb.HasTrigger("audins_CLM_FILENOTE");
                    tb.HasTrigger("audupd_CLM_FILENOTE");
                });

            entity.HasIndex(e => e.Filenoteid, "IDX_CLM_FILENOTE_FILENOTEID");

            entity.HasIndex(e => new { e.Guid, e.Filenoteid }, "IX_CLM_FILENOTE_WF");

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Filenoteno).HasColumnName("FILENOTENO");
            entity.Property(e => e.Filenoteid).HasColumnName("FILENOTEID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmFilenotes)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_FILENOTE_CLAIMID");

            entity.HasOne(d => d.Filenote).WithMany(p => p.ClmFilenotes)
                .HasForeignKey(d => d.Filenoteid)
                .HasConstraintName("FK_CLM_FILENOTE_FILENOTEID");
        });

        modelBuilder.Entity<ClmFiletracking>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Filetrackingno });

            entity.ToTable("CLM_FILETRACKING", tb =>
                {
                    tb.HasTrigger("auddel_CLM_FILETRACKING");
                    tb.HasTrigger("audins_CLM_FILETRACKING");
                    tb.HasTrigger("audupd_CLM_FILETRACKING");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Filetrackingno).HasColumnName("FILETRACKINGNO");
            entity.Property(e => e.Archiverefboxnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ARCHIVEREFBOXNUMBER");
            entity.Property(e => e.Comments)
                .IsUnicode(false)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datereceivedorreturned)
                .HasColumnType("datetime")
                .HasColumnName("DATERECEIVEDORRETURNED");
            entity.Property(e => e.Datesent)
                .HasColumnType("datetime")
                .HasColumnName("DATESENT");
            entity.Property(e => e.Enteredby).HasColumnName("ENTEREDBY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Numberoffiles).HasColumnName("NUMBEROFFILES");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Trackedfrom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRACKEDFROM");
            entity.Property(e => e.Trackedto)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRACKEDTO");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmFiletrackings)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_FILETRACKING_CLAIMID");

            entity.HasOne(d => d.EnteredbyNavigation).WithMany(p => p.ClmFiletrackings)
                .HasForeignKey(d => d.Enteredby)
                .HasConstraintName("FK_CLM_FILETRACKING_ENTEREDBY");
        });

        modelBuilder.Entity<ClmIncapacity>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Incapacityno });

            entity.ToTable("CLM_INCAPACITY", tb =>
                {
                    tb.HasTrigger("WF_CLM_INCAPACITY");
                    tb.HasTrigger("auddel_CLM_INCAPACITY");
                    tb.HasTrigger("audins_CLM_INCAPACITY");
                    tb.HasTrigger("audupd_CLM_INCAPACITY");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Incapacityno).HasColumnName("INCAPACITYNO");
            entity.Property(e => e.Dateceased)
                .HasColumnType("datetime")
                .HasColumnName("DATECEASED");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Dateestimatedfit)
                .HasColumnType("datetime")
                .HasColumnName("DATEESTIMATEDFIT");
            entity.Property(e => e.Datefit)
                .HasColumnType("datetime")
                .HasColumnName("DATEFIT");
            entity.Property(e => e.Datereturn)
                .HasColumnType("datetime")
                .HasColumnName("DATERETURN");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timeceased)
                .HasColumnType("datetime")
                .HasColumnName("TIMECEASED");
            entity.Property(e => e.Timereturn)
                .HasColumnType("datetime")
                .HasColumnName("TIMERETURN");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmIncapacities)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_INCAPACITY_CLAIMID");
        });

        modelBuilder.Entity<ClmIncident>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_INCIDENT", tb =>
                {
                    tb.HasTrigger("WF_CLM_INCIDENT");
                    tb.HasTrigger("auddel_CLM_INCIDENT");
                    tb.HasTrigger("audins_CLM_INCIDENT");
                    tb.HasTrigger("audupd_CLM_INCIDENT");
                });

            entity.HasIndex(e => e.Dateofinjury, "IDX_CLM_INCIDENT_DOI");

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Accidentlocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ACCIDENTLOCATION");
            entity.Property(e => e.Accidentlocationcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ACCIDENTLOCATIONCODETYPE");
            entity.Property(e => e.Admittedtohospital).HasColumnName("ADMITTEDTOHOSPITAL");
            entity.Property(e => e.Dateofinjury)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFINJURY");
            entity.Property(e => e.Deathcausedbyincident).HasColumnName("DEATHCAUSEDBYINCIDENT");
            entity.Property(e => e.Deemeddateofinjury).HasColumnName("DEEMEDDATEOFINJURY");
            entity.Property(e => e.Descriptionofincident)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTIONOFINCIDENT");
            entity.Property(e => e.Descriptionofinjury)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTIONOFINJURY");
            entity.Property(e => e.Descriptionoftask)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTIONOFTASK");
            entity.Property(e => e.Dutystatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DUTYSTATUS");
            entity.Property(e => e.Dutystatuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DUTYSTATUSCODETYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Incidentnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INCIDENTNUMBER");
            entity.Property(e => e.Incidentreporteddate)
                .HasColumnType("datetime")
                .HasColumnName("INCIDENTREPORTEDDATE");
            entity.Property(e => e.Incidentreportedtime)
                .HasColumnType("datetime")
                .HasColumnName("INCIDENTREPORTEDTIME");
            entity.Property(e => e.Incidentreportedto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INCIDENTREPORTEDTO");
            entity.Property(e => e.Incidentreportedtophone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("INCIDENTREPORTEDTOPHONE");
            entity.Property(e => e.Incidentreportsubmitted).HasColumnName("INCIDENTREPORTSUBMITTED");
            entity.Property(e => e.Injuryoccurredaddressline1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INJURYOCCURREDADDRESSLINE1");
            entity.Property(e => e.Injuryoccurredaddressline2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INJURYOCCURREDADDRESSLINE2");
            entity.Property(e => e.Injuryoccurredaddressline3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INJURYOCCURREDADDRESSLINE3");
            entity.Property(e => e.Injuryoccurredcountry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYOCCURREDCOUNTRY");
            entity.Property(e => e.Injuryoccurredinternational).HasColumnName("INJURYOCCURREDINTERNATIONAL");
            entity.Property(e => e.Injuryoccurredplace)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("INJURYOCCURREDPLACE");
            entity.Property(e => e.Injuryoccurredpostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("INJURYOCCURREDPOSTCODE");
            entity.Property(e => e.Injuryoccurredstate)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("INJURYOCCURREDSTATE");
            entity.Property(e => e.Injuryoccurredsuburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("INJURYOCCURREDSUBURB");
            entity.Property(e => e.Nameofhospital)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NAMEOFHOSPITAL");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Takentohospital).HasColumnName("TAKENTOHOSPITAL ");
            entity.Property(e => e.Timeofinjury)
                .HasColumnType("datetime")
                .HasColumnName("TIMEOFINJURY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Wasincidentrelatedtocovid).HasColumnName("WASINCIDENTRELATEDTOCOVID");
            entity.Property(e => e.Workwasceased).HasColumnName("WORKWASCEASED");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmIncident)
                .HasForeignKey<ClmIncident>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_INCIDENT_CLAIMID");
        });

        modelBuilder.Entity<ClmIncidentX>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_INCIDENT_X", tb =>
                {
                    tb.HasTrigger("auddel_CLM_INCIDENT_X");
                    tb.HasTrigger("audins_CLM_INCIDENT_X");
                    tb.HasTrigger("audupd_CLM_INCIDENT_X");
                });

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Firstnotifieddate)
                .HasColumnType("datetime")
                .HasColumnName("FIRSTNOTIFIEDDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Policecclaim).HasColumnName("POLICECCLAIM");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmIncidentX)
                .HasForeignKey<ClmIncidentX>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_INCIDENT_X_CLM_INCIDENT");
        });

        modelBuilder.Entity<ClmInjuredworker>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_INJUREDWORKER", tb =>
                {
                    tb.HasTrigger("auddel_CLM_INJUREDWORKER");
                    tb.HasTrigger("audins_CLM_INJUREDWORKER");
                    tb.HasTrigger("audupd_CLM_INJUREDWORKER");
                });

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Actbehalf).HasColumnName("ACTBEHALF");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmInjuredworker)
                .HasForeignKey<ClmInjuredworker>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_INJUREDWORKER_CLAIMID");

            entity.HasOne(d => d.Party).WithMany(p => p.ClmInjuredworkers)
                .HasForeignKey(d => d.Partyid)
                .HasConstraintName("FK_CLM_INJUREDWORKER_PARTYID");
        });

        modelBuilder.Entity<ClmInjury>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Injuryno });

            entity.ToTable("CLM_INJURY", tb =>
                {
                    tb.HasTrigger("auddel_CLM_INJURY");
                    tb.HasTrigger("audins_CLM_INJURY");
                    tb.HasTrigger("audupd_CLM_INJURY");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Injuryno).HasColumnName("INJURYNO");
            entity.Property(e => e.Agency1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY1");
            entity.Property(e => e.Agency1codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY1CODETYPE");
            entity.Property(e => e.Agency2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY2");
            entity.Property(e => e.Agency2codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY2CODETYPE");
            entity.Property(e => e.Agency3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY3");
            entity.Property(e => e.Agency3codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY3CODETYPE");
            entity.Property(e => e.Agency4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY4");
            entity.Property(e => e.Agency4codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY4CODETYPE");
            entity.Property(e => e.Agencydescription)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("AGENCYDESCRIPTION");
            entity.Property(e => e.Agencysameasbreakdownagency).HasColumnName("AGENCYSAMEASBREAKDOWNAGENCY");
            entity.Property(e => e.Bodilylocation1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATION1");
            entity.Property(e => e.Bodilylocation1codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATION1CODETYPE");
            entity.Property(e => e.Bodilylocation2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATION2");
            entity.Property(e => e.Bodilylocation2codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATION2CODETYPE");
            entity.Property(e => e.Bodilylocation3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATION3");
            entity.Property(e => e.Bodilylocation3codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATION3CODETYPE");
            entity.Property(e => e.Bodilylocationdescription)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("BODILYLOCATIONDESCRIPTION");
            entity.Property(e => e.Breakdownagency1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BREAKDOWNAGENCY1");
            entity.Property(e => e.Breakdownagency1codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BREAKDOWNAGENCY1CODETYPE");
            entity.Property(e => e.Breakdownagency2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BREAKDOWNAGENCY2");
            entity.Property(e => e.Breakdownagency2codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BREAKDOWNAGENCY2CODETYPE");
            entity.Property(e => e.Breakdownagency3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BREAKDOWNAGENCY3");
            entity.Property(e => e.Breakdownagency3codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BREAKDOWNAGENCY3CODETYPE");
            entity.Property(e => e.Breakdownagency4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BREAKDOWNAGENCY4");
            entity.Property(e => e.Breakdownagency4codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BREAKDOWNAGENCY4CODETYPE");
            entity.Property(e => e.Breakdownagencydescription)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("BREAKDOWNAGENCYDESCRIPTION");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Injuryseverity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYSEVERITY");
            entity.Property(e => e.Injuryside)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYSIDE");
            entity.Property(e => e.Mechanism1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MECHANISM1");
            entity.Property(e => e.Mechanism1codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MECHANISM1CODETYPE");
            entity.Property(e => e.Mechanism2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MECHANISM2");
            entity.Property(e => e.Mechanism2codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MECHANISM2CODETYPE");
            entity.Property(e => e.Mechanismdescription)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MECHANISMDESCRIPTION");
            entity.Property(e => e.Nature1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NATURE1");
            entity.Property(e => e.Nature1codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NATURE1CODETYPE");
            entity.Property(e => e.Nature2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NATURE2");
            entity.Property(e => e.Nature2codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NATURE2CODETYPE");
            entity.Property(e => e.Naturedescription)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NATUREDESCRIPTION");
            entity.Property(e => e.Primaryinjury).HasColumnName("PRIMARYINJURY");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Recurrencedate)
                .HasColumnType("datetime")
                .HasColumnName("RECURRENCEDATE");
            entity.Property(e => e.Recurringinjury).HasColumnName("RECURRINGINJURY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmInjuries)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_INJURY_CLAIMID");
        });

        modelBuilder.Entity<ClmInjurymanagementplan>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Injurymanagementplanno });

            entity.ToTable("CLM_INJURYMANAGEMENTPLAN", tb =>
                {
                    tb.HasTrigger("WF_CLM_INJURYMANAGEMENTPLAN");
                    tb.HasTrigger("auddel_CLM_INJURYMANAGEMENTPLA");
                    tb.HasTrigger("audins_CLM_INJURYMANAGEMENTPLA");
                    tb.HasTrigger("audupd_CLM_INJURYMANAGEMENTPLA");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Injurymanagementplanno).HasColumnName("INJURYMANAGEMENTPLANNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Injurymanagementplanid).HasColumnName("INJURYMANAGEMENTPLANID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmInjurymanagementplans)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_INJURYMANAGEMENTPLAN_CLAIMID");

            entity.HasOne(d => d.Injurymanagementplan).WithMany(p => p.ClmInjurymanagementplans)
                .HasForeignKey(d => d.Injurymanagementplanid)
                .HasConstraintName("FK_CLM_INJURYMANAGEMENTPLAN_INJURYMANAGEMENTPLANID");
        });

        modelBuilder.Entity<ClmInsurerIn>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_INSURER_INS", tb =>
                {
                    tb.HasTrigger("auddel_CLM_INSURER_INS");
                    tb.HasTrigger("audins_CLM_INSURER_INS");
                    tb.HasTrigger("audupd_CLM_INSURER_INS");
                });

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Datelastinsurerupdate)
                .HasColumnType("datetime")
                .HasColumnName("DATELASTINSURERUPDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurercasemanager)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("INSURERCASEMANAGER");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Insurerid).HasColumnName("INSURERID");
            entity.Property(e => e.Insurerphonenumber)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("INSURERPHONENUMBER");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmInsurerIn)
                .HasForeignKey<ClmInsurerIn>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_INSURER_INS_CLAIMID");

            entity.HasOne(d => d.Insurer).WithMany(p => p.ClmInsurerIns)
                .HasForeignKey(d => d.Insurerid)
                .HasConstraintName("FK_CLM_INSURER_INS_INSURERID");
        });

        modelBuilder.Entity<ClmInsurerreferral>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Referralno });

            entity.ToTable("CLM_INSURERREFERRAL", tb =>
                {
                    tb.HasTrigger("auddel_CLM_INSURERREFERRAL");
                    tb.HasTrigger("audins_CLM_INSURERREFERRAL");
                    tb.HasTrigger("audupd_CLM_INSURERREFERRAL");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Referralno).HasColumnName("REFERRALNO");
            entity.Property(e => e.Excessamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("EXCESSAMOUNT");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurer)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("INSURER");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Policynumber)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("POLICYNUMBER");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Referralnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REFERRALNUMBER");
            entity.Property(e => e.Referraltype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REFERRALTYPE");
            entity.Property(e => e.Referredtoinsurerdate)
                .HasColumnType("datetime")
                .HasColumnName("REFERREDTOINSURERDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmInsurerreferrals)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_INSURERREFERRAL_CLAIMID");
        });

        modelBuilder.Entity<ClmInvestigation>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Investigationno });

            entity.ToTable("CLM_INVESTIGATION", tb =>
                {
                    tb.HasTrigger("WF_CLM_INVESTIGATION");
                    tb.HasTrigger("auddel_CLM_INVESTIGATION");
                    tb.HasTrigger("audins_CLM_INVESTIGATION");
                    tb.HasTrigger("audupd_CLM_INVESTIGATION");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Investigationno).HasColumnName("INVESTIGATIONNO");
            entity.Property(e => e.Appointmentdate)
                .HasColumnType("datetime")
                .HasColumnName("APPOINTMENTDATE");
            entity.Property(e => e.Approvedhours)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("APPROVEDHOURS");
            entity.Property(e => e.Comments)
                .IsUnicode(false)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Confidential).HasColumnName("CONFIDENTIAL");
            entity.Property(e => e.Datereferred)
                .HasColumnType("datetime")
                .HasColumnName("DATEREFERRED");
            entity.Property(e => e.Datetobecompleted)
                .HasColumnType("datetime")
                .HasColumnName("DATETOBECOMPLETED");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Investigation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INVESTIGATION");
            entity.Property(e => e.Investigatorpartyid).HasColumnName("INVESTIGATORPARTYID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reportcompleted).HasColumnName("REPORTCOMPLETED");
            entity.Property(e => e.Reportcompleteddate)
                .HasColumnType("datetime")
                .HasColumnName("REPORTCOMPLETEDDATE");
            entity.Property(e => e.Reportduedate)
                .HasColumnType("datetime")
                .HasColumnName("REPORTDUEDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmInvestigations)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_INVESTIGATION_CLAIMID");

            entity.HasOne(d => d.Document).WithMany(p => p.ClmInvestigations)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_CLM_INVESTIGATION_DOCUMENTID");

            entity.HasOne(d => d.Investigatorparty).WithMany(p => p.ClmInvestigations)
                .HasForeignKey(d => d.Investigatorpartyid)
                .HasConstraintName("FK_CLM_INVESTIGATION_INVESTIGATORPARTYID");
        });

        modelBuilder.Entity<ClmLegaldispute>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Legalno });

            entity.ToTable("CLM_LEGALDISPUTE", tb =>
                {
                    tb.HasTrigger("WF_CLM_LEGALDISPUTE");
                    tb.HasTrigger("auddel_CLM_LEGALDISPUTE");
                    tb.HasTrigger("audins_CLM_LEGALDISPUTE");
                    tb.HasTrigger("audupd_CLM_LEGALDISPUTE");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Legalno).HasColumnName("LEGALNO");
            entity.Property(e => e.Courttribunal)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COURTTRIBUNAL");
            entity.Property(e => e.Dateacknowledged)
                .HasColumnType("datetime")
                .HasColumnName("DATEACKNOWLEDGED");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datelodged)
                .HasColumnType("datetime")
                .HasColumnName("DATELODGED");
            entity.Property(e => e.Datereferredtolegal)
                .HasColumnType("datetime")
                .HasColumnName("DATEREFERREDTOLEGAL");
            entity.Property(e => e.Detailsofdispute)
                .IsUnicode(false)
                .HasColumnName("DETAILSOFDISPUTE");
            entity.Property(e => e.Disputetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DISPUTETYPE");
            entity.Property(e => e.Finaloutcome)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FINALOUTCOME");
            entity.Property(e => e.Finaloutcomedate)
                .HasColumnType("datetime")
                .HasColumnName("FINALOUTCOMEDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Matterfilenumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MATTERFILENUMBER");
            entity.Property(e => e.Outcomecomments)
                .IsUnicode(false)
                .HasColumnName("OUTCOMECOMMENTS");
            entity.Property(e => e.Partylodgedby)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PARTYLODGEDBY");
            entity.Property(e => e.Permimpairamountclaimed)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("PERMIMPAIRAMOUNTCLAIMED");
            entity.Property(e => e.Permimpairpercentclaimed).HasColumnName("PERMIMPAIRPERCENTCLAIMED");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Settlementamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("SETTLEMENTAMOUNT");
            entity.Property(e => e.Settlementpercent)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("SETTLEMENTPERCENT");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmLegaldisputes)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_LEGALDISPUTE_CLAIMID");
        });

        modelBuilder.Entity<ClmLegaldisputeevent>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Legalno, e.Eventno });

            entity.ToTable("CLM_LEGALDISPUTEEVENT", tb =>
                {
                    tb.HasTrigger("auddel_CLM_LEGALDISPUTEEVENT");
                    tb.HasTrigger("audins_CLM_LEGALDISPUTEEVENT");
                    tb.HasTrigger("audupd_CLM_LEGALDISPUTEEVENT");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Legalno).HasColumnName("LEGALNO");
            entity.Property(e => e.Eventno).HasColumnName("EVENTNO");
            entity.Property(e => e.Attendees)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ATTENDEES");
            entity.Property(e => e.Comments)
                .IsUnicode(false)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Eventdate)
                .HasColumnType("datetime")
                .HasColumnName("EVENTDATE");
            entity.Property(e => e.Eventtime)
                .HasColumnType("datetime")
                .HasColumnName("EVENTTIME");
            entity.Property(e => e.Eventtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVENTTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Offeramount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("OFFERAMOUNT");
            entity.Property(e => e.Outcome)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OUTCOME");
            entity.Property(e => e.Outcomedate)
                .HasColumnType("datetime")
                .HasColumnName("OUTCOMEDATE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Venue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("VENUE");

            entity.HasOne(d => d.Document).WithMany(p => p.ClmLegaldisputeevents)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_CLM_LEGALDISPUTEEVENT_DOCUMENTID");

            entity.HasOne(d => d.ClmLegaldispute).WithMany(p => p.ClmLegaldisputeevents)
                .HasForeignKey(d => new { d.Claimid, d.Legalno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_LEGALDISPUTEEVENT_LEGALNO");
        });

        modelBuilder.Entity<ClmLegaldisputerep>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Legalno, e.Legalrepresentativeno });

            entity.ToTable("CLM_LEGALDISPUTEREP", tb =>
                {
                    tb.HasTrigger("auddel_CLM_LEGALDISPUTEREP");
                    tb.HasTrigger("audins_CLM_LEGALDISPUTEREP");
                    tb.HasTrigger("audupd_CLM_LEGALDISPUTEREP");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Legalno).HasColumnName("LEGALNO");
            entity.Property(e => e.Legalrepresentativeno).HasColumnName("LEGALREPRESENTATIVENO");
            entity.Property(e => e.Addressforservice).HasColumnName("ADDRESSFORSERVICE");
            entity.Property(e => e.Dxaddress).HasColumnName("DXADDRESS");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Locationno).HasColumnName("LOCATIONNO");
            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Preferredcontactmethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PREFERREDCONTACTMETHOD");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Representativetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPRESENTATIVETYPE");
            entity.Property(e => e.Representing)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPRESENTING");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.ClmLegaldispute).WithMany(p => p.ClmLegaldisputereps)
                .HasForeignKey(d => new { d.Claimid, d.Legalno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_LEGALDISPUTEREP_LEGALNO");
        });

        modelBuilder.Entity<ClmLegaldisputetask>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Legalno, e.Taskno });

            entity.ToTable("CLM_LEGALDISPUTETASK", tb =>
                {
                    tb.HasTrigger("auddel_CLM_LEGALDISPUTETASK");
                    tb.HasTrigger("audins_CLM_LEGALDISPUTETASK");
                    tb.HasTrigger("audupd_CLM_LEGALDISPUTETASK");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Legalno).HasColumnName("LEGALNO");
            entity.Property(e => e.Taskno).HasColumnName("TASKNO");
            entity.Property(e => e.Assignaction).HasColumnName("ASSIGNACTION");
            entity.Property(e => e.Datecompleted)
                .HasColumnType("datetime")
                .HasColumnName("DATECOMPLETED");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("DUEDATE");
            entity.Property(e => e.Enteredby).HasColumnName("ENTEREDBY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reminderdate)
                .HasColumnType("datetime")
                .HasColumnName("REMINDERDATE");
            entity.Property(e => e.Responsibilityof)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RESPONSIBILITYOF");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Timeentered)
                .HasColumnType("datetime")
                .HasColumnName("TIMEENTERED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Document).WithMany(p => p.ClmLegaldisputetasks)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_CLM_LEGALDISPUTETASK_DOCUMENTID");

            entity.HasOne(d => d.EnteredbyNavigation).WithMany(p => p.ClmLegaldisputetasks)
                .HasForeignKey(d => d.Enteredby)
                .HasConstraintName("FK_CLM_LEGALDISPUTETASK_ENTEREDBY");

            entity.HasOne(d => d.ClmLegaldispute).WithMany(p => p.ClmLegaldisputetasks)
                .HasForeignKey(d => new { d.Claimid, d.Legalno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_LEGALDISPUTETASK_LEGALNO");
        });

        modelBuilder.Entity<ClmLegaldisputetaskresp>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Legalno, e.Taskno, e.Responsibilityno });

            entity.ToTable("CLM_LEGALDISPUTETASKRESP", tb =>
                {
                    tb.HasTrigger("auddel_CLM_LEGALDISPUTETASKRES");
                    tb.HasTrigger("audins_CLM_LEGALDISPUTETASKRES");
                    tb.HasTrigger("audupd_CLM_LEGALDISPUTETASKRES");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Legalno).HasColumnName("LEGALNO");
            entity.Property(e => e.Taskno).HasColumnName("TASKNO");
            entity.Property(e => e.Responsibilityno).HasColumnName("RESPONSIBILITYNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Responsibilityofotheremail)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("RESPONSIBILITYOFOTHEREMAIL");
            entity.Property(e => e.Responsibilityofuserid).HasColumnName("RESPONSIBILITYOFUSERID");
            entity.Property(e => e.Responsibilitytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RESPONSIBILITYTYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Responsibilityofuser).WithMany(p => p.ClmLegaldisputetaskresps)
                .HasForeignKey(d => d.Responsibilityofuserid)
                .HasConstraintName("FK_CLM_LEGALDISPUTETASKRESP_RESPONSIBILITYOFUSERID");

            entity.HasOne(d => d.ClmLegaldisputetask).WithMany(p => p.ClmLegaldisputetaskresps)
                .HasForeignKey(d => new { d.Claimid, d.Legalno, d.Taskno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_LEGALDISPUTETASKRESP_TASKNO");
        });

        modelBuilder.Entity<ClmLegalentity>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_LEGALENTITY", tb =>
                {
                    tb.HasTrigger("auddel_CLM_LEGALENTITY");
                    tb.HasTrigger("audins_CLM_LEGALENTITY");
                    tb.HasTrigger("audupd_CLM_LEGALENTITY");
                });

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Coverageno).HasColumnName("COVERAGENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Legalentityid).HasColumnName("LEGALENTITYID");
            entity.Property(e => e.Policyid).HasColumnName("POLICYID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmLegalentity)
                .HasForeignKey<ClmLegalentity>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_LEGALENTITY_CLAIMID");

            entity.HasOne(d => d.Legalentity).WithMany(p => p.ClmLegalentities)
                .HasForeignKey(d => d.Legalentityid)
                .HasConstraintName("FK_CLM_LEGALENTITY_LEGALENTITYID");

            entity.HasOne(d => d.PolCoverage).WithMany(p => p.ClmLegalentities)
                .HasForeignKey(d => new { d.Policyid, d.Coverageno })
                .HasConstraintName("FK_CLM_LEGALENTITY_POLICY_COVERAGE");
        });

        modelBuilder.Entity<ClmLegalrep>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Legalrepno });

            entity.ToTable("CLM_LEGALREP", tb =>
                {
                    tb.HasTrigger("auddel_CLM_LEGALREP");
                    tb.HasTrigger("audins_CLM_LEGALREP");
                    tb.HasTrigger("audupd_CLM_LEGALREP");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Legalrepno).HasColumnName("LEGALREPNO");
            entity.Property(e => e.Certificatedate)
                .HasColumnType("datetime")
                .HasColumnName("CERTIFICATEDATE");
            entity.Property(e => e.Certificateprovided).HasColumnName("CERTIFICATEPROVIDED");
            entity.Property(e => e.Certificateuploaded).HasColumnName("CERTIFICATEUPLOADED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Lawpracticename)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("LAWPRACTICENAME");
            entity.Property(e => e.Lawpracticepostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("LAWPRACTICEPOSTCODE");
            entity.Property(e => e.Legalrepcontactno).HasColumnName("LEGALREPCONTACTNO");
            entity.Property(e => e.Legalreplocationno).HasColumnName("LEGALREPLOCATIONNO");
            entity.Property(e => e.Legalreppartyid).HasColumnName("LEGALREPPARTYID");
            entity.Property(e => e.Legalreptype).HasColumnName("LEGALREPTYPE");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmLegalreps)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_LEGALREP_CLAIMID");

            entity.HasOne(d => d.Legalrepparty).WithMany(p => p.ClmLegalreps)
                .HasForeignKey(d => d.Legalreppartyid)
                .HasConstraintName("FK_CLM_LEGALREP_LEGALREPPARTYID");

            entity.HasOne(d => d.ParLocation).WithMany(p => p.ClmLegalreps)
                .HasForeignKey(d => new { d.Legalreppartyid, d.Legalreplocationno })
                .HasConstraintName("FK_CLM_LEGALREP_LEGALREPLOCATIONNO");

            entity.HasOne(d => d.ParContact).WithMany(p => p.ClmLegalreps)
                .HasForeignKey(d => new { d.Legalreppartyid, d.Legalreplocationno, d.Legalrepcontactno })
                .HasConstraintName("FK_CLM_LEGALREP_LEGALREPCONTACTNO");
        });

        modelBuilder.Entity<ClmMedcert>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Medcertno });

            entity.ToTable("CLM_MEDCERT", tb =>
                {
                    tb.HasTrigger("WF_CLM_MEDCERT");
                    tb.HasTrigger("auddel_CLM_MEDCERT");
                    tb.HasTrigger("audins_CLM_MEDCERT");
                    tb.HasTrigger("audupd_CLM_MEDCERT");
                });

            entity.HasIndex(e => new { e.Guid, e.Medcertid }, "IX_CLM_MEDCERT_WF");

            entity.HasIndex(e => new { e.Medcertid, e.Claimid, e.Guid }, "IX_CLM_MEDCERT_WF2");

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Medcertno).HasColumnName("MEDCERTNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Medcertid).HasColumnName("MEDCERTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmMedcerts)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_MEDCERT_CLAIMID");

            entity.HasOne(d => d.Medcert).WithMany(p => p.ClmMedcerts)
                .HasForeignKey(d => d.Medcertid)
                .HasConstraintName("FK_CLM_MEDCERT_MEDCERTID");
        });

        modelBuilder.Entity<ClmMotorvehicle>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Motorvehiclenno });

            entity.ToTable("CLM_MOTORVEHICLE", tb =>
                {
                    tb.HasTrigger("auddel_CLM_MOTORVEHICLE");
                    tb.HasTrigger("audins_CLM_MOTORVEHICLE");
                    tb.HasTrigger("audupd_CLM_MOTORVEHICLE");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Motorvehiclenno).HasColumnName("MOTORVEHICLENNO");
            entity.Property(e => e.Comments)
                .IsUnicode(false)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Ctppotentialrecovery).HasColumnName("CTPPOTENTIALRECOVERY");
            entity.Property(e => e.Ctpreferencenumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CTPREFERENCENUMBER");
            entity.Property(e => e.Ctpreferraldate)
                .HasColumnType("datetime")
                .HasColumnName("CTPREFERRALDATE");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Driveratfault).HasColumnName("DRIVERATFAULT");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Liabilityacceptedbyemployer).HasColumnName("LIABILITYACCEPTEDBYEMPLOYER");
            entity.Property(e => e.Policereportnumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("POLICEREPORTNUMBER");
            entity.Property(e => e.Policereportobtained).HasColumnName("POLICEREPORTOBTAINED");
            entity.Property(e => e.Policestation)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POLICESTATION");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Vehicle1drivername)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHICLE1DRIVERNAME");
            entity.Property(e => e.Vehicle1registrationnumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("VEHICLE1REGISTRATIONNUMBER");
            entity.Property(e => e.Vehicle1registrationstate).HasColumnName("VEHICLE1REGISTRATIONSTATE");
            entity.Property(e => e.Vehicle2drivername)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHICLE2DRIVERNAME");
            entity.Property(e => e.Vehicle2registrationnumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("VEHICLE2REGISTRATIONNUMBER");
            entity.Property(e => e.Vehicle2registrationstate).HasColumnName("VEHICLE2REGISTRATIONSTATE");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmMotorvehicles)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_MOTORVEHICLE_CLAIMID");

            entity.HasOne(d => d.Document).WithMany(p => p.ClmMotorvehicles)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_CLM_MOTORVEHICLE_DOCUMENTID");
        });

        modelBuilder.Entity<ClmNominateddoctor>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Nominateddoctorno });

            entity.ToTable("CLM_NOMINATEDDOCTOR", tb =>
                {
                    tb.HasTrigger("auddel_CLM_NOMINATEDDOCTOR");
                    tb.HasTrigger("audins_CLM_NOMINATEDDOCTOR");
                    tb.HasTrigger("audupd_CLM_NOMINATEDDOCTOR");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Nominateddoctorno).HasColumnName("NOMINATEDDOCTORNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Nominateddoctorcontactno).HasColumnName("NOMINATEDDOCTORCONTACTNO");
            entity.Property(e => e.Nominateddoctorlocationno).HasColumnName("NOMINATEDDOCTORLOCATIONNO");
            entity.Property(e => e.Nominateddoctorpartyid).HasColumnName("NOMINATEDDOCTORPARTYID");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmNominateddoctors)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_NOMINATEDDOCTOR_CLAIMID");

            entity.HasOne(d => d.Nominateddoctorparty).WithMany(p => p.ClmNominateddoctors)
                .HasForeignKey(d => d.Nominateddoctorpartyid)
                .HasConstraintName("FK_CLM_NOMINATEDDOCTOR_NOMINATEDDOCTORPARTYID");

            entity.HasOne(d => d.ParLocation).WithMany(p => p.ClmNominateddoctors)
                .HasForeignKey(d => new { d.Nominateddoctorpartyid, d.Nominateddoctorlocationno })
                .HasConstraintName("FK_CLM_NOMINATEDDOCTOR_NOMINATEDDOCTORLOCATIONNO");

            entity.HasOne(d => d.ParContact).WithMany(p => p.ClmNominateddoctors)
                .HasForeignKey(d => new { d.Nominateddoctorpartyid, d.Nominateddoctorlocationno, d.Nominateddoctorcontactno })
                .HasConstraintName("FK_CLM_NOMINATEDDOCTOR_NOMINATEDDOCTORCONTACTNO");
        });

        modelBuilder.Entity<ClmOtheremployment>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Otheremploymentno });

            entity.ToTable("CLM_OTHEREMPLOYMENT", tb =>
                {
                    tb.HasTrigger("auddel_CLM_OTHEREMPLOYMENT");
                    tb.HasTrigger("audins_CLM_OTHEREMPLOYMENT");
                    tb.HasTrigger("audupd_CLM_OTHEREMPLOYMENT");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Otheremploymentno).HasColumnName("OTHEREMPLOYMENTNO");
            entity.Property(e => e.Addressline1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE1");
            entity.Property(e => e.Addressline2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE2");
            entity.Property(e => e.Addressline3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE3");
            entity.Property(e => e.Country)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Employername)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYERNAME");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.International).HasColumnName("INTERNATIONAL");
            entity.Property(e => e.Normaldaysperweek).HasColumnName("NORMALDAYSPERWEEK");
            entity.Property(e => e.Normalhoursperweek)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("NORMALHOURSPERWEEK");
            entity.Property(e => e.Phone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.Postcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Weeklyearnings)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("WEEKLYEARNINGS");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmOtheremployments)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_OTHEREMPLOYMENT_CLAIMID");
        });

        modelBuilder.Entity<ClmOtherinjurydetail>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Otherinjurydetailno });

            entity.ToTable("CLM_OTHERINJURYDETAIL", tb =>
                {
                    tb.HasTrigger("auddel_CLM_OTHERINJURYDETAIL");
                    tb.HasTrigger("audins_CLM_OTHERINJURYDETAIL");
                    tb.HasTrigger("audupd_CLM_OTHERINJURYDETAIL");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Otherinjurydetailno).HasColumnName("OTHERINJURYDETAILNO");
            entity.Property(e => e.Employername)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYERNAME");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Injurydate)
                .HasColumnType("datetime")
                .HasColumnName("INJURYDATE");
            entity.Property(e => e.Injurynature)
                .IsUnicode(false)
                .HasColumnName("INJURYNATURE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmOtherinjurydetails)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_OTHERINJURYDETAIL_CLAIMID");
        });

        modelBuilder.Entity<ClmOtherinjurysummary>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_OTHERINJURYSUMMARY", tb =>
                {
                    tb.HasTrigger("auddel_CLM_OTHERINJURYSUMMARY");
                    tb.HasTrigger("audins_CLM_OTHERINJURYSUMMARY");
                    tb.HasTrigger("audupd_CLM_OTHERINJURYSUMMARY");
                });

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Compensationclaimmade).HasColumnName("COMPENSATIONCLAIMMADE");
            entity.Property(e => e.Details)
                .IsUnicode(false)
                .HasColumnName("DETAILS");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Sufferedsimilarinjury).HasColumnName("SUFFEREDSIMILARINJURY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmOtherinjurysummary)
                .HasForeignKey<ClmOtherinjurysummary>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_OTHERINJURYSUMMARY_CLAIMID");
        });

        modelBuilder.Entity<ClmPayment>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Paymentno });

            entity.ToTable("CLM_PAYMENT", tb =>
                {
                    tb.HasTrigger("WF_CLM_PAYMENT");
                    tb.HasTrigger("WF_CLM_PAYMENT_SA");
                    tb.HasTrigger("auddel_CLM_PAYMENT");
                    tb.HasTrigger("audins_CLM_PAYMENT");
                    tb.HasTrigger("audupd_CLM_PAYMENT");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Paymentno).HasColumnName("PAYMENTNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Submissiondate)
                .HasColumnType("datetime")
                .HasColumnName("SUBMISSIONDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmPayments)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_PAYMENT_CLAIMID");

            entity.HasOne(d => d.Payment).WithMany(p => p.ClmPayments)
                .HasForeignKey(d => d.Paymentid)
                .HasConstraintName("FK_CLM_PAYMENT_PAYMENTID");
        });

        modelBuilder.Entity<ClmPaymentrestriction>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Paymentrestrictionno });

            entity.ToTable("CLM_PAYMENTRESTRICTION", tb =>
                {
                    tb.HasTrigger("auddel_CLM_PAYMENTRESTRICTION");
                    tb.HasTrigger("audins_CLM_PAYMENTRESTRICTION");
                    tb.HasTrigger("audupd_CLM_PAYMENTRESTRICTION");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Paymentrestrictionno).HasColumnName("PAYMENTRESTRICTIONNO");
            entity.Property(e => e.Allcategoriestypes).HasColumnName("ALLCATEGORIESTYPES");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datefrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEFROM");
            entity.Property(e => e.Dateto)
                .HasColumnType("datetime")
                .HasColumnName("DATETO");
            entity.Property(e => e.Enteredby).HasColumnName("ENTEREDBY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORY");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPE");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REASON");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmPaymentrestrictions)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_PAYMENTRESTRICTION_CLAIMID");

            entity.HasOne(d => d.EnteredbyNavigation).WithMany(p => p.ClmPaymentrestrictions)
                .HasForeignKey(d => d.Enteredby)
                .HasConstraintName("FK_CLM_PAYMENTRESTRICTION_ENTEREDBY");
        });

        modelBuilder.Entity<ClmPayroll>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_PAYROLL", tb =>
                {
                    tb.HasTrigger("auddel_CLM_PAYROLL");
                    tb.HasTrigger("audins_CLM_PAYROLL");
                    tb.HasTrigger("audupd_CLM_PAYROLL");
                });

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Payfrequency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYFREQUENCY");
            entity.Property(e => e.Payrollcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYROLLCODE");
            entity.Property(e => e.Payrolldayofweek).HasColumnName("PAYROLLDAYOFWEEK");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Salaryclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SALARYCLASS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmPayroll)
                .HasForeignKey<ClmPayroll>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_PAYROLL_CLAIMID");
        });

        modelBuilder.Entity<ClmPermimpairSa>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Saimpairmentno });

            entity.ToTable("CLM_PERMIMPAIR_SA", tb =>
                {
                    tb.HasTrigger("auddel_CLM_PERMIMPAIR_SA");
                    tb.HasTrigger("audins_CLM_PERMIMPAIR_SA");
                    tb.HasTrigger("audupd_CLM_PERMIMPAIR_SA");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Saimpairmentno).HasColumnName("SAIMPAIRMENTNO");
            entity.Property(e => e.Assessmentdate)
                .HasColumnType("datetime")
                .HasColumnName("ASSESSMENTDATE");
            entity.Property(e => e.Assessmentproviderid).HasColumnName("ASSESSMENTPROVIDERID");
            entity.Property(e => e.Assessmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ASSESSMENTTYPE");
            entity.Property(e => e.Diagnosis)
                .IsUnicode(false)
                .HasColumnName("DIAGNOSIS");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Examination)
                .IsUnicode(false)
                .HasColumnName("EXAMINATION");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Impairmentpercentage)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("IMPAIRMENTPERCENTAGE");
            entity.Property(e => e.Injurytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYTYPE");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Nwewhen56achecked)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("NWEWHEN56ACHECKED");
            entity.Property(e => e.Override56aentitlement).HasColumnName("OVERRIDE56AENTITLEMENT");
            entity.Property(e => e.Override56aentitlementamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OVERRIDE56AENTITLEMENTAMOUNT");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Workerrecievelumpsumelecteddate)
                .HasColumnType("datetime")
                .HasColumnName("WORKERRECIEVELUMPSUMELECTEDDATE");
            entity.Property(e => e.Workerrecievelumpsumsection56a).HasColumnName("WORKERRECIEVELUMPSUMSECTION56A");

            entity.HasOne(d => d.Assessmentprovider).WithMany(p => p.ClmPermimpairSas)
                .HasForeignKey(d => d.Assessmentproviderid)
                .HasConstraintName("FK_CLM_PERMIMPAIR_SA_ASSESSMENTPROVIDERID");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmPermimpairSas)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_PERMIMPAIR_SA_CLAIMID");

            entity.HasOne(d => d.Document).WithMany(p => p.ClmPermimpairSas)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_CLM_PERMIMPAIR_SA_DOCUMENTID");
        });

        modelBuilder.Entity<ClmPermimpaireconomicSaX>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Sapermimpairno });

            entity.ToTable("CLM_PERMIMPAIRECONOMIC_SA_X", tb =>
                {
                    tb.HasTrigger("auddel_CLM_PERMIMPAIRECONOMIC_");
                    tb.HasTrigger("audins_CLM_PERMIMPAIRECONOMIC_");
                    tb.HasTrigger("audupd_CLM_PERMIMPAIRECONOMIC_");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Sapermimpairno).HasColumnName("SAPERMIMPAIRNO");
            entity.Property(e => e.Agefactor).HasColumnName("AGEFACTOR");
            entity.Property(e => e.Compamount)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COMPAMOUNT");
            entity.Property(e => e.Deductionscost).HasColumnName("DEDUCTIONSCOST");
            entity.Property(e => e.Deductionsentitlementamount).HasColumnName("DEDUCTIONSENTITLEMENTAMOUNT");
            entity.Property(e => e.Deductionspercent).HasColumnName("DEDUCTIONSPERCENT");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hoursworkedfactor)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("HOURSWORKEDFACTOR");
            entity.Property(e => e.NonDeductionscost).HasColumnName("NON_DEDUCTIONSCOST");
            entity.Property(e => e.NonDeductionsentitlementamount).HasColumnName("NON_DEDUCTIONSENTITLEMENTAMOUNT");
            entity.Property(e => e.NonDeductionspercent).HasColumnName("NON_DEDUCTIONSPERCENT");
            entity.Property(e => e.NonPrescribedsum).HasColumnName("NON_PRESCRIBEDSUM");
            entity.Property(e => e.Prescribedsum).HasColumnName("PRESCRIBEDSUM");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.ClmPermimpairSa).WithOne(p => p.ClmPermimpaireconomicSaX)
                .HasForeignKey<ClmPermimpaireconomicSaX>(d => new { d.Claimid, d.Sapermimpairno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_PERMIMPAIRECONOMIC_SA_X_SAIMPAIRMENTNO");
        });

        modelBuilder.Entity<ClmPermimpairinjurySa>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Sapermimpairno, e.Assessedinjuryno });

            entity.ToTable("CLM_PERMIMPAIRINJURY_SA", tb =>
                {
                    tb.HasTrigger("auddel_CLM_PERMIMPAIRINJURY_SA");
                    tb.HasTrigger("audins_CLM_PERMIMPAIRINJURY_SA");
                    tb.HasTrigger("audupd_CLM_PERMIMPAIRINJURY_SA");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Sapermimpairno).HasColumnName("SAPERMIMPAIRNO");
            entity.Property(e => e.Assessedinjuryno).HasColumnName("ASSESSEDINJURYNO");
            entity.Property(e => e.Ama5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AMA5");
            entity.Property(e => e.Bodilylocation2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATION2");
            entity.Property(e => e.Bodilylocation2codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATION2CODETYPE");
            entity.Property(e => e.Bodypartsassessed)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BODYPARTSASSESSED");
            entity.Property(e => e.Compensableimpairment)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("COMPENSABLEIMPAIRMENT");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Preexistingimpairment)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("PREEXISTINGIMPAIRMENT");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Wholepersonimpairment)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("WHOLEPERSONIMPAIRMENT");
            entity.Property(e => e.Workcoverguidelines)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WORKCOVERGUIDELINES");

            entity.HasOne(d => d.ClmPermimpairSa).WithMany(p => p.ClmPermimpairinjurySas)
                .HasForeignKey(d => new { d.Claimid, d.Sapermimpairno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_PERMIMPAIRINJURY_SA_SAIMPAIRMENTNO");
        });

        modelBuilder.Entity<ClmPiawe>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Piaweno });

            entity.ToTable("CLM_PIAWE", tb =>
                {
                    tb.HasTrigger("auddel_CLM_PIAWE");
                    tb.HasTrigger("audins_CLM_PIAWE");
                    tb.HasTrigger("audupd_CLM_PIAWE");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Piaweno).HasColumnName("PIAWENO");
            entity.Property(e => e.Authorised).HasColumnName("AUTHORISED");
            entity.Property(e => e.Authorisedbyid).HasColumnName("AUTHORISEDBYID");
            entity.Property(e => e.Dateauthorised)
                .HasColumnType("datetime")
                .HasColumnName("DATEAUTHORISED");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datefinalised)
                .HasColumnType("datetime")
                .HasColumnName("DATEFINALISED");
            entity.Property(e => e.Enteredbyid).HasColumnName("ENTEREDBYID");
            entity.Property(e => e.Finalised).HasColumnName("FINALISED");
            entity.Property(e => e.Finalisedbyid).HasColumnName("FINALISEDBYID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Overrideweeksassessed).HasColumnName("OVERRIDEWEEKSASSESSED");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Authorisedby).WithMany(p => p.ClmPiaweAuthorisedbies)
                .HasForeignKey(d => d.Authorisedbyid)
                .HasConstraintName("FK_CLM_PIAWE_AUTHORISEDBYID");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmPiawes)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_PIAWE_CLAIMID");

            entity.HasOne(d => d.Enteredby).WithMany(p => p.ClmPiaweEnteredbies)
                .HasForeignKey(d => d.Enteredbyid)
                .HasConstraintName("FK_CLM_PIAWE_ENTEREDBYID");

            entity.HasOne(d => d.Finalisedby).WithMany(p => p.ClmPiaweFinalisedbies)
                .HasForeignKey(d => d.Finalisedbyid)
                .HasConstraintName("FK_CLM_PIAWE_FINALISEDBYID");
        });

        modelBuilder.Entity<ClmPiaweSa>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Piaweno });

            entity.ToTable("CLM_PIAWE_SA", tb =>
                {
                    tb.HasTrigger("auddel_CLM_PIAWE_SA");
                    tb.HasTrigger("audins_CLM_PIAWE_SA");
                    tb.HasTrigger("audupd_CLM_PIAWE_SA");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Piaweno).HasColumnName("PIAWENO");
            entity.Property(e => e.Baserateofpayaveragehours)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("BASERATEOFPAYAVERAGEHOURS");
            entity.Property(e => e.Baserateofpayaveragepaid)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("BASERATEOFPAYAVERAGEPAID");
            entity.Property(e => e.Baserateofpaytotalhours)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("BASERATEOFPAYTOTALHOURS");
            entity.Property(e => e.Baserateofpaytotalpaid)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("BASERATEOFPAYTOTALPAID");
            entity.Property(e => e.Baseweeksassessed)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("BASEWEEKSASSESSED");
            entity.Property(e => e.Calculatedpiawehours)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("CALCULATEDPIAWEHOURS");
            entity.Property(e => e.Calculatedpiawepaid)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("CALCULATEDPIAWEPAID");
            entity.Property(e => e.Dateassessedfrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEASSESSEDFROM");
            entity.Property(e => e.Dateassessedto)
                .HasColumnType("datetime")
                .HasColumnName("DATEASSESSEDTO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Includeovertime).HasColumnName("INCLUDEOVERTIME");
            entity.Property(e => e.Includepenalties).HasColumnName("INCLUDEPENALTIES");
            entity.Property(e => e.Nonpecaveragehours)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("NONPECAVERAGEHOURS");
            entity.Property(e => e.Nonpecaveragepaid)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("NONPECAVERAGEPAID");
            entity.Property(e => e.Nonpectotalhours)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("NONPECTOTALHOURS");
            entity.Property(e => e.Nonpectotalpaid)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("NONPECTOTALPAID");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Overtimeaveragehours)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OVERTIMEAVERAGEHOURS");
            entity.Property(e => e.Overtimeaveragepaid)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OVERTIMEAVERAGEPAID");
            entity.Property(e => e.Overtimetotalhours)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OVERTIMETOTALHOURS");
            entity.Property(e => e.Overtimetotalpaid)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OVERTIMETOTALPAID");
            entity.Property(e => e.Overtimeweeksassessed)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OVERTIMEWEEKSASSESSED");
            entity.Property(e => e.Penaltiesaveragehours)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("PENALTIESAVERAGEHOURS");
            entity.Property(e => e.Penaltiesaveragepaid)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("PENALTIESAVERAGEPAID");
            entity.Property(e => e.Penaltiestotalhours)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("PENALTIESTOTALHOURS");
            entity.Property(e => e.Penaltiestotalpaid)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("PENALTIESTOTALPAID");
            entity.Property(e => e.Penaltiesweeksassessed)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("PENALTIESWEEKSASSESSED");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Requestdatefrom).HasColumnName("REQUESTDATEFROM");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Totalhours)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("TOTALHOURS");
            entity.Property(e => e.Totalpaid)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("TOTALPAID");

            entity.HasOne(d => d.ClmPiawe).WithOne(p => p.ClmPiaweSa)
                .HasForeignKey<ClmPiaweSa>(d => new { d.Claimid, d.Piaweno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_PIAWE_SA_PIAWENO");
        });

        modelBuilder.Entity<ClmPiawedocument>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Piaweno, e.Documentno });

            entity.ToTable("CLM_PIAWEDOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_CLM_PIAWEDOCUMENT");
                    tb.HasTrigger("audins_CLM_PIAWEDOCUMENT");
                    tb.HasTrigger("audupd_CLM_PIAWEDOCUMENT");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Piaweno).HasColumnName("PIAWENO");
            entity.Property(e => e.Documentno).HasColumnName("DOCUMENTNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Document).WithMany(p => p.ClmPiawedocuments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_CLM_PIAWEDOCUMENT_DOCUMENTID");

            entity.HasOne(d => d.ClmPiawe).WithMany(p => p.ClmPiawedocuments)
                .HasForeignKey(d => new { d.Claimid, d.Piaweno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_PIAWEDOCUMENT_PIAWENO");
        });

        modelBuilder.Entity<ClmPiawehistory>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Piaweno, e.Piawehistoryno });

            entity.ToTable("CLM_PIAWEHISTORY", tb =>
                {
                    tb.HasTrigger("auddel_CLM_PIAWEHISTORY");
                    tb.HasTrigger("audins_CLM_PIAWEHISTORY");
                    tb.HasTrigger("audupd_CLM_PIAWEHISTORY");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Piaweno).HasColumnName("PIAWENO");
            entity.Property(e => e.Piawehistoryno)
                .HasColumnType("numeric(10, 0)")
                .HasColumnName("PIAWEHISTORYNO");
            entity.Property(e => e.Amountpaid)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("AMOUNTPAID");
            entity.Property(e => e.Datefrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEFROM");
            entity.Property(e => e.Datepaid)
                .HasColumnType("datetime")
                .HasColumnName("DATEPAID");
            entity.Property(e => e.Dateto)
                .HasColumnType("datetime")
                .HasColumnName("DATETO");
            entity.Property(e => e.Earningscategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EARNINGSCATEGORY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hoursworked)
                .HasColumnType("numeric(16, 8)")
                .HasColumnName("HOURSWORKED");
            entity.Property(e => e.Includeinhours).HasColumnName("INCLUDEINHOURS");
            entity.Property(e => e.Payrollcode)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PAYROLLCODE");
            entity.Property(e => e.Payrolldescription)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PAYROLLDESCRIPTION");
            entity.Property(e => e.Reason)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REASON");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Selected).HasColumnName("SELECTED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.ClmPiawe).WithMany(p => p.ClmPiawehistories)
                .HasForeignKey(d => new { d.Claimid, d.Piaweno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_PIAWEHISTORY_PIAWENO");
        });

        modelBuilder.Entity<ClmPiawemodifyhistory>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Piaweno, e.Modifyno });

            entity.ToTable("CLM_PIAWEMODIFYHISTORY", tb =>
                {
                    tb.HasTrigger("auddel_CLM_PIAWEMODIFYHISTORY");
                    tb.HasTrigger("audins_CLM_PIAWEMODIFYHISTORY");
                    tb.HasTrigger("audupd_CLM_PIAWEMODIFYHISTORY");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Piaweno).HasColumnName("PIAWENO");
            entity.Property(e => e.Modifyno).HasColumnName("MODIFYNO");
            entity.Property(e => e.Datemodified)
                .HasColumnType("datetime")
                .HasColumnName("DATEMODIFIED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Modifiedby).HasColumnName("MODIFIEDBY");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.ModifiedbyNavigation).WithMany(p => p.ClmPiawemodifyhistories)
                .HasForeignKey(d => d.Modifiedby)
                .HasConstraintName("FK_CLM_PIAWEMODIFYHISTORY_MODIFIEDBY");

            entity.HasOne(d => d.ClmPiawe).WithMany(p => p.ClmPiawemodifyhistories)
                .HasForeignKey(d => new { d.Claimid, d.Piaweno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_PIAWEMODIFYHISTORY_PIAWENO");
        });

        modelBuilder.Entity<ClmProvider>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Providerno });

            entity.ToTable("CLM_PROVIDER", tb =>
                {
                    tb.HasTrigger("auddel_CLM_PROVIDER");
                    tb.HasTrigger("audins_CLM_PROVIDER");
                    tb.HasTrigger("audupd_CLM_PROVIDER");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Providerno).HasColumnName("PROVIDERNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Providercontactno).HasColumnName("PROVIDERCONTACTNO");
            entity.Property(e => e.Providerlocationno).HasColumnName("PROVIDERLOCATIONNO");
            entity.Property(e => e.Providerpartyid).HasColumnName("PROVIDERPARTYID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmProviders)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_PROVIDER_CLAIMID");

            entity.HasOne(d => d.Providerparty).WithMany(p => p.ClmProviders)
                .HasForeignKey(d => d.Providerpartyid)
                .HasConstraintName("FK_CLM_PROVIDER_PROVIDERPARTYID");

            entity.HasOne(d => d.ParLocation).WithMany(p => p.ClmProviders)
                .HasForeignKey(d => new { d.Providerpartyid, d.Providerlocationno })
                .HasConstraintName("FK_CLM_PROVIDER_PROVIDERLOCATIONNO");

            entity.HasOne(d => d.ParContact).WithMany(p => p.ClmProviders)
                .HasForeignKey(d => new { d.Providerpartyid, d.Providerlocationno, d.Providercontactno })
                .HasConstraintName("FK_CLM_PROVIDER_PROVIDERCONTACTNO");
        });

        modelBuilder.Entity<ClmPurchaseauth>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Purchaseorderno, e.Purchaseauthno });

            entity.ToTable("CLM_PURCHASEAUTH", tb =>
                {
                    tb.HasTrigger("auddel_CLM_PURCHASEAUTH");
                    tb.HasTrigger("audins_CLM_PURCHASEAUTH");
                    tb.HasTrigger("audupd_CLM_PURCHASEAUTH");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Purchaseorderno).HasColumnName("PURCHASEORDERNO");
            entity.Property(e => e.Purchaseauthno).HasColumnName("PURCHASEAUTHNO");
            entity.Property(e => e.Authorised).HasColumnName("AUTHORISED");
            entity.Property(e => e.Authorisedamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("AUTHORISEDAMOUNT");
            entity.Property(e => e.Authorisedby).HasColumnName("AUTHORISEDBY");
            entity.Property(e => e.Dateauthorised)
                .HasColumnType("datetime")
                .HasColumnName("DATEAUTHORISED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Transactionid).HasColumnName("TRANSACTIONID");

            entity.HasOne(d => d.AuthorisedbyNavigation).WithMany(p => p.ClmPurchaseauths)
                .HasForeignKey(d => d.Authorisedby)
                .HasConstraintName("FK_CLM_PURCHASEAUTH_AUTHORISEDBY");

            entity.HasOne(d => d.Transaction).WithMany(p => p.ClmPurchaseauths)
                .HasForeignKey(d => d.Transactionid)
                .HasConstraintName("FK_CLM_PURCHASEAUTH_TRANSACTIONID");

            entity.HasOne(d => d.ClmPurchaseorder).WithMany(p => p.ClmPurchaseauths)
                .HasForeignKey(d => new { d.Claimid, d.Purchaseorderno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_PURCHASEAUTH_PURCHASEORDERNO");
        });

        modelBuilder.Entity<ClmPurchaseitem>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Purchaseorderno, e.Purchaseitemno });

            entity.ToTable("CLM_PURCHASEITEM", tb =>
                {
                    tb.HasTrigger("auddel_CLM_PURCHASEITEM");
                    tb.HasTrigger("audins_CLM_PURCHASEITEM");
                    tb.HasTrigger("audupd_CLM_PURCHASEITEM");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Purchaseorderno).HasColumnName("PURCHASEORDERNO");
            entity.Property(e => e.Purchaseitemno).HasColumnName("PURCHASEITEMNO");
            entity.Property(e => e.Accountid).HasColumnName("ACCOUNTID");
            entity.Property(e => e.Adjustment).HasColumnName("ADJUSTMENT");
            entity.Property(e => e.Amount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("AMOUNT");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Enteredby).HasColumnName("ENTEREDBY");
            entity.Property(e => e.Gstamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("GSTAMOUNT");
            entity.Property(e => e.Gstapplies).HasColumnName("GSTAPPLIES");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Itemnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ITEMNUMBER");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORY");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPE");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Totalamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("TOTALAMOUNT");
            entity.Property(e => e.Transactionid).HasColumnName("TRANSACTIONID");
            entity.Property(e => e.Unitprice)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("UNITPRICE");

            entity.HasOne(d => d.Account).WithMany(p => p.ClmPurchaseitems)
                .HasForeignKey(d => d.Accountid)
                .HasConstraintName("FK_CLM_PURCHASEITEM_ACCOUNTID");

            entity.HasOne(d => d.EnteredbyNavigation).WithMany(p => p.ClmPurchaseitems)
                .HasForeignKey(d => d.Enteredby)
                .HasConstraintName("FK_CLM_PURCHASEITEM_ENTEREDBY");

            entity.HasOne(d => d.Transaction).WithMany(p => p.ClmPurchaseitems)
                .HasForeignKey(d => d.Transactionid)
                .HasConstraintName("FK_CLM_PURCHASEITEM_TRANSACTIONID");

            entity.HasOne(d => d.ClmPurchaseorder).WithMany(p => p.ClmPurchaseitems)
                .HasForeignKey(d => new { d.Claimid, d.Purchaseorderno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_PURCHASEITEM_PURCHASEORDERNO");
        });

        modelBuilder.Entity<ClmPurchaseorder>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Purchaseorderno });

            entity.ToTable("CLM_PURCHASEORDER", tb =>
                {
                    tb.HasTrigger("auddel_CLM_PURCHASEORDER");
                    tb.HasTrigger("audins_CLM_PURCHASEORDER");
                    tb.HasTrigger("audupd_CLM_PURCHASEORDER");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Purchaseorderno).HasColumnName("PURCHASEORDERNO");
            entity.Property(e => e.Address1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Address3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS3");
            entity.Property(e => e.Country)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Email)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Enteredby).HasColumnName("ENTEREDBY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.International).HasColumnName("INTERNATIONAL");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Notifyviaemail).HasColumnName("NOTIFYVIAEMAIL");
            entity.Property(e => e.Otherconditions)
                .IsUnicode(false)
                .HasColumnName("OTHERCONDITIONS");
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.Postcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Providerid).HasColumnName("PROVIDERID");
            entity.Property(e => e.Providerlocationo).HasColumnName("PROVIDERLOCATIONO");
            entity.Property(e => e.Receivinglocationo).HasColumnName("RECEIVINGLOCATIONO");
            entity.Property(e => e.Receivingpartyid).HasColumnName("RECEIVINGPARTYID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Referencenumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REFERENCENUMBER");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmPurchaseorders)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_PURCHASEORDER_CLAIMID");

            entity.HasOne(d => d.EnteredbyNavigation).WithMany(p => p.ClmPurchaseorders)
                .HasForeignKey(d => d.Enteredby)
                .HasConstraintName("FK_CLM_PURCHASEORDER_ENTEREDBY");

            entity.HasOne(d => d.ParLocation).WithMany(p => p.ClmPurchaseorderParLocations)
                .HasForeignKey(d => new { d.Providerid, d.Providerlocationo })
                .HasConstraintName("FK_CLM_PURCHASEORDER_PROVIDERLOCATIONNO");

            entity.HasOne(d => d.ParLocationNavigation).WithMany(p => p.ClmPurchaseorderParLocationNavigations)
                .HasForeignKey(d => new { d.Receivingpartyid, d.Receivinglocationo })
                .HasConstraintName("FK_CLM_PURCHASEORDER_RECEIVINGLOCATIONNO");
        });

        modelBuilder.Entity<ClmRecovery>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Recoveryno });

            entity.ToTable("CLM_RECOVERY", tb =>
                {
                    tb.HasTrigger("auddel_CLM_RECOVERY");
                    tb.HasTrigger("audins_CLM_RECOVERY");
                    tb.HasTrigger("audupd_CLM_RECOVERY");
                });

            entity.HasIndex(e => e.Recoveryid, "IDX_CLM_RECOVERY_RECOVERYID");

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Recoveryno).HasColumnName("RECOVERYNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Recoveryid).HasColumnName("RECOVERYID");
            entity.Property(e => e.Submissiondate)
                .HasColumnType("datetime")
                .HasColumnName("SUBMISSIONDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmRecoveries)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_RECOVERY_CLAIMID");

            entity.HasOne(d => d.Recovery).WithMany(p => p.ClmRecoveries)
                .HasForeignKey(d => d.Recoveryid)
                .HasConstraintName("FK_CLM_RECOVERY_RECOVERYID");
        });

        modelBuilder.Entity<ClmRecoveryestimate>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Recoveryestimateno });

            entity.ToTable("CLM_RECOVERYESTIMATE", tb =>
                {
                    tb.HasTrigger("auddel_CLM_RECOVERYESTIMATE");
                    tb.HasTrigger("audins_CLM_RECOVERYESTIMATE");
                    tb.HasTrigger("audupd_CLM_RECOVERYESTIMATE");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Recoveryestimateno).HasColumnName("RECOVERYESTIMATENO");
            entity.Property(e => e.Changedbyuserid).HasColumnName("CHANGEDBYUSERID");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMECHANGED");
            entity.Property(e => e.Estimatedrecoveryamount)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("ESTIMATEDRECOVERYAMOUNT");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REASON");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Recoveryestimatecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECOVERYESTIMATECATEGORY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Transactionid).HasColumnName("TRANSACTIONID");

            entity.HasOne(d => d.Changedbyuser).WithMany(p => p.ClmRecoveryestimates)
                .HasForeignKey(d => d.Changedbyuserid)
                .HasConstraintName("FK_CLM_RECOVERYESTIMATE_CHANGEDBYUSERID");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmRecoveryestimates)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_RECOVERYESTIMATE_CLAIMID");

            entity.HasOne(d => d.Transaction).WithMany(p => p.ClmRecoveryestimates)
                .HasForeignKey(d => d.Transactionid)
                .HasConstraintName("FK_CLM_RECOVERYESTIMATE_TRANSACTIONID");
        });

        modelBuilder.Entity<ClmReferral>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Referralno });

            entity.ToTable("CLM_REFERRAL", tb =>
                {
                    tb.HasTrigger("WF_CLM_REFERRAL");
                    tb.HasTrigger("auddel_CLM_REFERRAL");
                    tb.HasTrigger("audins_CLM_REFERRAL");
                    tb.HasTrigger("audupd_CLM_REFERRAL");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Referralno).HasColumnName("REFERRALNO");
            entity.Property(e => e.Comments)
                .IsUnicode(false)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Dateofappointment)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFAPPOINTMENT");
            entity.Property(e => e.Failedtoattend).HasColumnName("FAILEDTOATTEND");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Providerpartyid).HasColumnName("PROVIDERPARTYID");
            entity.Property(e => e.Reasonfailedtoattend)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("REASONFAILEDTOATTEND");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Referraltypecodevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REFERRALTYPECODEVALUE");
            entity.Property(e => e.Timeofappointment)
                .HasColumnType("datetime")
                .HasColumnName("TIMEOFAPPOINTMENT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Venue)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("VENUE");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmReferrals)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_REFERRAL_CLAIMID");

            entity.HasOne(d => d.Providerparty).WithMany(p => p.ClmReferrals)
                .HasForeignKey(d => d.Providerpartyid)
                .HasConstraintName("FK_CLM_REFERRAL_PROVIDERPARTYID");
        });

        modelBuilder.Entity<ClmRegistration>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_REGISTRATION", tb =>
                {
                    tb.HasTrigger("WF_CLM_REGISTRATION");
                    tb.HasTrigger("auddel_CLM_REGISTRATION");
                    tb.HasTrigger("audins_CLM_REGISTRATION");
                    tb.HasTrigger("audupd_CLM_REGISTRATION");
                });

            entity.HasIndex(e => e.Registration, "IDX_CLM_REGISTRATION_REG");

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Dateregistrationchanged)
                .HasColumnType("datetime")
                .HasColumnName("DATEREGISTRATIONCHANGED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REASON");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Registration)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REGISTRATION");
            entity.Property(e => e.Registrationdate)
                .HasColumnType("datetime")
                .HasColumnName("REGISTRATIONDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.ChangedbyNavigation).WithMany(p => p.ClmRegistrations)
                .HasForeignKey(d => d.Changedby)
                .HasConstraintName("FK_CLM_REGISTRATION_CHANGEDBY");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmRegistration)
                .HasForeignKey<ClmRegistration>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_REGISTRATION_CLAIMID");
        });

        modelBuilder.Entity<ClmRegistrationhistory>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Registrationno });

            entity.ToTable("CLM_REGISTRATIONHISTORY", tb =>
                {
                    tb.HasTrigger("auddel_CLM_REGISTRATIONHISTORY");
                    tb.HasTrigger("audins_CLM_REGISTRATIONHISTORY");
                    tb.HasTrigger("audupd_CLM_REGISTRATIONHISTORY");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Registrationno).HasColumnName("REGISTRATIONNO");
            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Dateregistrationchanged)
                .HasColumnType("datetime")
                .HasColumnName("DATEREGISTRATIONCHANGED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REASON");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Registration)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REGISTRATION");
            entity.Property(e => e.Registrationdate)
                .HasColumnType("datetime")
                .HasColumnName("REGISTRATIONDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.ChangedbyNavigation).WithMany(p => p.ClmRegistrationhistories)
                .HasForeignKey(d => d.Changedby)
                .HasConstraintName("FK_CLM_REGISTRATIONHISTORY_CHANGEDBY");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmRegistrationhistories)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_REGISTRATIONHISTORY_CLAIMID");
        });

        modelBuilder.Entity<ClmRehab>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Rehabno });

            entity.ToTable("CLM_REHAB", tb =>
                {
                    tb.HasTrigger("WF_CLM_REHAB_X");
                    tb.HasTrigger("auddel_CLM_REHAB");
                    tb.HasTrigger("audins_CLM_REHAB");
                    tb.HasTrigger("audupd_CLM_REHAB");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Rehabno).HasColumnName("REHABNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Rehabid).HasColumnName("REHABID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmRehabs)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_REHAB_CLAIMID");

            entity.HasOne(d => d.Rehab).WithMany(p => p.ClmRehabs)
                .HasForeignKey(d => d.Rehabid)
                .HasConstraintName("FK_CLM_REHAB_REHABID");
        });

        modelBuilder.Entity<ClmRehabnote>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Rehabnoteno });

            entity.ToTable("CLM_REHABNOTE", tb =>
                {
                    tb.HasTrigger("WF_CLM_REHABNOTE");
                    tb.HasTrigger("auddel_CLM_REHABNOTE");
                    tb.HasTrigger("audins_CLM_REHABNOTE");
                    tb.HasTrigger("audupd_CLM_REHABNOTE");
                });

            entity.HasIndex(e => e.Filenoteid, "IDX_CLM_REHABNOTE_FILENOTEID");

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Rehabnoteno).HasColumnName("REHABNOTENO");
            entity.Property(e => e.Filenoteid).HasColumnName("FILENOTEID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmRehabnotes)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_REHABNOTE_CLAIMID");

            entity.HasOne(d => d.Filenote).WithMany(p => p.ClmRehabnotes)
                .HasForeignKey(d => d.Filenoteid)
                .HasConstraintName("FK_CLM_REHABNOTE_FILENOTEID");
        });

        modelBuilder.Entity<ClmRehabstatus>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_REHABSTATUS", tb =>
                {
                    tb.HasTrigger("auddel_CLM_REHABSTATUS");
                    tb.HasTrigger("audins_CLM_REHABSTATUS");
                    tb.HasTrigger("audupd_CLM_REHABSTATUS");
                });

            entity.HasIndex(e => e.Rehabstatus, "IDX_CLM_REHABSTATUS_REHABSTAT");

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Daterehabstatuschanged)
                .HasColumnType("datetime")
                .HasColumnName("DATEREHABSTATUSCHANGED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Rehabstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REHABSTATUS");
            entity.Property(e => e.Rehabstatuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REHABSTATUSCODETYPE");
            entity.Property(e => e.Rehabstatusdate)
                .HasColumnType("datetime")
                .HasColumnName("REHABSTATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.ChangedbyNavigation).WithMany(p => p.ClmRehabstatuses)
                .HasForeignKey(d => d.Changedby)
                .HasConstraintName("FK_CLM_REHABSTATUS_CHANGEDBY");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmRehabstatus)
                .HasForeignKey<ClmRehabstatus>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_REHABSTATUS_CLAIMID");
        });

        modelBuilder.Entity<ClmRehabstatushistory>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Rehabstatusno });

            entity.ToTable("CLM_REHABSTATUSHISTORY", tb =>
                {
                    tb.HasTrigger("WF_CLM_REHABSTATUSHISTORY");
                    tb.HasTrigger("auddel_CLM_REHABSTATUSHISTORY");
                    tb.HasTrigger("audins_CLM_REHABSTATUSHISTORY");
                    tb.HasTrigger("audupd_CLM_REHABSTATUSHISTORY");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Rehabstatusno).HasColumnName("REHABSTATUSNO");
            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Daterehabstatuschanged)
                .HasColumnType("datetime")
                .HasColumnName("DATEREHABSTATUSCHANGED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Rehabstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REHABSTATUS");
            entity.Property(e => e.Rehabstatuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REHABSTATUSCODETYPE");
            entity.Property(e => e.Rehabstatusdate)
                .HasColumnType("datetime")
                .HasColumnName("REHABSTATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.ChangedbyNavigation).WithMany(p => p.ClmRehabstatushistories)
                .HasForeignKey(d => d.Changedby)
                .HasConstraintName("FK_CLM_REHABSTATUSHISTORY_CHANGEDBY");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmRehabstatushistories)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_REHABSTATUSHISTORY_CLAIMID");
        });

        modelBuilder.Entity<ClmRiskassessment>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Riskassessmentno });

            entity.ToTable("CLM_RISKASSESSMENT", tb =>
                {
                    tb.HasTrigger("WF_CLM_RISKASSESSMENT");
                    tb.HasTrigger("auddel_CLM_RISKASSESSMENT");
                    tb.HasTrigger("audins_CLM_RISKASSESSMENT");
                    tb.HasTrigger("audupd_CLM_RISKASSESSMENT");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Riskassessmentno).HasColumnName("RISKASSESSMENTNO");
            entity.Property(e => e.Casemanagementcomments)
                .IsUnicode(false)
                .HasColumnName("CASEMANAGEMENTCOMMENTS");
            entity.Property(e => e.Casemanagementscore).HasColumnName("CASEMANAGEMENTSCORE");
            entity.Property(e => e.Claimrating)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMRATING");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Dateofriskassessment)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFRISKASSESSMENT");
            entity.Property(e => e.Employeecomments)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEECOMMENTS");
            entity.Property(e => e.Employeescore).HasColumnName("EMPLOYEESCORE");
            entity.Property(e => e.Employmentcomments)
                .IsUnicode(false)
                .HasColumnName("EMPLOYMENTCOMMENTS");
            entity.Property(e => e.Employmentscore).HasColumnName("EMPLOYMENTSCORE");
            entity.Property(e => e.Enteredbyuserid).HasColumnName("ENTEREDBYUSERID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Legalcomments)
                .IsUnicode(false)
                .HasColumnName("LEGALCOMMENTS");
            entity.Property(e => e.Legalscore).HasColumnName("LEGALSCORE");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Psychosocialcomments)
                .IsUnicode(false)
                .HasColumnName("PSYCHOSOCIALCOMMENTS");
            entity.Property(e => e.Psychosocialscore).HasColumnName("PSYCHOSOCIALSCORE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Rehabilitationcomments)
                .IsUnicode(false)
                .HasColumnName("REHABILITATIONCOMMENTS");
            entity.Property(e => e.Rehabilitationscore).HasColumnName("REHABILITATIONSCORE");
            entity.Property(e => e.Riskassessmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RISKASSESSMENTTYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Totalscore).HasColumnName("TOTALSCORE");
            entity.Property(e => e.Treatmentproviderscomments)
                .IsUnicode(false)
                .HasColumnName("TREATMENTPROVIDERSCOMMENTS");
            entity.Property(e => e.Treatmentprovidersscore).HasColumnName("TREATMENTPROVIDERSSCORE");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmRiskassessments)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_RISKASSESSMENT_CLAIMID");

            entity.HasOne(d => d.Enteredbyuser).WithMany(p => p.ClmRiskassessments)
                .HasForeignKey(d => d.Enteredbyuserid)
                .HasConstraintName("FK_CLM_RISKASSESSMENT_ENTEREDEDBYUSERID");
        });

        modelBuilder.Entity<ClmRiskassessmentdoc>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Riskassessmentno, e.Documentno });

            entity.ToTable("CLM_RISKASSESSMENTDOCS", tb =>
                {
                    tb.HasTrigger("auddel_CLM_RISKASSESSMENTDOCS");
                    tb.HasTrigger("audins_CLM_RISKASSESSMENTDOCS");
                    tb.HasTrigger("audupd_CLM_RISKASSESSMENTDOCS");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Riskassessmentno).HasColumnName("RISKASSESSMENTNO");
            entity.Property(e => e.Documentno).HasColumnName("DOCUMENTNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.ClmRiskassessmentdocs)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_CLM_RISKASSESSMENTDOCS_DOCUMENTID");

            entity.HasOne(d => d.ClmRiskassessment).WithMany(p => p.ClmRiskassessmentdocs)
                .HasForeignKey(d => new { d.Claimid, d.Riskassessmentno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_RISKASSESSMENTDOCS_RISKASSESSMENTNO");
        });

        modelBuilder.Entity<ClmRiskassessmentfactor>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Riskassessmentno, e.Factorno });

            entity.ToTable("CLM_RISKASSESSMENTFACTOR", tb =>
                {
                    tb.HasTrigger("auddel_CLM_RISKASSESSMENTFACTO");
                    tb.HasTrigger("audins_CLM_RISKASSESSMENTFACTO");
                    tb.HasTrigger("audupd_CLM_RISKASSESSMENTFACTO");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Riskassessmentno).HasColumnName("RISKASSESSMENTNO");
            entity.Property(e => e.Factorno).HasColumnName("FACTORNO");
            entity.Property(e => e.Factor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FACTOR");
            entity.Property(e => e.Factorcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FACTORCODETYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.ClmRiskassessment).WithMany(p => p.ClmRiskassessmentfactors)
                .HasForeignKey(d => new { d.Claimid, d.Riskassessmentno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_RISKASSESSMENTFACTOR_RISKASSESSMENTNO");
        });

        modelBuilder.Entity<ClmRole>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Roleno });

            entity.ToTable("CLM_ROLE", tb =>
                {
                    tb.HasTrigger("auddel_CLM_ROLE");
                    tb.HasTrigger("audins_CLM_ROLE");
                    tb.HasTrigger("audupd_CLM_ROLE");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Roleno).HasColumnName("ROLENO");
            entity.Property(e => e.Deleted).HasColumnName("DELETED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Roletype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLETYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Userid).HasColumnName("USERID");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmRoles)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_ROLE_CLAIMID");

            entity.HasOne(d => d.User).WithMany(p => p.ClmRoles)
                .HasForeignKey(d => d.Userid)
                .HasConstraintName("FK_CLM_ROLE_USERID");
        });

        modelBuilder.Entity<ClmRolehistory>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Roleno, e.Rolehistoryno });

            entity.ToTable("CLM_ROLEHISTORY", tb =>
                {
                    tb.HasTrigger("WF_CLM_ROLEHISTORY");
                    tb.HasTrigger("auddel_CLM_ROLEHISTORY");
                    tb.HasTrigger("audins_CLM_ROLEHISTORY");
                    tb.HasTrigger("audupd_CLM_ROLEHISTORY");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Roleno).HasColumnName("ROLENO");
            entity.Property(e => e.Rolehistoryno).HasColumnName("ROLEHISTORYNO");
            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Daterolechanged)
                .HasColumnType("datetime")
                .HasColumnName("DATEROLECHANGED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Roletype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLETYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Userid).HasColumnName("USERID");

            entity.HasOne(d => d.ChangedbyNavigation).WithMany(p => p.ClmRolehistoryChangedbyNavigations)
                .HasForeignKey(d => d.Changedby)
                .HasConstraintName("FK_CLM_ROLEHISTORY_CHANGEDBY");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmRolehistories)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_ROLEHISTORY_CLAIMID");

            entity.HasOne(d => d.User).WithMany(p => p.ClmRolehistoryUsers)
                .HasForeignKey(d => d.Userid)
                .HasConstraintName("FK_CLM_ROLEHISTORY_USERID");

            entity.HasOne(d => d.ClmRole).WithMany(p => p.ClmRolehistories)
                .HasForeignKey(d => new { d.Claimid, d.Roleno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_ROLEHISTORY_ROLENO");
        });

        modelBuilder.Entity<ClmRtwassessmentX>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Rtwassessmentno });

            entity.ToTable("CLM_RTWASSESSMENT_X", tb =>
                {
                    tb.HasTrigger("WF_CLM_RTWASSESSMENT_X");
                    tb.HasTrigger("auddel_CLM_RTWASSESSMENT_X");
                    tb.HasTrigger("audins_CLM_RTWASSESSMENT_X");
                    tb.HasTrigger("audupd_CLM_RTWASSESSMENT_X");
                });

            entity.HasIndex(e => e.Guid, "IDX_CLM_RTWASSESSMENT_X_GUID");

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Rtwassessmentno).HasColumnName("RTWASSESSMENTNO");
            entity.Property(e => e.Assessmentoutcome)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ASSESSMENTOUTCOME");
            entity.Property(e => e.Assessmentstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ASSESSMENTSTATUS");
            entity.Property(e => e.Assessmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ASSESSMENTTYPE");
            entity.Property(e => e.Comments)
                .IsUnicode(false)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Completiondate)
                .HasColumnType("datetime")
                .HasColumnName("COMPLETIONDATE");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Rtwconsultant).HasColumnName("RTWCONSULTANT");
            entity.Property(e => e.Rtwproviderid).HasColumnName("RTWPROVIDERID");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmRtwassessmentXes)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_RTWASSESSMENT_X_CLAIMID");

            entity.HasOne(d => d.Document).WithMany(p => p.ClmRtwassessmentXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_CLM_RTWASSESSMENT_X_DOCUMENTID");

            entity.HasOne(d => d.RtwconsultantNavigation).WithMany(p => p.ClmRtwassessmentXes)
                .HasForeignKey(d => d.Rtwconsultant)
                .HasConstraintName("FK_CLM_RTWASSESSMENT_X_RTWCONSULTANT");

            entity.HasOne(d => d.Rtwprovider).WithMany(p => p.ClmRtwassessmentXes)
                .HasForeignKey(d => d.Rtwproviderid)
                .HasConstraintName("FK_CLM_RTWASSESSMENT_X_RTWPROVIDERID");
        });

        modelBuilder.Entity<ClmRtwstatus>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_RTWSTATUS", tb =>
                {
                    tb.HasTrigger("auddel_CLM_RTWSTATUS");
                    tb.HasTrigger("audins_CLM_RTWSTATUS");
                    tb.HasTrigger("audupd_CLM_RTWSTATUS");
                });

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Datertwstatuschanged)
                .HasColumnType("datetime")
                .HasColumnName("DATERTWSTATUSCHANGED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Rtwstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RTWSTATUS");
            entity.Property(e => e.Rtwstatuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RTWSTATUSCODETYPE");
            entity.Property(e => e.Rtwstatusdate)
                .HasColumnType("datetime")
                .HasColumnName("RTWSTATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.ChangedbyNavigation).WithMany(p => p.ClmRtwstatuses)
                .HasForeignKey(d => d.Changedby)
                .HasConstraintName("FK_CLM_RTWSTATUS_CHANGEDBY");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmRtwstatus)
                .HasForeignKey<ClmRtwstatus>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_RTWSTATUS_CLAIMID");
        });

        modelBuilder.Entity<ClmRtwstatushistory>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Rtwstatusno });

            entity.ToTable("CLM_RTWSTATUSHISTORY", tb =>
                {
                    tb.HasTrigger("WF_CLM_RTWSTATUSHISTORY");
                    tb.HasTrigger("auddel_CLM_RTWSTATUSHISTORY");
                    tb.HasTrigger("audins_CLM_RTWSTATUSHISTORY");
                    tb.HasTrigger("audupd_CLM_RTWSTATUSHISTORY");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Rtwstatusno).HasColumnName("RTWSTATUSNO");
            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Datertwstatuschanged)
                .HasColumnType("datetime")
                .HasColumnName("DATERTWSTATUSCHANGED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Rtwstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RTWSTATUS");
            entity.Property(e => e.Rtwstatuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RTWSTATUSCODETYPE");
            entity.Property(e => e.Rtwstatusdate)
                .HasColumnType("datetime")
                .HasColumnName("RTWSTATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.ChangedbyNavigation).WithMany(p => p.ClmRtwstatushistories)
                .HasForeignKey(d => d.Changedby)
                .HasConstraintName("FK_CLM_RTWSTATUSHISTORY_CHANGEDBY");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmRtwstatushistories)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_RTWSTATUSHISTORY_CLAIMID");
        });

        modelBuilder.Entity<ClmSadetailsSa>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_SADETAILS_SA", tb =>
                {
                    tb.HasTrigger("auddel_CLM_SADETAILS_SA");
                    tb.HasTrigger("audins_CLM_SADETAILS_SA");
                    tb.HasTrigger("audupd_CLM_SADETAILS_SA");
                });

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Dateoffirstincapacity)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFFIRSTINCAPACITY");
            entity.Property(e => e.Datetransitioned)
                .HasColumnType("datetime")
                .HasColumnName("DATETRANSITIONED");
            entity.Property(e => e.Dordischargedate)
                .HasColumnType("datetime")
                .HasColumnName("DORDISCHARGEDATE");
            entity.Property(e => e.Dordischargenweamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("DORDISCHARGENWEAMOUNT");
            entity.Property(e => e.Dordischargeweeklyamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("DORDISCHARGEWEEKLYAMOUNT");
            entity.Property(e => e.Futuremedicalexpensesapproved).HasColumnName("FUTUREMEDICALEXPENSESAPPROVED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Lumpsumdatedischarged)
                .HasColumnType("datetime")
                .HasColumnName("LUMPSUMDATEDISCHARGED");
            entity.Property(e => e.Rdidischargedate)
                .HasColumnType("datetime")
                .HasColumnName("RDIDISCHARGEDATE");
            entity.Property(e => e.Rdidischargenweamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("RDIDISCHARGENWEAMOUNT");
            entity.Property(e => e.Rdidischargeseriouslyinjured).HasColumnName("RDIDISCHARGESERIOUSLYINJURED");
            entity.Property(e => e.Rdidischargeweeklyamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("RDIDISCHARGEWEEKLYAMOUNT");
            entity.Property(e => e.Rdmdischargedate)
                .HasColumnType("datetime")
                .HasColumnName("RDMDISCHARGEDATE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Saseriousinjury).HasColumnName("SASERIOUSINJURY");
            entity.Property(e => e.Seriousinjuryassessmentdate)
                .HasColumnType("datetime")
                .HasColumnName("SERIOUSINJURYASSESSMENTDATE");
            entity.Property(e => e.Swsaadvisorydate)
                .HasColumnType("datetime")
                .HasColumnName("SWSAADVISORYDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Totalweekspaidattransition).HasColumnName("TOTALWEEKSPAIDATTRANSITION");
            entity.Property(e => e.Transitioncategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRANSITIONCATEGORY");
            entity.Property(e => e.Transitiondesignateddate)
                .HasColumnType("datetime")
                .HasColumnName("TRANSITIONDESIGNATEDDATE");
            entity.Property(e => e.Transitioned).HasColumnName("TRANSITIONED");
            entity.Property(e => e.Workercommonlawdecision)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WORKERCOMMONLAWDECISION");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmSadetailsSa)
                .HasForeignKey<ClmSadetailsSa>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_SADETAILS_SA_CLAIMID");
        });

        modelBuilder.Entity<ClmSecurityX>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Claimid });

            entity.ToTable("CLM_SECURITY_X", "secure");

            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Versionnumber).HasColumnName("VERSIONNUMBER");
        });

        modelBuilder.Entity<ClmSecurityXBak>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CLM_SECURITY_X_BAK", "secure");

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Teamid).HasColumnName("TEAMID");
            entity.Property(e => e.Versionnumber).HasColumnName("VERSIONNUMBER");
        });

        modelBuilder.Entity<ClmServiceX>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Serviceno });

            entity.ToTable("CLM_SERVICE_X", tb =>
                {
                    tb.HasTrigger("auddel_CLM_SERVICE_X");
                    tb.HasTrigger("audins_CLM_SERVICE_X");
                    tb.HasTrigger("audupd_CLM_SERVICE_X");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Serviceno).HasColumnName("SERVICENO");
            entity.Property(e => e.Billabletimeunits)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("BILLABLETIMEUNITS");
            entity.Property(e => e.Comments)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Dateofservice)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFSERVICE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Nonbillabletimeunits)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("NONBILLABLETIMEUNITS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Servicesubtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SERVICESUBTYPE");
            entity.Property(e => e.Simsuser).HasColumnName("SIMSUSER");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Typeofservice)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TYPEOFSERVICE");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmServiceXes)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_SERVICE_X_CLAIMID");

            entity.HasOne(d => d.SimsuserNavigation).WithMany(p => p.ClmServiceXes)
                .HasForeignKey(d => d.Simsuser)
                .HasConstraintName("FK_CLM_SERVICE_X_SIMSUSER");
        });

        modelBuilder.Entity<ClmSmsmessage>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Smsrecipientno, e.Smsmessageno }).HasName("PK_CLM_SMSMESSAGE_CLAIMID_EMAILNO");

            entity.ToTable("CLM_SMSMESSAGE", tb =>
                {
                    tb.HasTrigger("auddel_CLM_SMSMESSAGE");
                    tb.HasTrigger("audins_CLM_SMSMESSAGE");
                    tb.HasTrigger("audupd_CLM_SMSMESSAGE");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Smsrecipientno).HasColumnName("SMSRECIPIENTNO");
            entity.Property(e => e.Smsmessageno).HasColumnName("SMSMESSAGENO");
            entity.Property(e => e.Datesent)
                .HasColumnType("datetime")
                .HasColumnName("DATESENT");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Message)
                .HasMaxLength(765)
                .IsUnicode(false)
                .HasColumnName("MESSAGE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Senderuserid).HasColumnName("SENDERUSERID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdatetime)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATETIME");
            entity.Property(e => e.Timesent)
                .HasColumnType("datetime")
                .HasColumnName("TIMESENT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Senderuser).WithMany(p => p.ClmSmsmessages)
                .HasForeignKey(d => d.Senderuserid)
                .HasConstraintName("FK_CLM_SMSMESSAGE_SENDERUSERID");

            entity.HasOne(d => d.ClmSmsrecipient).WithMany(p => p.ClmSmsmessages)
                .HasForeignKey(d => new { d.Claimid, d.Smsrecipientno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_SMSMESSAGE_SMSRECIPIENTNO");
        });

        modelBuilder.Entity<ClmSmsrecipient>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Smsrecipientno }).HasName("PK_CLM_SMSRECIPIENT_CLAIMID_EMAILNO");

            entity.ToTable("CLM_SMSRECIPIENT", tb =>
                {
                    tb.HasTrigger("auddel_CLM_SMSRECIPIENT");
                    tb.HasTrigger("audins_CLM_SMSRECIPIENT");
                    tb.HasTrigger("audupd_CLM_SMSRECIPIENT");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Smsrecipientno).HasColumnName("SMSRECIPIENTNO");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Enteredby).HasColumnName("ENTEREDBY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Mobile)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MOBILE");
            entity.Property(e => e.Recipient)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("RECIPIENT");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timeentered)
                .HasColumnType("datetime")
                .HasColumnName("TIMEENTERED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmSmsrecipients)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_SMSRECIPIENT_CLAIMID");

            entity.HasOne(d => d.EnteredbyNavigation).WithMany(p => p.ClmSmsrecipients)
                .HasForeignKey(d => d.Enteredby)
                .HasConstraintName("FK_CLM_SMSRECIPIENT_ENTEREDBY");
        });

        modelBuilder.Entity<ClmStatus>(entity =>
        {
            entity.HasKey(e => e.Claimid);

            entity.ToTable("CLM_STATUS", tb =>
                {
                    tb.HasTrigger("auddel_CLM_STATUS");
                    tb.HasTrigger("audins_CLM_STATUS");
                    tb.HasTrigger("audupd_CLM_STATUS");
                });

            entity.HasIndex(e => e.Status, "IDX_CLM_STATUS_STATUS");

            entity.Property(e => e.Claimid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Datestatuschanged)
                .HasColumnType("datetime")
                .HasColumnName("DATESTATUSCHANGED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REASON");
            entity.Property(e => e.Reasoncodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REASONCODETYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUSCODETYPE");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.ChangedbyNavigation).WithMany(p => p.ClmStatuses)
                .HasForeignKey(d => d.Changedby)
                .HasConstraintName("FK_CLM_STATUS_CHANGEDBY");

            entity.HasOne(d => d.Claim).WithOne(p => p.ClmStatus)
                .HasForeignKey<ClmStatus>(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_STATUS_CLAIMID");
        });

        modelBuilder.Entity<ClmStatushistory>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Statusno });

            entity.ToTable("CLM_STATUSHISTORY", tb =>
                {
                    tb.HasTrigger("WF_CLM_STATUSHISTORY");
                    tb.HasTrigger("auddel_CLM_STATUSHISTORY");
                    tb.HasTrigger("audins_CLM_STATUSHISTORY");
                    tb.HasTrigger("audupd_CLM_STATUSHISTORY");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Statusno).HasColumnName("STATUSNO");
            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Datestatuschanged)
                .HasColumnType("datetime")
                .HasColumnName("DATESTATUSCHANGED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REASON");
            entity.Property(e => e.Reasoncodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REASONCODETYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUSCODETYPE");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.ChangedbyNavigation).WithMany(p => p.ClmStatushistories)
                .HasForeignKey(d => d.Changedby)
                .HasConstraintName("FK_CLM_STATUSHISTORY_CHANGEDBY");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmStatushistories)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_STATUSHISTORY_CLAIMID");
        });

        modelBuilder.Entity<ClmSurgerySa>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Sasurgeryno });

            entity.ToTable("CLM_SURGERY_SA", tb =>
                {
                    tb.HasTrigger("auddel_CLM_SURGERY_SA");
                    tb.HasTrigger("audins_CLM_SURGERY_SA");
                    tb.HasTrigger("audupd_CLM_SURGERY_SA");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Sasurgeryno).HasColumnName("SASURGERYNO");
            entity.Property(e => e.Comments)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Estimatedfitdate)
                .HasColumnType("datetime")
                .HasColumnName("ESTIMATEDFITDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Injuryrelated).HasColumnName("INJURYRELATED");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Surgerydate)
                .HasColumnType("datetime")
                .HasColumnName("SURGERYDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmSurgerySas)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_SURGERY_SA_CLAIMID");
        });

        modelBuilder.Entity<ClmTreatment>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Treatmentno });

            entity.ToTable("CLM_TREATMENT", tb =>
                {
                    tb.HasTrigger("WF_CLM_TREATMENT");
                    tb.HasTrigger("auddel_CLM_TREATMENT");
                    tb.HasTrigger("audins_CLM_TREATMENT");
                    tb.HasTrigger("audupd_CLM_TREATMENT");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Treatmentno).HasColumnName("TREATMENTNO");
            entity.Property(e => e.Accountid).HasColumnName("ACCOUNTID");
            entity.Property(e => e.Amountapproved)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("AMOUNTAPPROVED");
            entity.Property(e => e.Amountrequested)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("AMOUNTREQUESTED");
            entity.Property(e => e.Authorisedby).HasColumnName("AUTHORISEDBY");
            entity.Property(e => e.Dateauthorised)
                .HasColumnType("datetime")
                .HasColumnName("DATEAUTHORISED");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Daterecommendationapproved)
                .HasColumnType("datetime")
                .HasColumnName("DATERECOMMENDATIONAPPROVED");
            entity.Property(e => e.Enteredby).HasColumnName("ENTEREDBY");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("FROMDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Itemcodes)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ITEMCODES");
            entity.Property(e => e.Noexpiry).HasColumnName("NOEXPIRY");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORY");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPE");
            entity.Property(e => e.Providerid).HasColumnName("PROVIDERID");
            entity.Property(e => e.Purchaseorder).HasColumnName("PURCHASEORDER");
            entity.Property(e => e.Purchaseorderno).HasColumnName("PURCHASEORDERNO");
            entity.Property(e => e.Recommendedby).HasColumnName("RECOMMENDEDBY");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Referencenumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("REFERENCENUMBER");
            entity.Property(e => e.Servicesapproved).HasColumnName("SERVICESAPPROVED");
            entity.Property(e => e.Servicesrequested).HasColumnName("SERVICESREQUESTED");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statuschangeby).HasColumnName("STATUSCHANGEBY");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODATE");

            entity.HasOne(d => d.Account).WithMany(p => p.ClmTreatments)
                .HasForeignKey(d => d.Accountid)
                .HasConstraintName("FK_CLM_TREATMENT_ACCOUNTID");

            entity.HasOne(d => d.AuthorisedbyNavigation).WithMany(p => p.ClmTreatmentAuthorisedbyNavigations)
                .HasForeignKey(d => d.Authorisedby)
                .HasConstraintName("FK_CLM_TREATMENT_AUTHORISEDBY");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmTreatments)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_TREATMENT_CLAIMID");

            entity.HasOne(d => d.EnteredbyNavigation).WithMany(p => p.ClmTreatmentEnteredbyNavigations)
                .HasForeignKey(d => d.Enteredby)
                .HasConstraintName("FK_CLM_TREATMENT_ENTEREDBY");

            entity.HasOne(d => d.Provider).WithMany(p => p.ClmTreatments)
                .HasForeignKey(d => d.Providerid)
                .HasConstraintName("FK_CLM_TREATMENT_PROVIDERID");

            entity.HasOne(d => d.StatuschangebyNavigation).WithMany(p => p.ClmTreatmentStatuschangebyNavigations)
                .HasForeignKey(d => d.Statuschangeby)
                .HasConstraintName("FK_CLM_TREATMENT_STATUSCHANGBY");
        });

        modelBuilder.Entity<ClmTreatmentdocument>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Treatmentno, e.Treatmentdocumentno });

            entity.ToTable("CLM_TREATMENTDOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_CLM_TREATMENTDOCUMENT");
                    tb.HasTrigger("audins_CLM_TREATMENTDOCUMENT");
                    tb.HasTrigger("audupd_CLM_TREATMENTDOCUMENT");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Treatmentno).HasColumnName("TREATMENTNO");
            entity.Property(e => e.Treatmentdocumentno).HasColumnName("TREATMENTDOCUMENTNO");
            entity.Property(e => e.Documentdate)
                .HasColumnType("datetime")
                .HasColumnName("DOCUMENTDATE");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Document).WithMany(p => p.ClmTreatmentdocuments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_CLM_TREATMENTDOCUMENT_DOCUMENTID");

            entity.HasOne(d => d.ClmTreatment).WithMany(p => p.ClmTreatmentdocuments)
                .HasForeignKey(d => new { d.Claimid, d.Treatmentno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_TREATMENTDOCUMENT_TREATMENTNO");
        });

        modelBuilder.Entity<ClmTreatmentitem>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Treatmentno, e.Treatmentitemno });

            entity.ToTable("CLM_TREATMENTITEM", tb =>
                {
                    tb.HasTrigger("auddel_CLM_TREATMENTITEM");
                    tb.HasTrigger("audins_CLM_TREATMENTITEM");
                    tb.HasTrigger("audupd_CLM_TREATMENTITEM");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Treatmentno).HasColumnName("TREATMENTNO");
            entity.Property(e => e.Treatmentitemno).HasColumnName("TREATMENTITEMNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Itemno).HasColumnName("ITEMNO");
            entity.Property(e => e.Matchedamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("MATCHEDAMOUNT");
            entity.Property(e => e.Matchedservices).HasColumnName("MATCHEDSERVICES");
            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.ClmTreatment).WithMany(p => p.ClmTreatmentitems)
                .HasForeignKey(d => new { d.Claimid, d.Treatmentno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_TREATMENTITEM_TREATMENTNO");

            entity.HasOne(d => d.PayItem).WithMany(p => p.ClmTreatmentitems)
                .HasForeignKey(d => new { d.Paymentid, d.Itemno })
                .HasConstraintName("FK_CLM_TREATMENTITEM_ITEMNO");
        });

        modelBuilder.Entity<ClmTreatmentstatushistory>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Treatmentno, e.Statushistoryno });

            entity.ToTable("CLM_TREATMENTSTATUSHISTORY", tb =>
                {
                    tb.HasTrigger("WF_CLM_TREATMENTSTATUSHISTORY");
                    tb.HasTrigger("auddel_CLM_TREATMENTSTATUSHIST");
                    tb.HasTrigger("audins_CLM_TREATMENTSTATUSHIST");
                    tb.HasTrigger("audupd_CLM_TREATMENTSTATUSHIST");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Treatmentno).HasColumnName("TREATMENTNO");
            entity.Property(e => e.Statushistoryno).HasColumnName("STATUSHISTORYNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Userid).HasColumnName("USERID");

            entity.HasOne(d => d.User).WithMany(p => p.ClmTreatmentstatushistories)
                .HasForeignKey(d => d.Userid)
                .HasConstraintName("FK_CLM_TREATMENTSTATUSHISTORY_USERID");

            entity.HasOne(d => d.ClmTreatment).WithMany(p => p.ClmTreatmentstatushistories)
                .HasForeignKey(d => new { d.Claimid, d.Treatmentno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_TREATMENTSTATUSHISTORY_TREATMENTNO");
        });

        modelBuilder.Entity<ClmWitness>(entity =>
        {
            entity.HasKey(e => new { e.Claimid, e.Witnessno });

            entity.ToTable("CLM_WITNESS", tb =>
                {
                    tb.HasTrigger("auddel_CLM_WITNESS");
                    tb.HasTrigger("audins_CLM_WITNESS");
                    tb.HasTrigger("audupd_CLM_WITNESS");
                });

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Witnessno).HasColumnName("WITNESSNO");
            entity.Property(e => e.Addressline1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE1");
            entity.Property(e => e.Addressline2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE2");
            entity.Property(e => e.Addressline3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE3");
            entity.Property(e => e.Comments)
                .IsUnicode(false)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Country)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Familyname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAMILYNAME");
            entity.Property(e => e.Givennames)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GIVENNAMES");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.International).HasColumnName("INTERNATIONAL");
            entity.Property(e => e.Mobilephone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("MOBILEPHONE");
            entity.Property(e => e.Persontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERSONTYPE");
            entity.Property(e => e.Phone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.Postcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Statementprovided).HasColumnName("STATEMENTPROVIDED");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.ClmWitnesses)
                .HasForeignKey(d => d.Claimid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLM_WITNESS_CLAIMID");

            entity.HasOne(d => d.Document).WithMany(p => p.ClmWitnesses)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_CLM_WITNESS_DOCUMENTID");
        });

        modelBuilder.Entity<ClmempEmployment>(entity =>
        {
            entity.HasKey(e => e.Claimemploymentid);

            entity.ToTable("CLMEMP_EMPLOYMENT", tb =>
                {
                    tb.HasTrigger("auddel_CLMEMP_EMPLOYMENT");
                    tb.HasTrigger("audins_CLMEMP_EMPLOYMENT");
                    tb.HasTrigger("audupd_CLMEMP_EMPLOYMENT");
                });

            entity.HasIndex(e => e.Orgstructid, "IDX_CLMEMP_EMPLOYMENT_ORGSTRUCTID");

            entity.Property(e => e.Claimemploymentid).HasColumnName("CLAIMEMPLOYMENTID");
            entity.Property(e => e.Addressline1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE1");
            entity.Property(e => e.Addressline2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE2");
            entity.Property(e => e.Addressline3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE3");
            entity.Property(e => e.Claimemploymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMEMPLOYMENTTYPE");
            entity.Property(e => e.Contact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACT");
            entity.Property(e => e.Country)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Duties)
                .IsUnicode(false)
                .HasColumnName("DUTIES");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Fax)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FAX");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Industry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INDUSTRY");
            entity.Property(e => e.Industrycodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INDUSTRYCODETYPE");
            entity.Property(e => e.International).HasColumnName("INTERNATIONAL");
            entity.Property(e => e.Jobtitle)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("JOBTITLE");
            entity.Property(e => e.Occupation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Occupationcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OCCUPATIONCODETYPE");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Phone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.Postcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Salary).HasColumnName("SALARY");
            entity.Property(e => e.Shiftorirregularhoursworker).HasColumnName("SHIFTORIRREGULARHOURSWORKER");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Orgstruct).WithMany(p => p.ClmempEmployments)
                .HasForeignKey(d => d.Orgstructid)
                .HasConstraintName("FK_CLMEMP_EMPLOYMENT_ORGSTRUCTID");
        });

        modelBuilder.Entity<ClmempEmploymentSa>(entity =>
        {
            entity.HasKey(e => e.Claimemploymentid);

            entity.ToTable("CLMEMP_EMPLOYMENT_SA", tb =>
                {
                    tb.HasTrigger("auddel_CLMEMP_EMPLOYMENT_SA");
                    tb.HasTrigger("audins_CLMEMP_EMPLOYMENT_SA");
                    tb.HasTrigger("audupd_CLMEMP_EMPLOYMENT_SA");
                });

            entity.Property(e => e.Claimemploymentid)
                .ValueGeneratedNever()
                .HasColumnName("CLAIMEMPLOYMENTID");
            entity.Property(e => e.Apprentice).HasColumnName("APPRENTICE");
            entity.Property(e => e.Employmentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EMPLOYMENTCATEGORY");
            entity.Property(e => e.Employmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EMPLOYMENTTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Salicenceid).HasColumnName("SALICENCEID");
            entity.Property(e => e.Saregistrationid).HasColumnName("SAREGISTRATIONID");
            entity.Property(e => e.Saworkcoverlocationid).HasColumnName("SAWORKCOVERLOCATIONID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claimemployment).WithOne(p => p.ClmempEmploymentSa)
                .HasForeignKey<ClmempEmploymentSa>(d => d.Claimemploymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLMEMP_EMPLOYMENT_SA_CLAIMEMPLOYMENTID");

            entity.HasOne(d => d.Salicence).WithMany(p => p.ClmempEmploymentSas)
                .HasForeignKey(d => d.Salicenceid)
                .HasConstraintName("FK_CLMEMP_EMPLOYMENT_SA_SALICENCEID");

            entity.HasOne(d => d.Saregistration).WithMany(p => p.ClmempEmploymentSas)
                .HasForeignKey(d => d.Saregistrationid)
                .HasConstraintName("FK_CLMEMP_EMPLOYMENT_SA_SAREGISTRATIONID");

            entity.HasOne(d => d.Saworkcoverlocation).WithMany(p => p.ClmempEmploymentSas)
                .HasForeignKey(d => d.Saworkcoverlocationid)
                .HasConstraintName("FK_CLMEMP_EMPLOYMENT_SA_SA_WORKCOVERLOCATIONID");
        });

        modelBuilder.Entity<ClmfrmClaimX>(entity =>
        {
            entity.HasKey(e => e.Claimformid).HasName("PK_CLMFRM_CLAIM_X_CLAIMID");

            entity.ToTable("CLMFRM_CLAIM_X", tb =>
                {
                    tb.HasTrigger("auddel_CLMFRM_CLAIM_X");
                    tb.HasTrigger("audins_CLMFRM_CLAIM_X");
                    tb.HasTrigger("audupd_CLMFRM_CLAIM_X");
                });

            entity.HasIndex(e => e.Claimformnumber, "UNQ_CLMFRM_CLAIM_X_CLAIMNUMBER").IsUnique();

            entity.Property(e => e.Claimformid).HasColumnName("CLAIMFORMID");
            entity.Property(e => e.Branchsection)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("BRANCHSECTION");
            entity.Property(e => e.Claimformnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CLAIMFORMNUMBER");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Datecertificatefrom)
                .HasColumnType("datetime")
                .HasColumnName("DATECERTIFICATEFROM");
            entity.Property(e => e.Datecertificateto)
                .HasColumnType("datetime")
                .HasColumnName("DATECERTIFICATETO");
            entity.Property(e => e.Dateemployerconfirm)
                .HasColumnType("datetime")
                .HasColumnName("DATEEMPLOYERCONFIRM");
            entity.Property(e => e.Dateformentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEFORMENTERED");
            entity.Property(e => e.Dateworkerconfirm)
                .HasColumnType("datetime")
                .HasColumnName("DATEWORKERCONFIRM");
            entity.Property(e => e.Descriptionofincident)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTIONOFINCIDENT");
            entity.Property(e => e.Descriptionofinjury)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTIONOFINJURY");
            entity.Property(e => e.Descriptionoftask)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTIONOFTASK");
            entity.Property(e => e.Duties)
                .IsUnicode(false)
                .HasColumnName("DUTIES");
            entity.Property(e => e.Employerconfirm).HasColumnName("EMPLOYERCONFIRM");
            entity.Property(e => e.Employerdeclarationname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYERDECLARATIONNAME");
            entity.Property(e => e.Employernotifiedondate)
                .HasColumnType("datetime")
                .HasColumnName("EMPLOYERNOTIFIEDONDATE");
            entity.Property(e => e.Employmentaddress1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYMENTADDRESS1");
            entity.Property(e => e.Employmentaddress2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYMENTADDRESS2");
            entity.Property(e => e.Employmentaddress3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYMENTADDRESS3");
            entity.Property(e => e.Employmentclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EMPLOYMENTCLASSIFICATION");
            entity.Property(e => e.Employmentcontact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYMENTCONTACT");
            entity.Property(e => e.Employmentemail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYMENTEMAIL");
            entity.Property(e => e.Employmentphone)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYMENTPHONE");
            entity.Property(e => e.Employmentpostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("EMPLOYMENTPOSTCODE");
            entity.Property(e => e.Employmentstartdate)
                .HasColumnType("datetime")
                .HasColumnName("EMPLOYMENTSTARTDATE");
            entity.Property(e => e.Employmentstate)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EMPLOYMENTSTATE");
            entity.Property(e => e.Employmentsuburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("EMPLOYMENTSUBURB");
            entity.Property(e => e.Employmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EMPLOYMENTTYPE");
            entity.Property(e => e.Employmentweeklyhours)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("EMPLOYMENTWEEKLYHOURS");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hasemployerbeennotified).HasColumnName("HASEMPLOYERBEENNOTIFIED");
            entity.Property(e => e.Hastheworkerobtainedacertificateofcapacity).HasColumnName("HASTHEWORKEROBTAINEDACERTIFICATEOFCAPACITY");
            entity.Property(e => e.Hastheworkerresumedwork).HasColumnName("HASTHEWORKERRESUMEDWORK");
            entity.Property(e => e.Hastheworkerstoppedwork).HasColumnName("HASTHEWORKERSTOPPEDWORK");
            entity.Property(e => e.Incidentlogged).HasColumnName("INCIDENTLOGGED");
            entity.Property(e => e.Incidentnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INCIDENTNUMBER");
            entity.Property(e => e.Injurydate)
                .HasColumnType("datetime")
                .HasColumnName("INJURYDATE");
            entity.Property(e => e.Injurydutystatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYDUTYSTATUS");
            entity.Property(e => e.Injuryoccurredaddressline1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INJURYOCCURREDADDRESSLINE1");
            entity.Property(e => e.Injuryoccurredaddressline2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INJURYOCCURREDADDRESSLINE2");
            entity.Property(e => e.Injuryoccurredaddressline3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INJURYOCCURREDADDRESSLINE3");
            entity.Property(e => e.Injuryoccurredplace)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("INJURYOCCURREDPLACE");
            entity.Property(e => e.Injuryoccurredpostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("INJURYOCCURREDPOSTCODE");
            entity.Property(e => e.Injuryoccurredstate)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("INJURYOCCURREDSTATE");
            entity.Property(e => e.Injuryoccurredsuburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("INJURYOCCURREDSUBURB");
            entity.Property(e => e.Injurytime)
                .HasColumnType("datetime")
                .HasColumnName("INJURYTIME");
            entity.Property(e => e.Istheworkerclaiminglossofwages).HasColumnName("ISTHEWORKERCLAIMINGLOSSOFWAGES");
            entity.Property(e => e.Jobtitle)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("JOBTITLE");
            entity.Property(e => e.Occupation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Otherinformation)
                .IsUnicode(false)
                .HasColumnName("OTHERINFORMATION");
            entity.Property(e => e.Overrideresidential).HasColumnName("OVERRIDERESIDENTIAL");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Returntoduties).HasColumnName("RETURNTODUTIES");
            entity.Property(e => e.Returntohours).HasColumnName("RETURNTOHOURS");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Whatistheclaimfor).HasColumnName("WHATISTHECLAIMFOR");
            entity.Property(e => e.Whoisenteringclaimform).HasColumnName("WHOISENTERINGCLAIMFORM");
            entity.Property(e => e.Workeraccountname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WORKERACCOUNTNAME");
            entity.Property(e => e.Workeraccountnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WORKERACCOUNTNUMBER");
            entity.Property(e => e.Workeraddress1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WORKERADDRESS1");
            entity.Property(e => e.Workeraddress2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WORKERADDRESS2");
            entity.Property(e => e.Workeraddress3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WORKERADDRESS3");
            entity.Property(e => e.Workerbankname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WORKERBANKNAME");
            entity.Property(e => e.Workerbirthdate)
                .HasColumnType("datetime")
                .HasColumnName("WORKERBIRTHDATE");
            entity.Property(e => e.Workerbranchname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WORKERBRANCHNAME");
            entity.Property(e => e.Workerbsb1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("WORKERBSB1");
            entity.Property(e => e.Workerbsb2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("WORKERBSB2");
            entity.Property(e => e.Workerconfirm).HasColumnName("WORKERCONFIRM");
            entity.Property(e => e.Workeremail)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("WORKEREMAIL");
            entity.Property(e => e.Workeremployeenumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WORKEREMPLOYEENUMBER");
            entity.Property(e => e.Workerfamilyname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WORKERFAMILYNAME");
            entity.Property(e => e.Workergender).HasColumnName("WORKERGENDER");
            entity.Property(e => e.Workergivennames)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WORKERGIVENNAMES");
            entity.Property(e => e.Workermobilephone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("WORKERMOBILEPHONE");
            entity.Property(e => e.Workerotherpreviousnames)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("WORKEROTHERPREVIOUSNAMES");
            entity.Property(e => e.Workerpartyid).HasColumnName("WORKERPARTYID");
            entity.Property(e => e.Workerposition).HasColumnName("WORKERPOSITION");
            entity.Property(e => e.Workerpostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("WORKERPOSTCODE");
            entity.Property(e => e.Workerresumedworkdate)
                .HasColumnType("datetime")
                .HasColumnName("WORKERRESUMEDWORKDATE");
            entity.Property(e => e.Workerresumedworktime)
                .HasColumnType("datetime")
                .HasColumnName("WORKERRESUMEDWORKTIME");
            entity.Property(e => e.Workerstate)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("WORKERSTATE");
            entity.Property(e => e.Workerstoppedworkdate)
                .HasColumnType("datetime")
                .HasColumnName("WORKERSTOPPEDWORKDATE");
            entity.Property(e => e.Workerstoppedworktime)
                .HasColumnType("datetime")
                .HasColumnName("WORKERSTOPPEDWORKTIME");
            entity.Property(e => e.Workersuburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("WORKERSUBURB");
            entity.Property(e => e.Workerworkphone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("WORKERWORKPHONE");

            entity.HasOne(d => d.Orgstruct).WithMany(p => p.ClmfrmClaimXes)
                .HasForeignKey(d => d.Orgstructid)
                .HasConstraintName("FK_CLMFRM_CLAIM_X_OS_ORGSTRUCTURE");

            entity.HasOne(d => d.Workerparty).WithMany(p => p.ClmfrmClaimXes)
                .HasForeignKey(d => d.Workerpartyid)
                .HasConstraintName("FK_CLMFRM_CLAIM_X_PAR_PARTY");
        });

        modelBuilder.Entity<ClmfrmClaimdocumentX>(entity =>
        {
            entity.HasKey(e => new { e.Claimformid, e.Claimdocumentno });

            entity.ToTable("CLMFRM_CLAIMDOCUMENT_X", tb =>
                {
                    tb.HasTrigger("auddel_CLMFRM_CLAIMDOCUMENT_X");
                    tb.HasTrigger("audins_CLMFRM_CLAIMDOCUMENT_X");
                    tb.HasTrigger("audupd_CLMFRM_CLAIMDOCUMENT_X");
                });

            entity.Property(e => e.Claimformid).HasColumnName("CLAIMFORMID");
            entity.Property(e => e.Claimdocumentno).HasColumnName("CLAIMDOCUMENTNO");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Isclaimform).HasColumnName("ISCLAIMFORM");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claimform).WithMany(p => p.ClmfrmClaimdocumentXes)
                .HasForeignKey(d => d.Claimformid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLMFRM_CLAIMDOCUMENT_X_CLAIMFORMID");

            entity.HasOne(d => d.Document).WithMany(p => p.ClmfrmClaimdocumentXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_CLMFRM_CLAIMDOCUMENT_X_DOCUMENTID");
        });

        modelBuilder.Entity<CorCorrespondencein>(entity =>
        {
            entity.HasKey(e => e.Correspondenceinid);

            entity.ToTable("COR_CORRESPONDENCEIN", tb =>
                {
                    tb.HasTrigger("auddel_COR_CORRESPONDENCEIN");
                    tb.HasTrigger("audins_COR_CORRESPONDENCEIN");
                    tb.HasTrigger("audupd_COR_CORRESPONDENCEIN");
                });

            entity.HasIndex(e => new { e.Documentcategory, e.Documenttype, e.Correspondenceinid }, "IX_COR_CORRESPONDENCEIN_WF");

            entity.Property(e => e.Correspondenceinid).HasColumnName("CORRESPONDENCEINID");
            entity.Property(e => e.Confidential).HasColumnName("CONFIDENTIAL");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datereceived)
                .HasColumnType("datetime")
                .HasColumnName("DATERECEIVED");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Documentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTCATEGORY");
            entity.Property(e => e.Documentdate)
                .HasColumnType("datetime")
                .HasColumnName("DOCUMENTDATE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Enteredbyuserid).HasColumnName("ENTEREDBYUSERID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Receiptmethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECEIPTMETHOD");
            entity.Property(e => e.Receiptmethodcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECEIPTMETHODCODETYPE");
            entity.Property(e => e.Receivedfrom)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("RECEIVEDFROM");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timeentered)
                .HasColumnType("datetime")
                .HasColumnName("TIMEENTERED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Enteredbyuser).WithMany(p => p.CorCorrespondenceins)
                .HasForeignKey(d => d.Enteredbyuserid)
                .HasConstraintName("FK_COR_CORRESPONDENCEIN_ENTEREDBYUSERID");
        });

        modelBuilder.Entity<CorCorrespondenceout>(entity =>
        {
            entity.HasKey(e => e.Correspondenceoutid);

            entity.ToTable("COR_CORRESPONDENCEOUT", tb =>
                {
                    tb.HasTrigger("auddel_COR_CORRESPONDENCEOUT");
                    tb.HasTrigger("audins_COR_CORRESPONDENCEOUT");
                    tb.HasTrigger("audupd_COR_CORRESPONDENCEOUT");
                });

            entity.HasIndex(e => new { e.Documentcategory, e.Documenttype, e.Correspondenceoutid }, "IX_COR_CORRESPONDENCEOUT_WF");

            entity.Property(e => e.Correspondenceoutid).HasColumnName("CORRESPONDENCEOUTID");
            entity.Property(e => e.Confidential).HasColumnName("CONFIDENTIAL");
            entity.Property(e => e.Datesent)
                .HasColumnType("datetime")
                .HasColumnName("DATESENT");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Documentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTCATEGORY");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Enteredbyuserid).HasColumnName("ENTEREDBYUSERID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Sentto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SENTTO");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Enteredbyuser).WithMany(p => p.CorCorrespondenceouts)
                .HasForeignKey(d => d.Enteredbyuserid)
                .HasConstraintName("FK_COR_CORRESPONDENCEOUT_ENTEREDBYUSERID");
        });

        modelBuilder.Entity<CorIndocument>(entity =>
        {
            entity.HasKey(e => new { e.Correspondenceinid, e.Indocumentno });

            entity.ToTable("COR_INDOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_COR_INDOCUMENT");
                    tb.HasTrigger("audins_COR_INDOCUMENT");
                    tb.HasTrigger("audupd_COR_INDOCUMENT");
                });

            entity.HasIndex(e => e.Documentid, "IDX_COR_INDOCUMENT_DOCUMENTID");

            entity.Property(e => e.Correspondenceinid).HasColumnName("CORRESPONDENCEINID");
            entity.Property(e => e.Indocumentno).HasColumnName("INDOCUMENTNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Correspondencein).WithMany(p => p.CorIndocuments)
                .HasForeignKey(d => d.Correspondenceinid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COR_INDOCUMENT_CORRESPONDENCEINID");

            entity.HasOne(d => d.Document).WithMany(p => p.CorIndocuments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_COR_INDOCUMENT_DOCUMENTID");
        });

        modelBuilder.Entity<CorOutdocument>(entity =>
        {
            entity.HasKey(e => new { e.Correspondenceoutid, e.Outdocumentno });

            entity.ToTable("COR_OUTDOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_COR_OUTDOCUMENT");
                    tb.HasTrigger("audins_COR_OUTDOCUMENT");
                    tb.HasTrigger("audupd_COR_OUTDOCUMENT");
                });

            entity.HasIndex(e => e.Documentid, "IDX_COR_OUTDOCUMENT_DOCUMENTID");

            entity.Property(e => e.Correspondenceoutid).HasColumnName("CORRESPONDENCEOUTID");
            entity.Property(e => e.Outdocumentno).HasColumnName("OUTDOCUMENTNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Sentto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SENTTO");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Correspondenceout).WithMany(p => p.CorOutdocuments)
                .HasForeignKey(d => d.Correspondenceoutid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COR_OUTDOCUMENT_CORRESPONDENCEOUTID");

            entity.HasOne(d => d.Document).WithMany(p => p.CorOutdocuments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_COR_OUTDOCUMENT_DOCUMENTID");
        });

        modelBuilder.Entity<Cr062016>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CR06_2016");

            entity.Property(e => e.Xasco971)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("XASCO971");
            entity.Property(e => e.Xasco971Desc)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("XASCO971_DESC");
            entity.Property(e => e.Xasco972)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("XASCO972");
            entity.Property(e => e.Xasco972Desc)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("XASCO972_DESC");
            entity.Property(e => e.Xasco973)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("XASCO973");
            entity.Property(e => e.Xasco973Desc)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("XASCO973_DESC");
            entity.Property(e => e.Xasco974)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("XASCO974");
            entity.Property(e => e.Xasco974Desc)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("XASCO974_DESC");
        });

        modelBuilder.Entity<DmsDocument>(entity =>
        {
            entity.HasKey(e => e.Documentid);

            entity.ToTable("DMS_DOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_DMS_DOCUMENT");
                    tb.HasTrigger("audins_DMS_DOCUMENT");
                    tb.HasTrigger("audupd_DMS_DOCUMENT");
                });

            entity.HasIndex(e => e.Datereviewed, "IDX_DMS_DOCUMENT_DATEREVIEWED");

            entity.HasIndex(e => e.Documentid, "IDX_DMS_DOCUMENT_SUMMARY").IsUnique();

            entity.HasIndex(e => e.Documentid, "IX_DMS_DOCUMENT_REVIEWED")
                .IsUnique()
                .HasFilter("([DOCUMENTREVIEWED]=(1))");

            entity.HasIndex(e => e.Documentid, "IX_DMS_DOCUMENT_UNREVIEWED")
                .IsUnique()
                .HasFilter("([DOCUMENTREVIEWED]=(0))");

            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Checkedout).HasColumnName("CHECKEDOUT");
            entity.Property(e => e.Checkedoutby).HasColumnName("CHECKEDOUTBY");
            entity.Property(e => e.Checkoutdatetime)
                .HasColumnType("datetime")
                .HasColumnName("CHECKOUTDATETIME");
            entity.Property(e => e.Checkoutprefix)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("CHECKOUTPREFIX");
            entity.Property(e => e.Dateregistered)
                .HasColumnType("datetime")
                .HasColumnName("DATEREGISTERED");
            entity.Property(e => e.Datereviewed)
                .HasColumnType("datetime")
                .HasColumnName("DATEREVIEWED");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Documentnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTNUMBER");
            entity.Property(e => e.Documentreviewed).HasColumnName("DOCUMENTREVIEWED");
            entity.Property(e => e.Filename)
                .HasMaxLength(260)
                .IsUnicode(false)
                .HasColumnName("FILENAME");
            entity.Property(e => e.Registeredby).HasColumnName("REGISTEREDBY");
            entity.Property(e => e.Reviewedby).HasColumnName("REVIEWEDBY");
            entity.Property(e => e.Timereviewed)
                .HasColumnType("datetime")
                .HasColumnName("TIMEREVIEWED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<DmsDocumentreviewhistory>(entity =>
        {
            entity.HasKey(e => new { e.Documentid, e.Reviewhistoryno });

            entity.ToTable("DMS_DOCUMENTREVIEWHISTORY", tb =>
                {
                    tb.HasTrigger("auddel_DMS_DOCUMENTREVIEWHISTO");
                    tb.HasTrigger("audins_DMS_DOCUMENTREVIEWHISTO");
                    tb.HasTrigger("audupd_DMS_DOCUMENTREVIEWHISTO");
                });

            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Reviewhistoryno).HasColumnName("REVIEWHISTORYNO");
            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Datereviewed)
                .HasColumnType("datetime")
                .HasColumnName("DATEREVIEWED");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMECHANGED");
            entity.Property(e => e.Reviewed).HasColumnName("REVIEWED");
            entity.Property(e => e.Reviewedby).HasColumnName("REVIEWEDBY");
            entity.Property(e => e.Timereviewed)
                .HasColumnType("datetime")
                .HasColumnName("TIMEREVIEWED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.DmsDocumentreviewhistories)
                .HasForeignKey(d => d.Documentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DMS_DOCUMENTREVIEWHISTORY_DMS_DOCUMENT");
        });

        modelBuilder.Entity<DmsPersonrespClaim>(entity =>
        {
            entity.HasKey(e => new { e.Documentid, e.Personrespno });

            entity.ToTable("DMS_PERSONRESP_CLAIM", tb =>
                {
                    tb.HasTrigger("auddel_DMS_PERSONRESP_CLAIM");
                    tb.HasTrigger("audins_DMS_PERSONRESP_CLAIM");
                    tb.HasTrigger("audupd_DMS_PERSONRESP_CLAIM");
                });

            entity.HasIndex(e => e.Userid, "IDX_DMS_PERSONRESP_CLAIM_USERID");

            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Personrespno).HasColumnName("PERSONRESPNO");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Userid).HasColumnName("USERID");

            entity.HasOne(d => d.Claim).WithMany(p => p.DmsPersonrespClaims)
                .HasForeignKey(d => d.Claimid)
                .HasConstraintName("FK_DMS_PERSONRESP_CLAIM_CLM_CLAIM");

            entity.HasOne(d => d.Document).WithMany(p => p.DmsPersonrespClaims)
                .HasForeignKey(d => d.Documentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DMS_PERSONRESP_CLAIM_DMS_DOCUMENT");
        });

        modelBuilder.Entity<DmsPersonresponsiblehistory>(entity =>
        {
            entity.HasKey(e => new { e.Documentid, e.Personresphistoryno });

            entity.ToTable("DMS_PERSONRESPONSIBLEHISTORY", tb =>
                {
                    tb.HasTrigger("auddel_DMS_PERSONRESPONSIBLEHI");
                    tb.HasTrigger("audins_DMS_PERSONRESPONSIBLEHI");
                    tb.HasTrigger("audupd_DMS_PERSONRESPONSIBLEHI");
                });

            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Personresphistoryno).HasColumnName("PERSONRESPHISTORYNO");
            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMECHANGED");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Personrespno).HasColumnName("PERSONRESPNO");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Userid).HasColumnName("USERID");

            entity.HasOne(d => d.Document).WithMany(p => p.DmsPersonresponsiblehistories)
                .HasForeignKey(d => d.Documentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DMS_PERSONRESPONSIBLEHISTORY_DMS_DOCUMENT");
        });

        modelBuilder.Entity<DmsRevision>(entity =>
        {
            entity.HasKey(e => new { e.Documentid, e.Revisionno });

            entity.ToTable("DMS_REVISION", tb =>
                {
                    tb.HasTrigger("auddel_DMS_REVISION");
                    tb.HasTrigger("audins_DMS_REVISION");
                    tb.HasTrigger("audupd_DMS_REVISION");
                });

            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Revisionno).HasColumnName("REVISIONNO");
            entity.Property(e => e.Checkindatetime)
                .HasColumnType("datetime")
                .HasColumnName("CHECKINDATETIME");
            entity.Property(e => e.Checkinuser).HasColumnName("CHECKINUSER");
            entity.Property(e => e.Checkoutdatetime)
                .HasColumnType("datetime")
                .HasColumnName("CHECKOUTDATETIME");
            entity.Property(e => e.Filetype)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FILETYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Document).WithMany(p => p.DmsRevisions)
                .HasForeignKey(d => d.Documentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DMS_REVISION_DMS_DOCUMENT");
        });

        modelBuilder.Entity<DmsRevisionfile>(entity =>
        {
            entity.HasKey(e => new { e.Documentid, e.Revisionno });

            entity.ToTable("DMS_REVISIONFILE", tb =>
                {
                    tb.HasTrigger("TRIG_DMS_REVISIONFILE_FILETYPE");
                    tb.HasTrigger("auddel_DMS_REVISIONFILE");
                    tb.HasTrigger("audins_DMS_REVISIONFILE");
                    tb.HasTrigger("audupd_DMS_REVISIONFILE");
                });

            entity.HasIndex(e => e.Fulltextid, "IX_DMS_REVISIONFILE_FULLTEXTID").IsUnique();

            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Revisionno).HasColumnName("REVISIONNO");
            entity.Property(e => e.Document)
                .HasColumnType("image")
                .HasColumnName("DOCUMENT");
            entity.Property(e => e.Documentguid).HasColumnName("DOCUMENTGUID");
            entity.Property(e => e.Documentkey)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTKEY");
            entity.Property(e => e.Documentprovider)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTPROVIDER");
            entity.Property(e => e.Documenttext).HasColumnName("DOCUMENTTEXT");
            entity.Property(e => e.Filetype)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FILETYPE");
            entity.Property(e => e.Fulltextid)
                .ValueGeneratedOnAdd()
                .HasColumnName("FULLTEXTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.DmsRevision).WithOne(p => p.DmsRevisionfile)
                .HasForeignKey<DmsRevisionfile>(d => new { d.Documentid, d.Revisionno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DMS_REVISIONFILE_DMS_REVISION");
        });

        modelBuilder.Entity<EmlAddress>(entity =>
        {
            entity.HasKey(e => new { e.Emailid, e.Addressno }).HasName("PK_EML_ADDRESS_EMAILID_ADDRESSNO");

            entity.ToTable("EML_ADDRESS", tb =>
                {
                    tb.HasTrigger("auddel_EML_ADDRESS");
                    tb.HasTrigger("audins_EML_ADDRESS");
                    tb.HasTrigger("audupd_EML_ADDRESS");
                });

            entity.Property(e => e.Emailid).HasColumnName("EMAILID");
            entity.Property(e => e.Addressno).HasColumnName("ADDRESSNO");
            entity.Property(e => e.Emailfrom)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAILFROM");
            entity.Property(e => e.Emailto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAILTO");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Recipientname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("RECIPIENTNAME");
            entity.Property(e => e.Recipienttype).HasColumnName("RECIPIENTTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Type)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TYPE");

            entity.HasOne(d => d.Email).WithMany(p => p.EmlAddresses)
                .HasForeignKey(d => d.Emailid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EML_ADDRESS_EMAILID");
        });

        modelBuilder.Entity<EmlAttachment>(entity =>
        {
            entity.HasKey(e => new { e.Emailid, e.Emailattachno }).HasName("PK_EML_ATTACHMENT_EMAILID_ATTACHNO");

            entity.ToTable("EML_ATTACHMENT", tb =>
                {
                    tb.HasTrigger("auddel_EML_ATTACHMENT");
                    tb.HasTrigger("audins_EML_ATTACHMENT");
                    tb.HasTrigger("audupd_EML_ATTACHMENT");
                });

            entity.Property(e => e.Emailid).HasColumnName("EMAILID");
            entity.Property(e => e.Emailattachno).HasColumnName("EMAILATTACHNO");
            entity.Property(e => e.Attachmentsource)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ATTACHMENTSOURCE");
            entity.Property(e => e.Category)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CATEGORY");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Destination)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DESTINATION");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Processed).HasColumnName("PROCESSED");
            entity.Property(e => e.Processeddate)
                .HasColumnType("datetime")
                .HasColumnName("PROCESSEDDATE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Rejected).HasColumnName("REJECTED");
            entity.Property(e => e.Rejecteddate)
                .HasColumnType("datetime")
                .HasColumnName("REJECTEDDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Document).WithMany(p => p.EmlAttachments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_EML_ATTACHMENT_DOCUMENTID");

            entity.HasOne(d => d.Email).WithMany(p => p.EmlAttachments)
                .HasForeignKey(d => d.Emailid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EML_ATTACHMENT_EMAILID");
        });

        modelBuilder.Entity<EmlEmail>(entity =>
        {
            entity.HasKey(e => e.Emailid).HasName("PK_EML_EMAIL_EMAILID");

            entity.ToTable("EML_EMAIL", tb =>
                {
                    tb.HasTrigger("auddel_EML_EMAIL");
                    tb.HasTrigger("audins_EML_EMAIL");
                    tb.HasTrigger("audupd_EML_EMAIL");
                });

            entity.Property(e => e.Emailid).HasColumnName("EMAILID");
            entity.Property(e => e.Batchid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BATCHID");
            entity.Property(e => e.Bccsender).HasColumnName("BCCSENDER");
            entity.Property(e => e.Confidential).HasColumnName("CONFIDENTIAL");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datesent)
                .HasColumnType("datetime")
                .HasColumnName("DATESENT");
            entity.Property(e => e.Dlm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DLM");
            entity.Property(e => e.Enteredby).HasColumnName("ENTEREDBY");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Includeemailsignature).HasColumnName("INCLUDEEMAILSIGNATURE");
            entity.Property(e => e.Msgbody)
                .IsUnicode(false)
                .HasColumnName("MSGBODY");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Securityclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SECURITYCLASSIFICATION");
            entity.Property(e => e.Sentby).HasColumnName("SENTBY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Subject)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.Timesent)
                .HasColumnType("datetime")
                .HasColumnName("TIMESENT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.EnteredbyNavigation).WithMany(p => p.EmlEmailEnteredbyNavigations)
                .HasForeignKey(d => d.Enteredby)
                .HasConstraintName("FK_EML_EMAIL_ENTEREDBY");

            entity.HasOne(d => d.SentbyNavigation).WithMany(p => p.EmlEmailSentbyNavigations)
                .HasForeignKey(d => d.Sentby)
                .HasConstraintName("FK_EML_EMAIL_SENTBY");
        });

        modelBuilder.Entity<EmlinAttachment>(entity =>
        {
            entity.HasKey(e => new { e.Emailid, e.Attachno });

            entity.ToTable("EMLIN_ATTACHMENT", tb =>
                {
                    tb.HasTrigger("auddel_EMLIN_ATTACHMENT");
                    tb.HasTrigger("audins_EMLIN_ATTACHMENT");
                    tb.HasTrigger("audupd_EMLIN_ATTACHMENT");
                });

            entity.Property(e => e.Emailid).HasColumnName("EMAILID");
            entity.Property(e => e.Attachno).HasColumnName("ATTACHNO");
            entity.Property(e => e.Category)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CATEGORY");
            entity.Property(e => e.Confidential).HasColumnName("CONFIDENTIAL");
            entity.Property(e => e.Dateassigned)
                .HasColumnType("datetime")
                .HasColumnName("DATEASSIGNED");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Destination)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DESTINATION");
            entity.Property(e => e.Docstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCSTATUS");
            entity.Property(e => e.Docstatusdate)
                .HasColumnType("datetime")
                .HasColumnName("DOCSTATUSDATE");
            entity.Property(e => e.Docstatusreason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCSTATUSREASON");
            entity.Property(e => e.Documentdate)
                .HasColumnType("datetime")
                .HasColumnName("DOCUMENTDATE");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Filenotecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILENOTECATEGORY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Personresponsibleuserid).HasColumnName("PERSONRESPONSIBLEUSERID");
            entity.Property(e => e.Processed).HasColumnName("PROCESSED");
            entity.Property(e => e.Processedbyuserid).HasColumnName("PROCESSEDBYUSERID");
            entity.Property(e => e.Processeddate)
                .HasColumnType("datetime")
                .HasColumnName("PROCESSEDDATE");
            entity.Property(e => e.Receivedfrom)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("RECEIVEDFROM");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Rehabfilenotecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REHABFILENOTECATEGORY");
            entity.Property(e => e.Rejected).HasColumnName("REJECTED");
            entity.Property(e => e.Rejecteddate)
                .HasColumnType("datetime")
                .HasColumnName("REJECTEDDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(260)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.EmlinAttachments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_EMLIN_ATTACHMENT_DOCUMENTID");

            entity.HasOne(d => d.Email).WithMany(p => p.EmlinAttachments)
                .HasForeignKey(d => d.Emailid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMLIN_ATTACHMENT_EMAILID");

            entity.HasOne(d => d.Personresponsibleuser).WithMany(p => p.EmlinAttachmentPersonresponsibleusers)
                .HasForeignKey(d => d.Personresponsibleuserid)
                .HasConstraintName("FK_EMLIN_ATTACHMENT_PERSONRESPONSIBLEUSERID");

            entity.HasOne(d => d.Processedbyuser).WithMany(p => p.EmlinAttachmentProcessedbyusers)
                .HasForeignKey(d => d.Processedbyuserid)
                .HasConstraintName("FK_EMLIN_ATTACHMENT_PROCESSEDBYUSERID");
        });

        modelBuilder.Entity<EmlinAttachmentpersonresponsiblehistory>(entity =>
        {
            entity.HasKey(e => new { e.Emailid, e.Attachno, e.Historyno });

            entity.ToTable("EMLIN_ATTACHMENTPERSONRESPONSIBLEHISTORY", tb =>
                {
                    tb.HasTrigger("auddel_EMLIN_ATTACHMENTPERSONR");
                    tb.HasTrigger("audins_EMLIN_ATTACHMENTPERSONR");
                    tb.HasTrigger("audupd_EMLIN_ATTACHMENTPERSONR");
                });

            entity.Property(e => e.Emailid).HasColumnName("EMAILID");
            entity.Property(e => e.Attachno).HasColumnName("ATTACHNO");
            entity.Property(e => e.Historyno).HasColumnName("HISTORYNO");
            entity.Property(e => e.Dateassigned)
                .HasColumnType("datetime")
                .HasColumnName("DATEASSIGNED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Personresponsible).HasColumnName("PERSONRESPONSIBLE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.PersonresponsibleNavigation).WithMany(p => p.EmlinAttachmentpersonresponsiblehistories)
                .HasForeignKey(d => d.Personresponsible)
                .HasConstraintName("FK_EMLIN_ATTACHMENTPERSONRESPONSIBLEHISTORY_PERSONRESPONSIBLE");

            entity.HasOne(d => d.EmlinAttachment).WithMany(p => p.EmlinAttachmentpersonresponsiblehistories)
                .HasForeignKey(d => new { d.Emailid, d.Attachno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMLIN_ATTACHMENTPERSONRESPONSIBLEHISTORY_CLAIMID");
        });

        modelBuilder.Entity<EmlinAttachmentstatushistory>(entity =>
        {
            entity.HasKey(e => new { e.Emailid, e.Attachno, e.Historyno });

            entity.ToTable("EMLIN_ATTACHMENTSTATUSHISTORY", tb =>
                {
                    tb.HasTrigger("auddel_EMLIN_ATTACHMENTSTATUSH");
                    tb.HasTrigger("audins_EMLIN_ATTACHMENTSTATUSH");
                    tb.HasTrigger("audupd_EMLIN_ATTACHMENTSTATUSH");
                });

            entity.Property(e => e.Emailid).HasColumnName("EMAILID");
            entity.Property(e => e.Attachno).HasColumnName("ATTACHNO");
            entity.Property(e => e.Historyno).HasColumnName("HISTORYNO");
            entity.Property(e => e.Docstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCSTATUS");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.EmlinAttachment).WithMany(p => p.EmlinAttachmentstatushistories)
                .HasForeignKey(d => new { d.Emailid, d.Attachno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMLIN_ATTACHMENTSTATUSHISTORY_CLAIMID");
        });

        modelBuilder.Entity<EmlinCorrin>(entity =>
        {
            entity.HasKey(e => new { e.Emailid, e.Attachno });

            entity.ToTable("EMLIN_CORRIN", tb =>
                {
                    tb.HasTrigger("auddel_EMLIN_CORRIN");
                    tb.HasTrigger("audins_EMLIN_CORRIN");
                    tb.HasTrigger("audupd_EMLIN_CORRIN");
                });

            entity.Property(e => e.Emailid).HasColumnName("EMAILID");
            entity.Property(e => e.Attachno).HasColumnName("ATTACHNO");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Correspondenceinid).HasColumnName("CORRESPONDENCEINID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.EmlinCorrins)
                .HasForeignKey(d => d.Claimid)
                .HasConstraintName("FK_EMLIN_CORRIN_CLAIMID");

            entity.HasOne(d => d.Email).WithMany(p => p.EmlinCorrins)
                .HasForeignKey(d => d.Emailid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMLIN_CORRIN_EMAILID");
        });

        modelBuilder.Entity<EmlinCorrout>(entity =>
        {
            entity.HasKey(e => new { e.Emailid, e.Attachno });

            entity.ToTable("EMLIN_CORROUT", tb =>
                {
                    tb.HasTrigger("auddel_EMLIN_CORROUT");
                    tb.HasTrigger("audins_EMLIN_CORROUT");
                    tb.HasTrigger("audupd_EMLIN_CORROUT");
                });

            entity.Property(e => e.Emailid).HasColumnName("EMAILID");
            entity.Property(e => e.Attachno).HasColumnName("ATTACHNO");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Correspondenceoutid).HasColumnName("CORRESPONDENCEOUTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.EmlinCorrouts)
                .HasForeignKey(d => d.Claimid)
                .HasConstraintName("FK_EMLIN_CORROUT_CLAIMID");

            entity.HasOne(d => d.Email).WithMany(p => p.EmlinCorrouts)
                .HasForeignKey(d => d.Emailid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMLIN_CORROUT_EMAILID");
        });

        modelBuilder.Entity<EmlinEmail>(entity =>
        {
            entity.HasKey(e => e.Emailid);

            entity.ToTable("EMLIN_EMAIL", tb =>
                {
                    tb.HasTrigger("auddel_EMLIN_EMAIL");
                    tb.HasTrigger("audins_EMLIN_EMAIL");
                    tb.HasTrigger("audupd_EMLIN_EMAIL");
                });

            entity.Property(e => e.Emailid).HasColumnName("EMAILID");
            entity.Property(e => e.Batchid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BATCHID");
            entity.Property(e => e.Body)
                .IsUnicode(false)
                .HasColumnName("BODY");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Emailfrom)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAILFROM");
            entity.Property(e => e.Emailto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAILTO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Subject)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<EmlinFilenote>(entity =>
        {
            entity.HasKey(e => new { e.Emailid, e.Attachno });

            entity.ToTable("EMLIN_FILENOTE", tb =>
                {
                    tb.HasTrigger("auddel_EMLIN_FILENOTE");
                    tb.HasTrigger("audins_EMLIN_FILENOTE");
                    tb.HasTrigger("audupd_EMLIN_FILENOTE");
                });

            entity.Property(e => e.Emailid).HasColumnName("EMAILID");
            entity.Property(e => e.Attachno).HasColumnName("ATTACHNO");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Filenoteid).HasColumnName("FILENOTEID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.EmlinFilenotes)
                .HasForeignKey(d => d.Claimid)
                .HasConstraintName("FK_EMLIN_FILENOTE_CLAIMID");

            entity.HasOne(d => d.Email).WithMany(p => p.EmlinFilenotes)
                .HasForeignKey(d => d.Emailid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMLIN_FILENOTE_EMAILID");
        });

        modelBuilder.Entity<EmlinMedcert>(entity =>
        {
            entity.HasKey(e => new { e.Emailid, e.Attachno });

            entity.ToTable("EMLIN_MEDCERT", tb =>
                {
                    tb.HasTrigger("auddel_EMLIN_MEDCERT");
                    tb.HasTrigger("audins_EMLIN_MEDCERT");
                    tb.HasTrigger("audupd_EMLIN_MEDCERT");
                });

            entity.Property(e => e.Emailid).HasColumnName("EMAILID");
            entity.Property(e => e.Attachno).HasColumnName("ATTACHNO");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Medcertid).HasColumnName("MEDCERTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.EmlinMedcerts)
                .HasForeignKey(d => d.Claimid)
                .HasConstraintName("FK_EMLIN_MEDCERT_CLAIMID");

            entity.HasOne(d => d.Medcert).WithMany(p => p.EmlinMedcerts)
                .HasForeignKey(d => d.Medcertid)
                .HasConstraintName("FK_EMLIN_MEDCERT_MEDCERTID");

            entity.HasOne(d => d.EmlinAttachment).WithOne(p => p.EmlinMedcert)
                .HasForeignKey<EmlinMedcert>(d => new { d.Emailid, d.Attachno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMLIN_MEDCERT_EMAILID");
        });

        modelBuilder.Entity<EmlinPayment>(entity =>
        {
            entity.HasKey(e => new { e.Emailid, e.Attachno });

            entity.ToTable("EMLIN_PAYMENT", tb =>
                {
                    tb.HasTrigger("auddel_EMLIN_PAYMENT");
                    tb.HasTrigger("audins_EMLIN_PAYMENT");
                    tb.HasTrigger("audupd_EMLIN_PAYMENT");
                });

            entity.Property(e => e.Emailid).HasColumnName("EMAILID");
            entity.Property(e => e.Attachno).HasColumnName("ATTACHNO");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.EmlinPayments)
                .HasForeignKey(d => d.Claimid)
                .HasConstraintName("FK_EMLIN_PAYMENT_CLAIMID");

            entity.HasOne(d => d.Email).WithMany(p => p.EmlinPayments)
                .HasForeignKey(d => d.Emailid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMLIN_PAYMENT_EMAILID");
        });

        modelBuilder.Entity<EmlinProviderdocument>(entity =>
        {
            entity.HasKey(e => new { e.Emailid, e.Attachno });

            entity.ToTable("EMLIN_PROVIDERDOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_EMLIN_PROVIDERDOCUMENT");
                    tb.HasTrigger("audins_EMLIN_PROVIDERDOCUMENT");
                    tb.HasTrigger("audupd_EMLIN_PROVIDERDOCUMENT");
                });

            entity.Property(e => e.Emailid).HasColumnName("EMAILID");
            entity.Property(e => e.Attachno).HasColumnName("ATTACHNO");
            entity.Property(e => e.Correspondenceinid).HasColumnName("CORRESPONDENCEINID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Email).WithMany(p => p.EmlinProviderdocuments)
                .HasForeignKey(d => d.Emailid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMLIN_PROVIDERDOCUMENT_EMAILID");

            entity.HasOne(d => d.Party).WithMany(p => p.EmlinProviderdocuments)
                .HasForeignKey(d => d.Partyid)
                .HasConstraintName("FK_EMLIN_PROVIDERDOCUMENT_PARTYID");
        });

        modelBuilder.Entity<EmlinRehab>(entity =>
        {
            entity.HasKey(e => new { e.Emailid, e.Attachno });

            entity.ToTable("EMLIN_REHAB", tb =>
                {
                    tb.HasTrigger("auddel_EMLIN_REHAB");
                    tb.HasTrigger("audins_EMLIN_REHAB");
                    tb.HasTrigger("audupd_EMLIN_REHAB");
                });

            entity.Property(e => e.Emailid).HasColumnName("EMAILID");
            entity.Property(e => e.Attachno).HasColumnName("ATTACHNO");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Rehabid).HasColumnName("REHABID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Claim).WithMany(p => p.EmlinRehabs)
                .HasForeignKey(d => d.Claimid)
                .HasConstraintName("FK_EMLIN_REHAB_CLAIMID");

            entity.HasOne(d => d.Rehab).WithMany(p => p.EmlinRehabs)
                .HasForeignKey(d => d.Rehabid)
                .HasConstraintName("FK_EMLIN_REHAB_REHABID");

            entity.HasOne(d => d.EmlinAttachment).WithOne(p => p.EmlinRehab)
                .HasForeignKey<EmlinRehab>(d => new { d.Emailid, d.Attachno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMLIN_REHAB_EMAILID");
        });

        modelBuilder.Entity<Evt5whyX>(entity =>
        {
            entity.HasKey(e => e.Eventid);

            entity.ToTable("EVT_5WHY_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_5WHY_X");
                    tb.HasTrigger("audins_EVT_5WHY_X");
                    tb.HasTrigger("audupd_EVT_5WHY_X");
                });

            entity.Property(e => e.Eventid)
                .ValueGeneratedNever()
                .HasColumnName("EVENTID");
            entity.Property(e => e.Fifthwhy)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("FIFTHWHY");
            entity.Property(e => e.Firstwhy)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("FIRSTWHY");
            entity.Property(e => e.Fourthwhy)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("FOURTHWHY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Problemstatement)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("PROBLEMSTATEMENT");
            entity.Property(e => e.Rootcause)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("ROOTCAUSE");
            entity.Property(e => e.Secondwhy)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("SECONDWHY");
            entity.Property(e => e.Thirdwhy)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("THIRDWHY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithOne(p => p.Evt5whyX)
                .HasForeignKey<Evt5whyX>(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_5WHY_X_EVENTID");
        });

        modelBuilder.Entity<EvtActionX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Actionno });

            entity.ToTable("EVT_ACTION_X", tb =>
                {
                    tb.HasTrigger("TRIG_EVT_ACTION_X");
                    tb.HasTrigger("auddel_EVT_ACTION_X");
                    tb.HasTrigger("audins_EVT_ACTION_X");
                    tb.HasTrigger("audupd_EVT_ACTION_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Actionno).HasColumnName("ACTIONNO");
            entity.Property(e => e.Actioncompletedescription)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("ACTIONCOMPLETEDESCRIPTION");
            entity.Property(e => e.Actiondateentered)
                .HasColumnType("datetime")
                .HasColumnName("ACTIONDATEENTERED");
            entity.Property(e => e.Actiondescription)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("ACTIONDESCRIPTION");
            entity.Property(e => e.Actionenteredbyhrid).HasColumnName("ACTIONENTEREDBYHRID");
            entity.Property(e => e.Actionpersonresponsiblehrid).HasColumnName("ACTIONPERSONRESPONSIBLEHRID");
            entity.Property(e => e.Actiontitle)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ACTIONTITLE");
            entity.Property(e => e.Actualcompletiondate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALCOMPLETIONDATE");
            entity.Property(e => e.Compldetailsdateentered)
                .HasColumnType("datetime")
                .HasColumnName("COMPLDETAILSDATEENTERED");
            entity.Property(e => e.Compldetailsenteredbyhrid).HasColumnName("COMPLDETAILSENTEREDBYHRID");
            entity.Property(e => e.Completionstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMPLETIONSTATUS");
            entity.Property(e => e.Controltype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTROLTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Percentagecomplete).HasColumnName("PERCENTAGECOMPLETE");
            entity.Property(e => e.Targetcompletiondate)
                .HasColumnType("datetime")
                .HasColumnName("TARGETCOMPLETIONDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Actionenteredbyhr).WithMany(p => p.EvtActionXActionenteredbyhrs)
                .HasForeignKey(d => d.Actionenteredbyhrid)
                .HasConstraintName("FK_EVT_ACTION_X_ACTIONENTEREDBYHRID");

            entity.HasOne(d => d.Actionpersonresponsiblehr).WithMany(p => p.EvtActionXActionpersonresponsiblehrs)
                .HasForeignKey(d => d.Actionpersonresponsiblehrid)
                .HasConstraintName("FK_EVT_ACTION_X_ACTIONPERSONRESPONSIBLEHRID");

            entity.HasOne(d => d.Compldetailsenteredbyhr).WithMany(p => p.EvtActionXCompldetailsenteredbyhrs)
                .HasForeignKey(d => d.Compldetailsenteredbyhrid)
                .HasConstraintName("FK_EVT_ACTION_X_COMPLDETAILSENTEREDBYHRID");

            entity.HasOne(d => d.Event).WithMany(p => p.EvtActionXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_ACTION_X_EVENTID");
        });

        modelBuilder.Entity<EvtAggressionassaultX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Typeno });

            entity.ToTable("EVT_AGGRESSIONASSAULT_X");

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Typeno).HasColumnName("TYPENO");
            entity.Property(e => e.Aggressiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGGRESSIONTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtAggressionassaultXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_AGGRESSIONASSAULT_X_EVENTID");
        });

        modelBuilder.Entity<EvtAggressorX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Aggressorno });

            entity.ToTable("EVT_AGGRESSOR_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_AGGRESSOR_X");
                    tb.HasTrigger("audins_EVT_AGGRESSOR_X");
                    tb.HasTrigger("audupd_EVT_AGGRESSOR_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Aggressorno).HasColumnName("AGGRESSORNO");
            entity.Property(e => e.Ageofaggressor).HasColumnName("AGEOFAGGRESSOR");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Nameofaggressor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NAMEOFAGGRESSOR");
            entity.Property(e => e.Previousdisturbances).HasColumnName("PREVIOUSDISTURBANCES");
            entity.Property(e => e.Relationship)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATIONSHIP");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtAggressorXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_AGGRESSOR_X_EVENTID");
        });

        modelBuilder.Entity<EvtBehaviourX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Typeno });

            entity.ToTable("EVT_BEHAVIOUR_X");

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Typeno).HasColumnName("TYPENO");
            entity.Property(e => e.Behaviourtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BEHAVIOURTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtBehaviourXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_BEHAVIOUR_X_EVENTID");
        });

        modelBuilder.Entity<EvtClaggressiondefX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Definitionno });

            entity.ToTable("EVT_CLAGGRESSIONDEF_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_CLAGGRESSIONDEF_X");
                    tb.HasTrigger("audins_EVT_CLAGGRESSIONDEF_X");
                    tb.HasTrigger("audupd_EVT_CLAGGRESSIONDEF_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Definitionno).HasColumnName("DEFINITIONNO");
            entity.Property(e => e.Definitiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEFINITIONTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtClaggressiondefXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_CLAGGRESSIONDEF_X_EVENTID");
        });

        modelBuilder.Entity<EvtClbehaviourdefX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Definitionno });

            entity.ToTable("EVT_CLBEHAVIOURDEF_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_CLBEHAVIOURDEF_X");
                    tb.HasTrigger("audins_EVT_CLBEHAVIOURDEF_X");
                    tb.HasTrigger("audupd_EVT_CLBEHAVIOURDEF_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Definitionno).HasColumnName("DEFINITIONNO");
            entity.Property(e => e.Definitiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEFINITIONTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtClbehaviourdefXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_CLBEHAVIOURDEF_X_EVENTID");
        });

        modelBuilder.Entity<EvtClfraudclassificationX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Classificationno });

            entity.ToTable("EVT_CLFRAUDCLASSIFICATION_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_CLFRAUDCLASSIFICATI");
                    tb.HasTrigger("audins_EVT_CLFRAUDCLASSIFICATI");
                    tb.HasTrigger("audupd_EVT_CLFRAUDCLASSIFICATI");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Classificationno).HasColumnName("CLASSIFICATIONNO");
            entity.Property(e => e.Fraudtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FRAUDTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtClfraudclassificationXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_CLFRAUDCLASSIFICATION_X_EVENTID");
        });

        modelBuilder.Entity<EvtClientinvestigationX>(entity =>
        {
            entity.HasKey(e => e.Eventid);

            entity.ToTable("EVT_CLIENTINVESTIGATION_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_CLIENTINVESTIGATION");
                    tb.HasTrigger("audins_EVT_CLIENTINVESTIGATION");
                    tb.HasTrigger("audupd_EVT_CLIENTINVESTIGATION");
                });

            entity.Property(e => e.Eventid)
                .ValueGeneratedNever()
                .HasColumnName("EVENTID");
            entity.Property(e => e.Agencyreferredto)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCYREFERREDTO");
            entity.Property(e => e.Assessmentcompletedbyhrid).HasColumnName("ASSESSMENTCOMPLETEDBYHRID");
            entity.Property(e => e.Assessmentdate)
                .HasColumnType("datetime")
                .HasColumnName("ASSESSMENTDATE");
            entity.Property(e => e.Assessmentnotes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("ASSESSMENTNOTES");
            entity.Property(e => e.Datereferred)
                .HasColumnType("datetime")
                .HasColumnName("DATEREFERRED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Referredtoexternalbody).HasColumnName("REFERREDTOEXTERNALBODY");
            entity.Property(e => e.Requirefullinvestigation).HasColumnName("REQUIREFULLINVESTIGATION");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Assessmentcompletedbyhr).WithMany(p => p.EvtClientinvestigationXes)
                .HasForeignKey(d => d.Assessmentcompletedbyhrid)
                .HasConstraintName("FK_EVT_CLIENTINVESTIGATION_X_ASSESSMENTCOMPLETEDBYHRID");

            entity.HasOne(d => d.Event).WithOne(p => p.EvtClientinvestigationX)
                .HasForeignKey<EvtClientinvestigationX>(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_CLIENTINVESTIGATION_X_EVENTID");
        });

        modelBuilder.Entity<EvtClosureX>(entity =>
        {
            entity.HasKey(e => e.Eventid);

            entity.ToTable("EVT_CLOSURE_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_CLOSURE_X");
                    tb.HasTrigger("audins_EVT_CLOSURE_X");
                    tb.HasTrigger("audupd_EVT_CLOSURE_X");
                });

            entity.Property(e => e.Eventid)
                .ValueGeneratedNever()
                .HasColumnName("EVENTID");
            entity.Property(e => e.Closedbyhrid).HasColumnName("CLOSEDBYHRID");
            entity.Property(e => e.Closurecomments)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("CLOSURECOMMENTS");
            entity.Property(e => e.Dateeventclosed)
                .HasColumnType("datetime")
                .HasColumnName("DATEEVENTCLOSED");
            entity.Property(e => e.Datereopened)
                .HasColumnType("datetime")
                .HasColumnName("DATEREOPENED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Reopenedbyhrid).HasColumnName("REOPENEDBYHRID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Closedbyhr).WithMany(p => p.EvtClosureXClosedbyhrs)
                .HasForeignKey(d => d.Closedbyhrid)
                .HasConstraintName("FK_EVT_CLOSURE_X_CLOSEDBYHRID");

            entity.HasOne(d => d.Event).WithOne(p => p.EvtClosureX)
                .HasForeignKey<EvtClosureX>(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_CLOSURE_X_EVENTID");

            entity.HasOne(d => d.Reopenedbyhr).WithMany(p => p.EvtClosureXReopenedbyhrs)
                .HasForeignKey(d => d.Reopenedbyhrid)
                .HasConstraintName("FK_EVT_CLOSURE_X_REOPENEDBYHRID");
        });

        modelBuilder.Entity<EvtContribfactorX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Factorno });

            entity.ToTable("EVT_CONTRIBFACTOR_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_CONTRIBFACTOR_X");
                    tb.HasTrigger("audins_EVT_CONTRIBFACTOR_X");
                    tb.HasTrigger("audupd_EVT_CONTRIBFACTOR_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Factorno).HasColumnName("FACTORNO");
            entity.Property(e => e.Contributingfactor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTRIBUTINGFACTOR");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtContribfactorXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_CONTRIBFACTOR_X_EVENTID");
        });

        modelBuilder.Entity<EvtDocumentX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Docno }).HasName("PK_EVT_DOCUMENT_X_EVENTID_DOCNO");

            entity.ToTable("EVT_DOCUMENT_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_DOCUMENT_X");
                    tb.HasTrigger("audins_EVT_DOCUMENT_X");
                    tb.HasTrigger("audupd_EVT_DOCUMENT_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Docno).HasColumnName("DOCNO");
            entity.Property(e => e.Confidential).HasColumnName("CONFIDENTIAL");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Document).WithMany(p => p.EvtDocumentXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_EVT_DOCUMENT_X_DOCUMENTID");

            entity.HasOne(d => d.Event).WithMany(p => p.EvtDocumentXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_DOCUMENT_X_EVENTID");
        });

        modelBuilder.Entity<EvtEventX>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EVT_EVENT_X");

            entity.Property(e => e.Address1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Address3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS3");
            entity.Property(e => e.Aggressorbehaviouralviolence)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGGRESSORBEHAVIOURALVIOLENCE");
            entity.Property(e => e.Aggressorphysicalviolence)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGGRESSORPHYSICALVIOLENCE");
            entity.Property(e => e.Aggressorpropertyviolence).HasColumnName("AGGRESSORPROPERTYVIOLENCE");
            entity.Property(e => e.Aggressorverbalabuse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGGRESSORVERBALABUSE");
            entity.Property(e => e.Claggressionassault)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAGGRESSIONASSAULT");
            entity.Property(e => e.Clbehaviour)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLBEHAVIOUR");
            entity.Property(e => e.Clbodilylocationofinjury)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLBODILYLOCATIONOFINJURY");
            entity.Property(e => e.Clbusinessinterruption)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLBUSINESSINTERRUPTION");
            entity.Property(e => e.Clcareconcern)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLCARECONCERN");
            entity.Property(e => e.Clclientadministratorhrid).HasColumnName("CLCLIENTADMINISTRATORHRID");
            entity.Property(e => e.Cldateofcontact)
                .HasColumnType("datetime")
                .HasColumnName("CLDATEOFCONTACT");
            entity.Property(e => e.Cldateofsubmission)
                .HasColumnType("datetime")
                .HasColumnName("CLDATEOFSUBMISSION");
            entity.Property(e => e.Cldeathclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLDEATHCLASSIFICATION");
            entity.Property(e => e.Cldescriptionofinjury)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("CLDESCRIPTIONOFINJURY");
            entity.Property(e => e.Cldetailsofcontactresponse)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CLDETAILSOFCONTACTRESPONSE");
            entity.Property(e => e.Clemergencycode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLEMERGENCYCODE");
            entity.Property(e => e.Clequipmentproductsupplies)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLEQUIPMENTPRODUCTSUPPLIES");
            entity.Property(e => e.Cleventnumber)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CLEVENTNUMBER");
            entity.Property(e => e.Clfamilymembercontacted).HasColumnName("CLFAMILYMEMBERCONTACTED");
            entity.Property(e => e.Clfraudtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLFRAUDTYPE");
            entity.Property(e => e.Clhealthissue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLHEALTHISSUE");
            entity.Property(e => e.Clinfectioncontrol)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLINFECTIONCONTROL");
            entity.Property(e => e.Clinitialtreatmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLINITIALTREATMENTTYPE");
            entity.Property(e => e.Clmedicationerror)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLMEDICATIONERROR");
            entity.Property(e => e.Clmotoreventtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLMOTOREVENTTYPE");
            entity.Property(e => e.Clpolicecontacted).HasColumnName("CLPOLICECONTACTED");
            entity.Property(e => e.Clpropertycostofdamage)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("CLPROPERTYCOSTOFDAMAGE");
            entity.Property(e => e.Clpropertyevent)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLPROPERTYEVENT");
            entity.Property(e => e.Clpropertytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLPROPERTYTYPE");
            entity.Property(e => e.Clreportableincident)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLREPORTABLEINCIDENT");
            entity.Property(e => e.Clreportnumber)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CLREPORTNUMBER");
            entity.Property(e => e.Clroadconditions)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLROADCONDITIONS");
            entity.Property(e => e.Clsecurityeventclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLSECURITYEVENTCLASSIFICATION");
            entity.Property(e => e.Clsecurityeventtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLSECURITYEVENTTYPE");
            entity.Property(e => e.Clseverityrating)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLSEVERITYRATING");
            entity.Property(e => e.Clstaffaffected)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLSTAFFAFFECTED");
            entity.Property(e => e.Clstatuschange)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLSTATUSCHANGE");
            entity.Property(e => e.Clthospitalvisit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLTHOSPITALVISIT");
            entity.Property(e => e.Cltinjurydescription)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("CLTINJURYDESCRIPTION");
            entity.Property(e => e.Cltinjurylocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLTINJURYLOCATION");
            entity.Property(e => e.Cltreatmentdetails)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("CLTREATMENTDETAILS");
            entity.Property(e => e.Clttreatmentdetail)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("CLTTREATMENTDETAIL");
            entity.Property(e => e.Clttreatmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLTTREATMENTTYPE");
            entity.Property(e => e.Cltypeofdeath)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLTYPEOFDEATH");
            entity.Property(e => e.Cltypeoffall)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLTYPEOFFALL");
            entity.Property(e => e.Clvehiclecostofdamage)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("CLVEHICLECOSTOFDAMAGE");
            entity.Property(e => e.Clvehicleeventwhen)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLVEHICLEEVENTWHEN");
            entity.Property(e => e.Clvehicletype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLVEHICLETYPE");
            entity.Property(e => e.Confidential).HasColumnName("CONFIDENTIAL");
            entity.Property(e => e.Convertedfromguesteventid).HasColumnName("CONVERTEDFROMGUESTEVENTID");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datenotified)
                .HasColumnType("datetime")
                .HasColumnName("DATENOTIFIED");
            entity.Property(e => e.Dateofevent)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFEVENT");
            entity.Property(e => e.Datereported)
                .HasColumnType("datetime")
                .HasColumnName("DATEREPORTED");
            entity.Property(e => e.Datetimeconvertedfromguest)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMECONVERTEDFROMGUEST");
            entity.Property(e => e.Deleted).HasColumnName("DELETED");
            entity.Property(e => e.Description)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Eapprovided).HasColumnName("EAPPROVIDED");
            entity.Property(e => e.Enteredbyhrid).HasColumnName("ENTEREDBYHRID");
            entity.Property(e => e.Environmentdetails)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENVIRONMENTDETAILS");
            entity.Property(e => e.Environmentotherdetails)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("ENVIRONMENTOTHERDETAILS");
            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Eventnumber)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("EVENTNUMBER");
            entity.Property(e => e.Eventsleadingto)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("EVENTSLEADINGTO");
            entity.Property(e => e.Eventtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVENTTYPE");
            entity.Property(e => e.Exposureactivity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXPOSUREACTIVITY");
            entity.Property(e => e.Exposurecause)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXPOSURECAUSE");
            entity.Property(e => e.Exposureextent)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXPOSUREEXTENT");
            entity.Property(e => e.Exposuresubstance)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXPOSURESUBSTANCE");
            entity.Property(e => e.Fbagencyadministratorhrid).HasColumnName("FBAGENCYADMINISTRATORHRID");
            entity.Property(e => e.Fbcomplaintinvestigatorhrid).HasColumnName("FBCOMPLAINTINVESTIGATORHRID");
            entity.Property(e => e.Fbcomplaintreviewerhrid).HasColumnName("FBCOMPLAINTREVIEWERHRID");
            entity.Property(e => e.Fbcomplaintsubcat1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBCOMPLAINTSUBCAT1");
            entity.Property(e => e.Fbcomplaintsubcat2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBCOMPLAINTSUBCAT2");
            entity.Property(e => e.Fbcomplainttheme)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBCOMPLAINTTHEME");
            entity.Property(e => e.Fbdateacknowledged)
                .HasColumnType("datetime")
                .HasColumnName("FBDATEACKNOWLEDGED");
            entity.Property(e => e.Fboriginatingmethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBORIGINATINGMETHOD");
            entity.Property(e => e.Fbpersonresponsiblenotificationhrid).HasColumnName("FBPERSONRESPONSIBLENOTIFICATIONHRID");
            entity.Property(e => e.Fbpreferredcontactmethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBPREFERREDCONTACTMETHOD");
            entity.Property(e => e.Fbrelatedtoaccommodation).HasColumnName("FBRELATEDTOACCOMMODATION");
            entity.Property(e => e.Fbremainanonymous).HasColumnName("FBREMAINANONYMOUS");
            entity.Property(e => e.Fbtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBTYPE");
            entity.Property(e => e.Fbwanttobecontacted).HasColumnName("FBWANTTOBECONTACTED");
            entity.Property(e => e.Fitforworkattime).HasColumnName("FITFORWORKATTIME");
            entity.Property(e => e.Guesteventactiontakenbyname)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("GUESTEVENTACTIONTAKENBYNAME");
            entity.Property(e => e.Guestevententeredemail)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("GUESTEVENTENTEREDEMAIL");
            entity.Property(e => e.Guesteventnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GUESTEVENTNUMBER");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Hazardcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAZARDCATEGORY");
            entity.Property(e => e.Howdidtheyfeel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HOWDIDTHEYFEEL");
            entity.Property(e => e.Hsrephrid).HasColumnName("HSREPHRID");
            entity.Property(e => e.Immediateactiondetails)
                .IsUnicode(false)
                .HasColumnName("IMMEDIATEACTIONDETAILS");
            entity.Property(e => e.Immediateactionhrid).HasColumnName("IMMEDIATEACTIONHRID");
            entity.Property(e => e.Immediateactionnoact).HasColumnName("IMMEDIATEACTIONNOACT");
            entity.Property(e => e.Immediatethreat).HasColumnName("IMMEDIATETHREAT");
            entity.Property(e => e.Involvenatureofwork).HasColumnName("INVOLVENATUREOFWORK");
            entity.Property(e => e.Involveworkconditions).HasColumnName("INVOLVEWORKCONDITIONS");
            entity.Property(e => e.Involveworkperformance).HasColumnName("INVOLVEWORKPERFORMANCE");
            entity.Property(e => e.Involveworkplaceconflict).HasColumnName("INVOLVEWORKPLACECONFLICT");
            entity.Property(e => e.Lastsaveddatetime)
                .HasColumnType("datetime")
                .HasColumnName("LASTSAVEDDATETIME");
            entity.Property(e => e.Location)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mentalfatigue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MENTALFATIGUE");
            entity.Property(e => e.Notfitreason)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("NOTFITREASON");
            entity.Property(e => e.Numberofaggressors).HasColumnName("NUMBEROFAGGRESSORS");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Physicalfatigue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PHYSICALFATIGUE");
            entity.Property(e => e.Postcode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Propertydamagedescription)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("PROPERTYDAMAGEDESCRIPTION");
            entity.Property(e => e.Propertydamageestimate)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PROPERTYDAMAGEESTIMATE");
            entity.Property(e => e.Propertydamagetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROPERTYDAMAGETYPE");
            entity.Property(e => e.Psychisrecurrence).HasColumnName("PSYCHISRECURRENCE");
            entity.Property(e => e.Psychpreexistingcondition).HasColumnName("PSYCHPREEXISTINGCONDITION");
            entity.Property(e => e.Psychrecurrencehowlong)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PSYCHRECURRENCEHOWLONG");
            entity.Property(e => e.Qualityofsleep)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("QUALITYOFSLEEP");
            entity.Property(e => e.Reportedagencycontact)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REPORTEDAGENCYCONTACT");
            entity.Property(e => e.Reportedby)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPORTEDBY");
            entity.Property(e => e.Reportedbyname)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("REPORTEDBYNAME");
            entity.Property(e => e.Reportedcontactnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REPORTEDCONTACTNUMBER");
            entity.Property(e => e.Reportedemail)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("REPORTEDEMAIL");
            entity.Property(e => e.Reportedemporgname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPORTEDEMPORGNAME");
            entity.Property(e => e.Reportedtoname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REPORTEDTONAME");
            entity.Property(e => e.Reviewerhrid).HasColumnName("REVIEWERHRID");
            entity.Property(e => e.Securitydescription)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("SECURITYDESCRIPTION");
            entity.Property(e => e.Severityinjury)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEVERITYINJURY");
            entity.Property(e => e.Severitylikelihood)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEVERITYLIKELIHOOD");
            entity.Property(e => e.Severityrating)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEVERITYRATING");
            entity.Property(e => e.Sleepleadinguptoevent)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SLEEPLEADINGUPTOEVENT");
            entity.Property(e => e.Specificarea)
                .IsUnicode(false)
                .HasColumnName("SPECIFICAREA");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Supervisorhrid).HasColumnName("SUPERVISORHRID");
            entity.Property(e => e.Timeofevent)
                .HasColumnType("datetime")
                .HasColumnName("TIMEOFEVENT");
            entity.Property(e => e.Timereported)
                .HasColumnType("datetime")
                .HasColumnName("TIMEREPORTED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Whsconsultanthrid).HasColumnName("WHSCONSULTANTHRID");
        });

        modelBuilder.Entity<EvtEventX1>(entity =>
        {
            entity.HasKey(e => e.Eventid);

            entity.ToTable("EVT_EVENT_X", "secure", tb =>
                {
                    tb.HasTrigger("TRIG_EVT_EVENT_X");
                    tb.HasTrigger("auddel_EVT_EVENT_X");
                    tb.HasTrigger("audins_EVT_EVENT_X");
                    tb.HasTrigger("audupd_EVT_EVENT_X");
                });

            entity.HasIndex(e => e.Eventnumber, "UNQ_EVT_EVENT_X_EVENTNUMBER").IsUnique();

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Address1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Address3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS3");
            entity.Property(e => e.Aggressorbehaviouralviolence)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGGRESSORBEHAVIOURALVIOLENCE");
            entity.Property(e => e.Aggressorphysicalviolence)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGGRESSORPHYSICALVIOLENCE");
            entity.Property(e => e.Aggressorpropertyviolence).HasColumnName("AGGRESSORPROPERTYVIOLENCE");
            entity.Property(e => e.Aggressorverbalabuse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGGRESSORVERBALABUSE");
            entity.Property(e => e.Claggressionassault)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAGGRESSIONASSAULT");
            entity.Property(e => e.Clbehaviour)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLBEHAVIOUR");
            entity.Property(e => e.Clbodilylocationofinjury)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLBODILYLOCATIONOFINJURY");
            entity.Property(e => e.Clbusinessinterruption)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLBUSINESSINTERRUPTION");
            entity.Property(e => e.Clcareconcern)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLCARECONCERN");
            entity.Property(e => e.Clclientadministratorhrid).HasColumnName("CLCLIENTADMINISTRATORHRID");
            entity.Property(e => e.Cldateofcontact)
                .HasColumnType("datetime")
                .HasColumnName("CLDATEOFCONTACT");
            entity.Property(e => e.Cldateofsubmission)
                .HasColumnType("datetime")
                .HasColumnName("CLDATEOFSUBMISSION");
            entity.Property(e => e.Cldeathclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLDEATHCLASSIFICATION");
            entity.Property(e => e.Cldescriptionofinjury)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("CLDESCRIPTIONOFINJURY");
            entity.Property(e => e.Cldetailsofcontactresponse)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CLDETAILSOFCONTACTRESPONSE");
            entity.Property(e => e.Clemergencycode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLEMERGENCYCODE");
            entity.Property(e => e.Clequipmentproductsupplies)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLEQUIPMENTPRODUCTSUPPLIES");
            entity.Property(e => e.Cleventnumber)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CLEVENTNUMBER");
            entity.Property(e => e.Clfamilymembercontacted).HasColumnName("CLFAMILYMEMBERCONTACTED");
            entity.Property(e => e.Clfraudtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLFRAUDTYPE");
            entity.Property(e => e.Clhealthissue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLHEALTHISSUE");
            entity.Property(e => e.Clinfectioncontrol)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLINFECTIONCONTROL");
            entity.Property(e => e.Clinitialtreatmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLINITIALTREATMENTTYPE");
            entity.Property(e => e.Clmedicationerror)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLMEDICATIONERROR");
            entity.Property(e => e.Clmotoreventtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLMOTOREVENTTYPE");
            entity.Property(e => e.Clpolicecontacted).HasColumnName("CLPOLICECONTACTED");
            entity.Property(e => e.Clpropertycostofdamage)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("CLPROPERTYCOSTOFDAMAGE");
            entity.Property(e => e.Clpropertyevent)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLPROPERTYEVENT");
            entity.Property(e => e.Clpropertytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLPROPERTYTYPE");
            entity.Property(e => e.Clreportableincident)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLREPORTABLEINCIDENT");
            entity.Property(e => e.Clreportnumber)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CLREPORTNUMBER");
            entity.Property(e => e.Clroadconditions)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLROADCONDITIONS");
            entity.Property(e => e.Clsecurityeventclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLSECURITYEVENTCLASSIFICATION");
            entity.Property(e => e.Clsecurityeventtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLSECURITYEVENTTYPE");
            entity.Property(e => e.Clseverityrating)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLSEVERITYRATING");
            entity.Property(e => e.Clstaffaffected)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLSTAFFAFFECTED");
            entity.Property(e => e.Clstatuschange)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLSTATUSCHANGE");
            entity.Property(e => e.CltHospitalVisit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CltInjuryDescription)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.CltInjuryLocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CltTreatmentDetail)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.CltTreatmentType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cltreatmentdetails)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("CLTREATMENTDETAILS");
            entity.Property(e => e.Cltypeofdeath)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLTYPEOFDEATH");
            entity.Property(e => e.Cltypeoffall)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLTYPEOFFALL");
            entity.Property(e => e.Clvehiclecostofdamage)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("CLVEHICLECOSTOFDAMAGE");
            entity.Property(e => e.Clvehicleeventwhen)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLVEHICLEEVENTWHEN");
            entity.Property(e => e.Clvehicletype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLVEHICLETYPE");
            entity.Property(e => e.Confidential).HasColumnName("CONFIDENTIAL");
            entity.Property(e => e.Convertedfromguesteventid).HasColumnName("CONVERTEDFROMGUESTEVENTID");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datenotified)
                .HasColumnType("datetime")
                .HasColumnName("DATENOTIFIED");
            entity.Property(e => e.Dateofevent)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFEVENT");
            entity.Property(e => e.Datereported)
                .HasColumnType("datetime")
                .HasColumnName("DATEREPORTED");
            entity.Property(e => e.Datetimeconvertedfromguest)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMECONVERTEDFROMGUEST");
            entity.Property(e => e.Deleted).HasColumnName("DELETED");
            entity.Property(e => e.Description)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Eapprovided).HasColumnName("EAPPROVIDED");
            entity.Property(e => e.Enteredbyhrid).HasColumnName("ENTEREDBYHRID");
            entity.Property(e => e.Environmentdetails)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENVIRONMENTDETAILS");
            entity.Property(e => e.Environmentotherdetails)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("ENVIRONMENTOTHERDETAILS");
            entity.Property(e => e.Eventnumber)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("EVENTNUMBER");
            entity.Property(e => e.Eventsleadingto)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("EVENTSLEADINGTO");
            entity.Property(e => e.Eventtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVENTTYPE");
            entity.Property(e => e.Exposureactivity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXPOSUREACTIVITY");
            entity.Property(e => e.Exposurecause)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXPOSURECAUSE");
            entity.Property(e => e.Exposureextent)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXPOSUREEXTENT");
            entity.Property(e => e.Exposuresubstance)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXPOSURESUBSTANCE");
            entity.Property(e => e.Fbagencyadministratorhrid).HasColumnName("FBAGENCYADMINISTRATORHRID");
            entity.Property(e => e.Fbcomplaintinvestigatorhrid).HasColumnName("FBCOMPLAINTINVESTIGATORHRID");
            entity.Property(e => e.Fbcomplaintreviewerhrid).HasColumnName("FBCOMPLAINTREVIEWERHRID");
            entity.Property(e => e.Fbcomplaintsubcat1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBCOMPLAINTSUBCAT1");
            entity.Property(e => e.Fbcomplaintsubcat2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBCOMPLAINTSUBCAT2");
            entity.Property(e => e.Fbcomplainttheme)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBCOMPLAINTTHEME");
            entity.Property(e => e.Fbdateacknowledged)
                .HasColumnType("datetime")
                .HasColumnName("FBDATEACKNOWLEDGED");
            entity.Property(e => e.Fboriginatingmethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBORIGINATINGMETHOD");
            entity.Property(e => e.Fbpersonresponsiblenotificationhrid).HasColumnName("FBPERSONRESPONSIBLENOTIFICATIONHRID");
            entity.Property(e => e.Fbpreferredcontactmethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBPREFERREDCONTACTMETHOD");
            entity.Property(e => e.Fbrelatedtoaccommodation).HasColumnName("FBRELATEDTOACCOMMODATION");
            entity.Property(e => e.Fbremainanonymous).HasColumnName("FBREMAINANONYMOUS");
            entity.Property(e => e.Fbtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBTYPE");
            entity.Property(e => e.Fbwanttobecontacted).HasColumnName("FBWANTTOBECONTACTED");
            entity.Property(e => e.Fitforworkattime).HasColumnName("FITFORWORKATTIME");
            entity.Property(e => e.Guesteventactiontakenbyname)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("GUESTEVENTACTIONTAKENBYNAME");
            entity.Property(e => e.Guestevententeredemail)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("GUESTEVENTENTEREDEMAIL");
            entity.Property(e => e.Guesteventnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GUESTEVENTNUMBER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hazardcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAZARDCATEGORY");
            entity.Property(e => e.Howdidtheyfeel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HOWDIDTHEYFEEL");
            entity.Property(e => e.Hsrephrid).HasColumnName("HSREPHRID");
            entity.Property(e => e.Immediateactiondetails)
                .IsUnicode(false)
                .HasColumnName("IMMEDIATEACTIONDETAILS");
            entity.Property(e => e.Immediateactionhrid).HasColumnName("IMMEDIATEACTIONHRID");
            entity.Property(e => e.Immediateactionnoact).HasColumnName("IMMEDIATEACTIONNOACT");
            entity.Property(e => e.Immediatethreat).HasColumnName("IMMEDIATETHREAT");
            entity.Property(e => e.Involvenatureofwork).HasColumnName("INVOLVENATUREOFWORK");
            entity.Property(e => e.Involveworkconditions).HasColumnName("INVOLVEWORKCONDITIONS");
            entity.Property(e => e.Involveworkperformance).HasColumnName("INVOLVEWORKPERFORMANCE");
            entity.Property(e => e.Involveworkplaceconflict).HasColumnName("INVOLVEWORKPLACECONFLICT");
            entity.Property(e => e.Lastsaveddatetime)
                .HasColumnType("datetime")
                .HasColumnName("LASTSAVEDDATETIME");
            entity.Property(e => e.Location)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mentalfatigue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MENTALFATIGUE");
            entity.Property(e => e.Notfitreason)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("NOTFITREASON");
            entity.Property(e => e.Numberofaggressors).HasColumnName("NUMBEROFAGGRESSORS");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Physicalfatigue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PHYSICALFATIGUE");
            entity.Property(e => e.Postcode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Propertydamagedescription)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("PROPERTYDAMAGEDESCRIPTION");
            entity.Property(e => e.Propertydamageestimate)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PROPERTYDAMAGEESTIMATE");
            entity.Property(e => e.Propertydamagetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROPERTYDAMAGETYPE");
            entity.Property(e => e.Psychisrecurrence).HasColumnName("PSYCHISRECURRENCE");
            entity.Property(e => e.Psychpreexistingcondition).HasColumnName("PSYCHPREEXISTINGCONDITION");
            entity.Property(e => e.Psychrecurrencehowlong)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PSYCHRECURRENCEHOWLONG");
            entity.Property(e => e.Qualityofsleep)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("QUALITYOFSLEEP");
            entity.Property(e => e.Reportedagencycontact)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REPORTEDAGENCYCONTACT");
            entity.Property(e => e.Reportedby)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPORTEDBY");
            entity.Property(e => e.Reportedbyname)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("REPORTEDBYNAME");
            entity.Property(e => e.Reportedcontactnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REPORTEDCONTACTNUMBER");
            entity.Property(e => e.Reportedemail)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("REPORTEDEMAIL");
            entity.Property(e => e.Reportedemporgname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPORTEDEMPORGNAME");
            entity.Property(e => e.Reportedtoname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REPORTEDTONAME");
            entity.Property(e => e.Reviewerhrid).HasColumnName("REVIEWERHRID");
            entity.Property(e => e.Securitydescription)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("SECURITYDESCRIPTION");
            entity.Property(e => e.Severityinjury)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEVERITYINJURY");
            entity.Property(e => e.Severitylikelihood)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEVERITYLIKELIHOOD");
            entity.Property(e => e.Severityrating)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEVERITYRATING");
            entity.Property(e => e.Sleepleadinguptoevent)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SLEEPLEADINGUPTOEVENT");
            entity.Property(e => e.Specificarea)
                .IsUnicode(false)
                .HasColumnName("SPECIFICAREA");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Supervisorhrid).HasColumnName("SUPERVISORHRID");
            entity.Property(e => e.Timeofevent)
                .HasColumnType("datetime")
                .HasColumnName("TIMEOFEVENT");
            entity.Property(e => e.Timereported)
                .HasColumnType("datetime")
                .HasColumnName("TIMEREPORTED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Whsconsultanthrid).HasColumnName("WHSCONSULTANTHRID");

            entity.HasOne(d => d.Clclientadministratorhr).WithMany(p => p.EvtEventX1Clclientadministratorhrs)
                .HasForeignKey(d => d.Clclientadministratorhrid)
                .HasConstraintName("FK_EVT_EVENT_X_CLCLIENTADMINISTRATORHRID");

            entity.HasOne(d => d.Enteredbyhr).WithMany(p => p.EvtEventX1Enteredbyhrs)
                .HasForeignKey(d => d.Enteredbyhrid)
                .HasConstraintName("FK_EVT_EVENT_X_ENTEREDBYHRID");

            entity.HasOne(d => d.Fbagencyadministratorhr).WithMany(p => p.EvtEventX1Fbagencyadministratorhrs)
                .HasForeignKey(d => d.Fbagencyadministratorhrid)
                .HasConstraintName("FK_EVT_EVENT_X_FBAGENCYADMINISTRATORHRID");

            entity.HasOne(d => d.Fbcomplaintinvestigatorhr).WithMany(p => p.EvtEventX1Fbcomplaintinvestigatorhrs)
                .HasForeignKey(d => d.Fbcomplaintinvestigatorhrid)
                .HasConstraintName("FK_EVT_EVENT_X_FBCOMPLAINTINVESTIGATORHRID");

            entity.HasOne(d => d.Fbcomplaintreviewerhr).WithMany(p => p.EvtEventX1Fbcomplaintreviewerhrs)
                .HasForeignKey(d => d.Fbcomplaintreviewerhrid)
                .HasConstraintName("FK_EVT_EVENT_X_FBCOMPLAINTREVIEWERHRID");

            entity.HasOne(d => d.Fbpersonresponsiblenotificationhr).WithMany(p => p.EvtEventX1Fbpersonresponsiblenotificationhrs)
                .HasForeignKey(d => d.Fbpersonresponsiblenotificationhrid)
                .HasConstraintName("FK_EVT_EVENT_X_FBPERSONRESPONSIBLENOTIFICATIONHRID");

            entity.HasOne(d => d.Hsrephr).WithMany(p => p.EvtEventX1Hsrephrs)
                .HasForeignKey(d => d.Hsrephrid)
                .HasConstraintName("FK_EVT_EVENT_X_HSREPHRID");

            entity.HasOne(d => d.Orgstruct).WithMany(p => p.EvtEventX1s)
                .HasForeignKey(d => d.Orgstructid)
                .HasConstraintName("FK_EVT_EVENT_X_OS_ORGSTRUCTURE");

            entity.HasOne(d => d.Reviewerhr).WithMany(p => p.EvtEventX1Reviewerhrs)
                .HasForeignKey(d => d.Reviewerhrid)
                .HasConstraintName("FK_EVT_EVENT_X_REVIEWERHRID");

            entity.HasOne(d => d.Supervisorhr).WithMany(p => p.EvtEventX1Supervisorhrs)
                .HasForeignKey(d => d.Supervisorhrid)
                .HasConstraintName("FK_EVT_EVENT_X_SUPERVISORHRID");

            entity.HasOne(d => d.Whsconsultanthr).WithMany(p => p.EvtEventX1Whsconsultanthrs)
                .HasForeignKey(d => d.Whsconsultanthrid)
                .HasConstraintName("FK_EVT_EVENT_X_WHSCONSULTANTHRID");
        });

        modelBuilder.Entity<EvtEventsubtypeX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Typeno });

            entity.ToTable("EVT_EVENTSUBTYPE_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_EVENTSUBTYPE_X");
                    tb.HasTrigger("audins_EVT_EVENTSUBTYPE_X");
                    tb.HasTrigger("audupd_EVT_EVENTSUBTYPE_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Typeno).HasColumnName("TYPENO");
            entity.Property(e => e.Eventtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVENTTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtEventsubtypeXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_EVENTSUBTYPE_X_EVENTID");
        });

        modelBuilder.Entity<EvtExposureppeX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Ppeno });

            entity.ToTable("EVT_EXPOSUREPPE_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_EXPOSUREPPE_X");
                    tb.HasTrigger("audins_EVT_EXPOSUREPPE_X");
                    tb.HasTrigger("audupd_EVT_EXPOSUREPPE_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Ppeno).HasColumnName("PPENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Ppetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PPETYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtExposureppeXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_EXPOSUREPPE_X_EVENTID");
        });

        modelBuilder.Entity<EvtFilenoteX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Filenoteno });

            entity.ToTable("EVT_FILENOTE_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_FILENOTE_X");
                    tb.HasTrigger("audins_EVT_FILENOTE_X");
                    tb.HasTrigger("audupd_EVT_FILENOTE_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Filenoteno).HasColumnName("FILENOTENO");
            entity.Property(e => e.Filenoteid).HasColumnName("FILENOTEID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtFilenoteXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_FILENOTE_X_EVENTID");

            entity.HasOne(d => d.Filenote).WithMany(p => p.EvtFilenoteXes)
                .HasForeignKey(d => d.Filenoteid)
                .HasConstraintName("FK_EVT_FILENOTE_X_FILENOTEID");
        });

        modelBuilder.Entity<EvtFindingX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Findingno });

            entity.ToTable("EVT_FINDING_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_FINDING_X");
                    tb.HasTrigger("audins_EVT_FINDING_X");
                    tb.HasTrigger("audupd_EVT_FINDING_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Findingno).HasColumnName("FINDINGNO");
            entity.Property(e => e.Dateenteredfinding)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTEREDFINDING");
            entity.Property(e => e.Findingenteredbyhrid).HasColumnName("FINDINGENTEREDBYHRID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Investigationfinding)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("INVESTIGATIONFINDING");
            entity.Property(e => e.Stepstopreventrecurrence).HasColumnName("STEPSTOPREVENTRECURRENCE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Whynorecurrencesteps)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("WHYNORECURRENCESTEPS");

            entity.HasOne(d => d.Event).WithMany(p => p.EvtFindingXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_FINDING_X_EVENTID");

            entity.HasOne(d => d.Findingenteredbyhr).WithMany(p => p.EvtFindingXes)
                .HasForeignKey(d => d.Findingenteredbyhrid)
                .HasConstraintName("FK_EVT_FINDING_X_FINDINGENTEREDBYHRID");
        });

        modelBuilder.Entity<EvtIcamX>(entity =>
        {
            entity.HasKey(e => e.Eventid);

            entity.ToTable("EVT_ICAM_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_ICAM_X");
                    tb.HasTrigger("audins_EVT_ICAM_X");
                    tb.HasTrigger("audupd_EVT_ICAM_X");
                });

            entity.Property(e => e.Eventid)
                .ValueGeneratedNever()
                .HasColumnName("EVENTID");
            entity.Property(e => e.Absentcomments)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("ABSENTCOMMENTS");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Individualteamcomments)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("INDIVIDUALTEAMCOMMENTS");
            entity.Property(e => e.Isolatemakesafe).HasColumnName("ISOLATEMAKESAFE");
            entity.Property(e => e.Isolatemakesafecomments)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("ISOLATEMAKESAFECOMMENTS");
            entity.Property(e => e.Medicalassistance).HasColumnName("MEDICALASSISTANCE");
            entity.Property(e => e.Medicalassistancecomments)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("MEDICALASSISTANCECOMMENTS");
            entity.Property(e => e.Notifystakeholders).HasColumnName("NOTIFYSTAKEHOLDERS");
            entity.Property(e => e.Notifystakeholderscomments)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("NOTIFYSTAKEHOLDERSCOMMENTS");
            entity.Property(e => e.Orgfactorcomments)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("ORGFACTORCOMMENTS");
            entity.Property(e => e.Taskenvironmentcomments)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("TASKENVIRONMENTCOMMENTS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithOne(p => p.EvtIcamX)
                .HasForeignKey<EvtIcamX>(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_ICAM_X_EVENTID");
        });

        modelBuilder.Entity<EvtIcamcontribfactorX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Factorno });

            entity.ToTable("EVT_ICAMCONTRIBFACTOR_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_ICAMCONTRIBFACTOR_X");
                    tb.HasTrigger("audins_EVT_ICAMCONTRIBFACTOR_X");
                    tb.HasTrigger("audupd_EVT_ICAMCONTRIBFACTOR_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Factorno).HasColumnName("FACTORNO");
            entity.Property(e => e.Factor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FACTOR");
            entity.Property(e => e.Factorcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FACTORCATEGORY");
            entity.Property(e => e.Factorresult)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FACTORRESULT");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtIcamcontribfactorXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_ICAMCONTRIBFACTOR_X_EVENTID");
        });

        modelBuilder.Entity<EvtInvestigationX>(entity =>
        {
            entity.HasKey(e => e.Eventid);

            entity.ToTable("EVT_INVESTIGATION_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_INVESTIGATION_X");
                    tb.HasTrigger("audins_EVT_INVESTIGATION_X");
                    tb.HasTrigger("audupd_EVT_INVESTIGATION_X");
                });

            entity.Property(e => e.Eventid)
                .ValueGeneratedNever()
                .HasColumnName("EVENTID");
            entity.Property(e => e.Actiontaken)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ACTIONTAKEN");
            entity.Property(e => e.Assisstanceprovided)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ASSISSTANCEPROVIDED");
            entity.Property(e => e.Completedbyhrid).HasColumnName("COMPLETEDBYHRID");
            entity.Property(e => e.Consultationdetails)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("CONSULTATIONDETAILS");
            entity.Property(e => e.Controlmeasures)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("CONTROLMEASURES");
            entity.Property(e => e.Correctiveactionplanrequired).HasColumnName("CORRECTIVEACTIONPLANREQUIRED");
            entity.Property(e => e.Datecommenced)
                .HasColumnType("datetime")
                .HasColumnName("DATECOMMENCED");
            entity.Property(e => e.Datecompleted)
                .HasColumnType("datetime")
                .HasColumnName("DATECOMPLETED");
            entity.Property(e => e.Datefeedbackprovided)
                .HasColumnType("datetime")
                .HasColumnName("DATEFEEDBACKPROVIDED");
            entity.Property(e => e.Datereferred)
                .HasColumnType("datetime")
                .HasColumnName("DATEREFERRED");
            entity.Property(e => e.Debriefinggiven).HasColumnName("DEBRIEFINGGIVEN");
            entity.Property(e => e.Detailedinvestigationrequired)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DETAILEDINVESTIGATIONREQUIRED");
            entity.Property(e => e.Detailsofpin)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("DETAILSOFPIN");
            entity.Property(e => e.Eliminaterisk).HasColumnName("ELIMINATERISK");
            entity.Property(e => e.Explainothersawareofevent)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("EXPLAINOTHERSAWAREOFEVENT");
            entity.Property(e => e.Externaldate)
                .HasColumnType("datetime")
                .HasColumnName("EXTERNALDATE");
            entity.Property(e => e.Feedbackprovided).HasColumnName("FEEDBACKPROVIDED");
            entity.Property(e => e.Firsttimereported).HasColumnName("FIRSTTIMEREPORTED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Haspinbeenissued).HasColumnName("HASPINBEENISSUED");
            entity.Property(e => e.Hazardcontrolled).HasColumnName("HAZARDCONTROLLED");
            entity.Property(e => e.Hazardrequirereassessment).HasColumnName("HAZARDREQUIREREASSESSMENT");
            entity.Property(e => e.Hsrconsulted)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HSRCONSULTED");
            entity.Property(e => e.Hsrhrid).HasColumnName("HSRHRID");
            entity.Property(e => e.Immediateaction)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("IMMEDIATEACTION");
            entity.Property(e => e.Internaldate)
                .HasColumnType("datetime")
                .HasColumnName("INTERNALDATE");
            entity.Property(e => e.Investigationcomplete).HasColumnName("INVESTIGATIONCOMPLETE");
            entity.Property(e => e.Investigationduedate)
                .HasColumnType("datetime")
                .HasColumnName("INVESTIGATIONDUEDATE");
            entity.Property(e => e.Isassisstancerequired).HasColumnName("ISASSISSTANCEREQUIRED");
            entity.Property(e => e.Isolatehazard).HasColumnName("ISOLATEHAZARD");
            entity.Property(e => e.Levelofharm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LEVELOFHARM");
            entity.Property(e => e.Likelihoodofharm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIKELIHOODOFHARM");
            entity.Property(e => e.Nochangeproposed).HasColumnName("NOCHANGEPROPOSED");
            entity.Property(e => e.Nochangeproposedreason)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("NOCHANGEPROPOSEDREASON");
            entity.Property(e => e.Provideppe).HasColumnName("PROVIDEPPE");
            entity.Property(e => e.Reassessmentduedate)
                .HasColumnType("datetime")
                .HasColumnName("REASSESSMENTDUEDATE");
            entity.Property(e => e.Reassessmentpersonresp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REASSESSMENTPERSONRESP");
            entity.Property(e => e.Recurrencewhynoteffective)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("RECURRENCEWHYNOTEFFECTIVE");
            entity.Property(e => e.Reduceexposure).HasColumnName("REDUCEEXPOSURE");
            entity.Property(e => e.Reducerisk).HasColumnName("REDUCERISK");
            entity.Property(e => e.Referredtoextbody).HasColumnName("REFERREDTOEXTBODY");
            entity.Property(e => e.Requireregulatornotification).HasColumnName("REQUIREREGULATORNOTIFICATION");
            entity.Property(e => e.Responsibleforextinvestigation)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("RESPONSIBLEFOREXTINVESTIGATION");
            entity.Property(e => e.Riskrating)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RISKRATING");
            entity.Property(e => e.Sitepreserved).HasColumnName("SITEPRESERVED");
            entity.Property(e => e.Statusdatetime)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATETIME");
            entity.Property(e => e.Substitutehazard).HasColumnName("SUBSTITUTEHAZARD");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Whsconsultanthrid).HasColumnName("WHSCONSULTANTHRID");
            entity.Property(e => e.Whynocorrectiveaction)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("WHYNOCORRECTIVEACTION");
            entity.Property(e => e.Whynofeedbackprovided)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("WHYNOFEEDBACKPROVIDED");

            entity.HasOne(d => d.Completedbyhr).WithMany(p => p.EvtInvestigationXCompletedbyhrs)
                .HasForeignKey(d => d.Completedbyhrid)
                .HasConstraintName("EVT_INVESTIGATION_X_COMPLETEDBYHRID");

            entity.HasOne(d => d.Event).WithOne(p => p.EvtInvestigationX)
                .HasForeignKey<EvtInvestigationX>(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_INVESTIGATION_X_EVENTID");

            entity.HasOne(d => d.Hsrhr).WithMany(p => p.EvtInvestigationXHsrhrs)
                .HasForeignKey(d => d.Hsrhrid)
                .HasConstraintName("EVT_INVESTIGATION_X_HSRHRID");

            entity.HasOne(d => d.Whsconsultanthr).WithMany(p => p.EvtInvestigationXWhsconsultanthrs)
                .HasForeignKey(d => d.Whsconsultanthrid)
                .HasConstraintName("EVT_INVESTIGATION_X_WHSCONSULTANTHRID");
        });

        modelBuilder.Entity<EvtInvestigationdocX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Docno });

            entity.ToTable("EVT_INVESTIGATIONDOC_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_INVESTIGATIONDOC_X");
                    tb.HasTrigger("audins_EVT_INVESTIGATIONDOC_X");
                    tb.HasTrigger("audupd_EVT_INVESTIGATIONDOC_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Docno).HasColumnName("DOCNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Privilegedandconfidential).HasColumnName("PRIVILEGEDANDCONFIDENTIAL");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Document).WithMany(p => p.EvtInvestigationdocXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_EVT_INVESTIGATIONDOC_X_DOCUMENTID");

            entity.HasOne(d => d.Event).WithMany(p => p.EvtInvestigationdocXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_INVESTIGATIONDOC_X_EVENTID");
        });

        modelBuilder.Entity<EvtInvestigationmechanismX>(entity =>
        {
            entity.HasKey(e => e.Eventid);

            entity.ToTable("EVT_INVESTIGATIONMECHANISM_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_INVESTIGATIONMECHAN");
                    tb.HasTrigger("audins_EVT_INVESTIGATIONMECHAN");
                    tb.HasTrigger("audupd_EVT_INVESTIGATIONMECHAN");
                });

            entity.Property(e => e.Eventid)
                .ValueGeneratedNever()
                .HasColumnName("EVENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Mbdylifting)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MBDYLIFTING");
            entity.Property(e => e.Mbdynoobjects)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MBDYNOOBJECTS");
            entity.Property(e => e.Mbdyotherthanlifting)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MBDYOTHERTHANLIFTING");
            entity.Property(e => e.Mbdyrepetitive)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MBDYREPETITIVE");
            entity.Property(e => e.Mbiohuman)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MBIOHUMAN");
            entity.Property(e => e.Mbiononhuman)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MBIONONHUMAN");
            entity.Property(e => e.Mchminsectbites).HasColumnName("MCHMINSECTBITES");
            entity.Property(e => e.Mchminsectbitesdetail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MCHMINSECTBITESDETAIL");
            entity.Property(e => e.Mchmlongtermcontact)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MCHMLONGTERMCONTACT");
            entity.Property(e => e.Mchmothercontact)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MCHMOTHERCONTACT");
            entity.Property(e => e.Mchmpoisonousplant).HasColumnName("MCHMPOISONOUSPLANT");
            entity.Property(e => e.Mchmpoisonousplantdetail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MCHMPOISONOUSPLANTDETAIL");
            entity.Property(e => e.Mchmsinglecontact)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MCHMSINGLECONTACT");
            entity.Property(e => e.Mechanismofevent)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MECHANISMOFEVENT");
            entity.Property(e => e.Menvcoldobject)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MENVCOLDOBJECT");
            entity.Property(e => e.Menvelectricity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MENVELECTRICITY");
            entity.Property(e => e.Menvenvcold)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MENVENVCOLD");
            entity.Property(e => e.Menvenvheat)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MENVENVHEAT");
            entity.Property(e => e.Menvexposurefactorsinvolved)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MENVEXPOSUREFACTORSINVOLVED");
            entity.Property(e => e.Menvexposureotherenvfactors).HasColumnName("MENVEXPOSUREOTHERENVFACTORS");
            entity.Property(e => e.Menvhotobject)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MENVHOTOBJECT");
            entity.Property(e => e.Menvimmersiondrowning).HasColumnName("MENVIMMERSIONDROWNING");
            entity.Property(e => e.Menvimmersionwatertype)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MENVIMMERSIONWATERTYPE");
            entity.Property(e => e.Menvionradiation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MENVIONRADIATION");
            entity.Property(e => e.Menvnonionradiation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MENVNONIONRADIATION");
            entity.Property(e => e.Menvreportedtotheotr).HasColumnName("MENVREPORTEDTOTHEOTR");
            entity.Property(e => e.Mfaldescription)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("MFALDESCRIPTION");
            entity.Property(e => e.Mfalheight)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MFALHEIGHT");
            entity.Property(e => e.Mfalsamelevel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MFALSAMELEVEL");
            entity.Property(e => e.Mhitassault)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MHITASSAULT");
            entity.Property(e => e.Mhitbittenanimal)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MHITBITTENANIMAL");
            entity.Property(e => e.Mhitfalling)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MHITFALLING");
            entity.Property(e => e.Mhitmachinery).HasColumnName("MHITMACHINERY");
            entity.Property(e => e.Mhitmovingobject)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MHITMOVINGOBJECT");
            entity.Property(e => e.Mhitpersonaccident)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MHITPERSONACCIDENT");
            entity.Property(e => e.Mhittrappedstationary).HasColumnName("MHITTRAPPEDSTATIONARY");
            entity.Property(e => e.Mmechvibration)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MMECHVIBRATION");
            entity.Property(e => e.Mmeneapaccessed).HasColumnName("MMENEAPACCESSED");
            entity.Property(e => e.Mmenexposedtosuicideincident).HasColumnName("MMENEXPOSEDTOSUICIDEINCIDENT");
            entity.Property(e => e.Mmeninrelationtosuicide).HasColumnName("MMENINRELATIONTOSUICIDE");
            entity.Property(e => e.Mmenreferredtoeap).HasColumnName("MMENREFERREDTOEAP");
            entity.Property(e => e.Mmensexualharassment)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MMENSEXUALHARASSMENT");
            entity.Property(e => e.Mmentraumaticevent)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MMENTRAUMATICEVENT");
            entity.Property(e => e.Mmenworkharassment)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MMENWORKHARASSMENT");
            entity.Property(e => e.Mmenworkplaceviolence)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MMENWORKPLACEVIOLENCE");
            entity.Property(e => e.Mmenworkpressure)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MMENWORKPRESSURE");
            entity.Property(e => e.Mobjmoving)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MOBJMOVING");
            entity.Property(e => e.Mobjrubbing)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MOBJRUBBING");
            entity.Property(e => e.Mobjstationary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MOBJSTATIONARY");
            entity.Property(e => e.Msndchgpressureexp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MSNDCHGPRESSUREEXP");
            entity.Property(e => e.Msndlongterm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MSNDLONGTERM");
            entity.Property(e => e.Msndnoisereadingdb)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("MSNDNOISEREADINGDB");
            entity.Property(e => e.Msndothrvarpressure)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MSNDOTHRVARPRESSURE");
            entity.Property(e => e.Msndsingle)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MSNDSINGLE");
            entity.Property(e => e.Mvehinvolvemotorvehicle)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MVEHINVOLVEMOTORVEHICLE");
            entity.Property(e => e.Mvehlandcollapse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MVEHLANDCOLLAPSE");
            entity.Property(e => e.Mvehmultiplemechanism)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MVEHMULTIPLEMECHANISM");
            entity.Property(e => e.Mvehrolloverequipment)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MVEHROLLOVEREQUIPMENT");
            entity.Property(e => e.Mvehunabletoidentify)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MVEHUNABLETOIDENTIFY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithOne(p => p.EvtInvestigationmechanismX)
                .HasForeignKey<EvtInvestigationmechanismX>(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_INVESTIGATIONMECHANISM_X_EVENTID");
        });

        modelBuilder.Entity<EvtInvestigationreviewX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Reviewno });

            entity.ToTable("EVT_INVESTIGATIONREVIEW_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_INVESTIGATIONREVIEW");
                    tb.HasTrigger("audins_EVT_INVESTIGATIONREVIEW");
                    tb.HasTrigger("audupd_EVT_INVESTIGATIONREVIEW");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Reviewno).HasColumnName("REVIEWNO");
            entity.Property(e => e.Datereviewed)
                .HasColumnType("datetime")
                .HasColumnName("DATEREVIEWED");
            entity.Property(e => e.Detailsofcorrectiveactions)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("DETAILSOFCORRECTIVEACTIONS");
            entity.Property(e => e.Endorsement)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENDORSEMENT");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Investigationreviewdropdown)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INVESTIGATIONREVIEWDROPDOWN");
            entity.Property(e => e.Reviewactions).HasColumnName("REVIEWACTIONS");
            entity.Property(e => e.Reviewedbyhrid).HasColumnName("REVIEWEDBYHRID");
            entity.Property(e => e.Reviewedsecurityrating).HasColumnName("REVIEWEDSECURITYRATING");
            entity.Property(e => e.Reviewfindings).HasColumnName("REVIEWFINDINGS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtInvestigationreviewXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_INVESTIGATIONREVIEW_X_EVENTID");

            entity.HasOne(d => d.Reviewedbyhr).WithMany(p => p.EvtInvestigationreviewXes)
                .HasForeignKey(d => d.Reviewedbyhrid)
                .HasConstraintName("FK_EVT_INVESTIGATIONREVIEW_X_REVIEWEDBYHRID");
        });

        modelBuilder.Entity<EvtInvestigatorsX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Investigatorno });

            entity.ToTable("EVT_INVESTIGATORS_X", tb =>
                {
                    tb.HasTrigger("TRIG_EVT_INVESTIGATORS_X");
                    tb.HasTrigger("auddel_EVT_INVESTIGATORS_X");
                    tb.HasTrigger("audins_EVT_INVESTIGATORS_X");
                    tb.HasTrigger("audupd_EVT_INVESTIGATORS_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Investigatorno).HasColumnName("INVESTIGATORNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Islead).HasColumnName("ISLEAD");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtInvestigatorsXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_INVESTIGATORS_X_EVENTID");

            entity.HasOne(d => d.Hr).WithMany(p => p.EvtInvestigatorsXes)
                .HasForeignKey(d => d.Hrid)
                .HasConstraintName("FK_EVT_INVESTIGATORS_X_HRID");
        });

        modelBuilder.Entity<EvtNotificationcontactX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Notificationno });

            entity.ToTable("EVT_NOTIFICATIONCONTACT_X", tb =>
                {
                    tb.HasTrigger("TRIG_EVT_NOTIFICATIONCONTACT_X");
                    tb.HasTrigger("auddel_EVT_NOTIFICATIONCONTACT");
                    tb.HasTrigger("audins_EVT_NOTIFICATIONCONTACT");
                    tb.HasTrigger("audupd_EVT_NOTIFICATIONCONTACT");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Notificationno).HasColumnName("NOTIFICATIONNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtNotificationcontactXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_NOTIFICATIONCONTACT_X_EVENTID");

            entity.HasOne(d => d.Hr).WithMany(p => p.EvtNotificationcontactXes)
                .HasForeignKey(d => d.Hrid)
                .HasConstraintName("EVT_NOTIFICATIONCONTACT_X_HRID");
        });

        modelBuilder.Entity<EvtNotificationhistoryX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Notificationhistoryno });

            entity.ToTable("EVT_NOTIFICATIONHISTORY_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_NOTIFICATIONHISTORY");
                    tb.HasTrigger("audins_EVT_NOTIFICATIONHISTORY");
                    tb.HasTrigger("audupd_EVT_NOTIFICATIONHISTORY");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Notificationhistoryno).HasColumnName("NOTIFICATIONHISTORYNO");
            entity.Property(e => e.Body)
                .IsUnicode(false)
                .HasColumnName("BODY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Notificationdatetime)
                .HasColumnType("datetime")
                .HasColumnName("NOTIFICATIONDATETIME");
            entity.Property(e => e.Recipients)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("RECIPIENTS");
            entity.Property(e => e.Subject)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Triggeringevent)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRIGGERINGEVENT");

            entity.HasOne(d => d.Event).WithMany(p => p.EvtNotificationhistoryXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_NOTIFICATIONHISTORY_X_EVENTID");
        });

        modelBuilder.Entity<EvtOthervehicleX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Othervehicleno });

            entity.ToTable("EVT_OTHERVEHICLE_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_OTHERVEHICLE_X");
                    tb.HasTrigger("audins_EVT_OTHERVEHICLE_X");
                    tb.HasTrigger("audupd_EVT_OTHERVEHICLE_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Othervehicleno).HasColumnName("OTHERVEHICLENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Othercontactdetails)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("OTHERCONTACTDETAILS");
            entity.Property(e => e.Otherfullnameofdriver)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OTHERFULLNAMEOFDRIVER");
            entity.Property(e => e.Otherinsurancedetails)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("OTHERINSURANCEDETAILS");
            entity.Property(e => e.Otherlicencenumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OTHERLICENCENUMBER");
            entity.Property(e => e.Otherregistrationno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OTHERREGISTRATIONNO");
            entity.Property(e => e.Othervehiclemake)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OTHERVEHICLEMAKE");
            entity.Property(e => e.Othervehiclemodel)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OTHERVEHICLEMODEL");
            entity.Property(e => e.Othervehicletype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OTHERVEHICLETYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtOthervehicleXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_OTHERVEHICLE_X_EVENTID");
        });

        modelBuilder.Entity<EvtPdfX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Pdfno }).HasName("PK_EVT_PDF_X_EVENTID_DOCNO");

            entity.ToTable("EVT_PDF_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_PDF_X");
                    tb.HasTrigger("audins_EVT_PDF_X");
                    tb.HasTrigger("audupd_EVT_PDF_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Pdfno).HasColumnName("PDFNO");
            entity.Property(e => e.Datetimegenerated)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMEGENERATED");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Statushistoryno).HasColumnName("STATUSHISTORYNO");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Document).WithMany(p => p.EvtPdfXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_EVT_PDF_X_DOCUMENTID");

            entity.HasOne(d => d.Event).WithMany(p => p.EvtPdfXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_PDF_X_EVENTID");

            entity.HasOne(d => d.EvtStatushistoryX).WithMany(p => p.EvtPdfXes)
                .HasForeignKey(d => new { d.Eventid, d.Statushistoryno })
                .HasConstraintName("FK_EVT_PDF_X_EVENTID_STATUSHISTORYNO");
        });

        modelBuilder.Entity<EvtPersoninvolvedX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Personinvolvedno });

            entity.ToTable("EVT_PERSONINVOLVED_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_PERSONINVOLVED_X");
                    tb.HasTrigger("audins_EVT_PERSONINVOLVED_X");
                    tb.HasTrigger("audupd_EVT_PERSONINVOLVED_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Personinvolvedno).HasColumnName("PERSONINVOLVEDNO");
            entity.Property(e => e.Affectedbyfatigue).HasColumnName("AFFECTEDBYFATIGUE");
            entity.Property(e => e.Bodilylocationl2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATIONL2");
            entity.Property(e => e.Clientid)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CLIENTID");
            entity.Property(e => e.Clientnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CLIENTNUMBER");
            entity.Property(e => e.Contactnumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CONTACTNUMBER");
            entity.Property(e => e.Dateworkceased)
                .HasColumnType("datetime")
                .HasColumnName("DATEWORKCEASED");
            entity.Property(e => e.Descriptionofinjury)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTIONOFINJURY");
            entity.Property(e => e.Descriptionoftreatment)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTIONOFTREATMENT");
            entity.Property(e => e.Emailaddress)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAILADDRESS");
            entity.Property(e => e.Employeeno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEENO");
            entity.Property(e => e.Familyname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAMILYNAME");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GENDER");
            entity.Property(e => e.Givennames)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GIVENNAMES");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Initialtreatmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INITIALTREATMENTTYPE");
            entity.Property(e => e.Injury)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("INJURY");
            entity.Property(e => e.Injuryside)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYSIDE");
            entity.Property(e => e.Involvement)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INVOLVEMENT");
            entity.Property(e => e.Nonemployeetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NONEMPLOYEETYPE");
            entity.Property(e => e.Occupation)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Percentofshiftcomplete)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERCENTOFSHIFTCOMPLETE");
            entity.Property(e => e.Persontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERSONTYPE");
            entity.Property(e => e.Relationshiptosubject)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RELATIONSHIPTOSUBJECT");
            entity.Property(e => e.Subjectofcomplaint)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUBJECTOFCOMPLAINT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Timeworkceased)
                .HasColumnType("datetime")
                .HasColumnName("TIMEWORKCEASED");
            entity.Property(e => e.Workceased).HasColumnName("WORKCEASED");
            entity.Property(e => e.Workstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WORKSTATUS");

            entity.HasOne(d => d.Event).WithMany(p => p.EvtPersoninvolvedXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_PERSONINVOLVED_X_EVENTID");

            entity.HasOne(d => d.Hr).WithMany(p => p.EvtPersoninvolvedXes)
                .HasForeignKey(d => d.Hrid)
                .HasConstraintName("EVT_PERSONINVOLVED_X_HRID");
        });

        modelBuilder.Entity<EvtPsychinvolveX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Involvedno });

            entity.ToTable("EVT_PSYCHINVOLVE_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_PSYCHINVOLVE_X");
                    tb.HasTrigger("audins_EVT_PSYCHINVOLVE_X");
                    tb.HasTrigger("audupd_EVT_PSYCHINVOLVE_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Involvedno).HasColumnName("INVOLVEDNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Persontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERSONTYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtPsychinvolveXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_PSYCHINVOLVE_X_EVENTID");
        });

        modelBuilder.Entity<EvtPwresettokenX>(entity =>
        {
            entity.ToTable("EVT_PWRESETTOKEN_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_PWRESETTOKEN_X");
                    tb.HasTrigger("audins_EVT_PWRESETTOKEN_X");
                    tb.HasTrigger("audupd_EVT_PWRESETTOKEN_X");
                });

            entity.HasIndex(e => e.Tokenguid, "UQ__EVT_PWRE__86466520A54CC282").IsUnique();

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Datetimecreated)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMECREATED");
            entity.Property(e => e.Datetimeexpired)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMEEXPIRED");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Isconsumed).HasColumnName("ISCONSUMED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Tokenguid)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("TOKENGUID");

            entity.HasOne(d => d.Hr).WithMany(p => p.EvtPwresettokenXes)
                .HasForeignKey(d => d.Hrid)
                .HasConstraintName("FK_EVT_PWRESETTOKEN_X_HRID");
        });

        modelBuilder.Entity<EvtReferredagencyX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Agencyno });

            entity.ToTable("EVT_REFERREDAGENCY_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_REFERREDAGENCY_X");
                    tb.HasTrigger("audins_EVT_REFERREDAGENCY_X");
                    tb.HasTrigger("audupd_EVT_REFERREDAGENCY_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Agencyno).HasColumnName("AGENCYNO");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtReferredagencyXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_REFERREDAGENCY_X_EVENTID");
        });

        modelBuilder.Entity<EvtRegnotificationX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Notificationno });

            entity.ToTable("EVT_REGNOTIFICATION_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_REGNOTIFICATION_X");
                    tb.HasTrigger("audins_EVT_REGNOTIFICATION_X");
                    tb.HasTrigger("audupd_EVT_REGNOTIFICATION_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Notificationno).HasColumnName("NOTIFICATIONNO");
            entity.Property(e => e.Dangerousincidenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DANGEROUSINCIDENTTYPE");
            entity.Property(e => e.Datereportedtoregulator)
                .HasColumnType("datetime")
                .HasColumnName("DATEREPORTEDTOREGULATOR");
            entity.Property(e => e.Filenumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FILENUMBER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Idnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IDNUMBER");
            entity.Property(e => e.Injuryillnesstype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYILLNESSTYPE");
            entity.Property(e => e.Notifiableincidenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOTIFIABLEINCIDENTTYPE");
            entity.Property(e => e.Regulatornotified)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REGULATORNOTIFIED");
            entity.Property(e => e.Timereportedtoregulator)
                .HasColumnType("datetime")
                .HasColumnName("TIMEREPORTEDTOREGULATOR");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtRegnotificationXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_REGNOTIFICATION_X_EVENTID");
        });

        modelBuilder.Entity<EvtRelateduser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EVT_RELATEDUSERS");

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Recordtype)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("RECORDTYPE");
        });

        modelBuilder.Entity<EvtSecurityX>(entity =>
        {
            entity.HasKey(e => new { e.Hrid, e.Eventid }).IsClustered(false);

            entity.ToTable("EVT_SECURITY_X", "secure");

            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Versionnumber).HasColumnName("VERSIONNUMBER");

            entity.HasOne(d => d.Hr).WithMany(p => p.EvtSecurityXes)
                .HasForeignKey(d => d.Hrid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EVT_SECURITY_X_HRID");
        });

        modelBuilder.Entity<EvtSecuritycontrolX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Typeno });

            entity.ToTable("EVT_SECURITYCONTROL_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_SECURITYCONTROL_X");
                    tb.HasTrigger("audins_EVT_SECURITYCONTROL_X");
                    tb.HasTrigger("audupd_EVT_SECURITYCONTROL_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Typeno).HasColumnName("TYPENO");
            entity.Property(e => e.Controltype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTROLTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtSecuritycontrolXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_SECURITYCONTROL_X_EVENTID");
        });

        modelBuilder.Entity<EvtSecuritytypeX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Typeno });

            entity.ToTable("EVT_SECURITYTYPE_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_SECURITYTYPE_X");
                    tb.HasTrigger("audins_EVT_SECURITYTYPE_X");
                    tb.HasTrigger("audupd_EVT_SECURITYTYPE_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Typeno).HasColumnName("TYPENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Securitytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SECURITYTYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtSecuritytypeXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_SECURITYTYPE_X_EVENTID");
        });

        modelBuilder.Entity<EvtSleeptypeX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Typeno });

            entity.ToTable("EVT_SLEEPTYPE_X");

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Typeno).HasColumnName("TYPENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Sleeptype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SLEEPTYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtSleeptypeXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_SLEEPTYPE_X_EVENTID");
        });

        modelBuilder.Entity<EvtStatusX>(entity =>
        {
            entity.HasKey(e => e.Eventid);

            entity.ToTable("EVT_STATUS_X", tb =>
                {
                    tb.HasTrigger("TRIG_EVT_STATUS_X");
                    tb.HasTrigger("auddel_EVT_STATUS_X");
                    tb.HasTrigger("audins_EVT_STATUS_X");
                    tb.HasTrigger("audupd_EVT_STATUS_X");
                });

            entity.Property(e => e.Eventid)
                .ValueGeneratedNever()
                .HasColumnName("EVENTID");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMECHANGED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithOne(p => p.EvtStatusX)
                .HasForeignKey<EvtStatusX>(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_STATUS_X_EVENTID");

            entity.HasOne(d => d.Hr).WithMany(p => p.EvtStatusXes)
                .HasForeignKey(d => d.Hrid)
                .HasConstraintName("EVT_STATUS_X_HRID");
        });

        modelBuilder.Entity<EvtStatushistoryX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Historyno });

            entity.ToTable("EVT_STATUSHISTORY_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_STATUSHISTORY_X");
                    tb.HasTrigger("audins_EVT_STATUSHISTORY_X");
                    tb.HasTrigger("audupd_EVT_STATUSHISTORY_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Historyno).HasColumnName("HISTORYNO");
            entity.Property(e => e.Changedbyhrid).HasColumnName("CHANGEDBYHRID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Changedbyhr).WithMany(p => p.EvtStatushistoryXes)
                .HasForeignKey(d => d.Changedbyhrid)
                .HasConstraintName("FK_EVT_STATUSHISTORY_X_CHANGEDBYHRID");

            entity.HasOne(d => d.Event).WithMany(p => p.EvtStatushistoryXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_STATUSHISTORY_X_EVENTID");
        });

        modelBuilder.Entity<EvtStatushistorydocX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Historyno });

            entity.ToTable("EVT_STATUSHISTORYDOC_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_STATUSHISTORYDOC_X");
                    tb.HasTrigger("audins_EVT_STATUSHISTORYDOC_X");
                    tb.HasTrigger("audupd_EVT_STATUSHISTORYDOC_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Historyno).HasColumnName("HISTORYNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Document).WithMany(p => p.EvtStatushistorydocXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_EVT_STATUSHISTORYDOC_X_DOCUMENTID");

            entity.HasOne(d => d.Event).WithMany(p => p.EvtStatushistorydocXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_STATUSHISTORYDOC_X_EVENTID");
        });

        modelBuilder.Entity<EvtTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EVT_TASK");

            entity.Property(e => e.ActionType)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.RecordType)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Reference)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.TargetDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<EvtVehicleX>(entity =>
        {
            entity.HasKey(e => e.Eventid);

            entity.ToTable("EVT_VEHICLE_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_VEHICLE_X");
                    tb.HasTrigger("audins_EVT_VEHICLE_X");
                    tb.HasTrigger("audupd_EVT_VEHICLE_X");
                });

            entity.Property(e => e.Eventid)
                .ValueGeneratedNever()
                .HasColumnName("EVENTID");
            entity.Property(e => e.Fleetno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FLEETNO");
            entity.Property(e => e.Fullnameofdriver)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("FULLNAMEOFDRIVER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Lengthoftimedriving)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LENGTHOFTIMEDRIVING");
            entity.Property(e => e.Licencenumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("LICENCENUMBER");
            entity.Property(e => e.Othervehicleunknown).HasColumnName("OTHERVEHICLEUNKNOWN");
            entity.Property(e => e.Registrationno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("REGISTRATIONNO");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Vehiclemake)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHICLEMAKE");
            entity.Property(e => e.Vehiclemodel)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHICLEMODEL");
            entity.Property(e => e.Vehiclespeed)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHICLESPEED");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VEHICLETYPE");
            entity.Property(e => e.Vehicleunregistered).HasColumnName("VEHICLEUNREGISTERED");
            entity.Property(e => e.Vehroadconditions)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHROADCONDITIONS");
            entity.Property(e => e.Vehweatherconditions)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHWEATHERCONDITIONS");

            entity.HasOne(d => d.Event).WithOne(p => p.EvtVehicleX)
                .HasForeignKey<EvtVehicleX>(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_VEHICLE_X_EVENTID");
        });

        modelBuilder.Entity<EvtVehiclecollisionX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Collisionno });

            entity.ToTable("EVT_VEHICLECOLLISION_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_VEHICLECOLLISION_X");
                    tb.HasTrigger("audins_EVT_VEHICLECOLLISION_X");
                    tb.HasTrigger("audupd_EVT_VEHICLECOLLISION_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Collisionno).HasColumnName("COLLISIONNO");
            entity.Property(e => e.Details)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DETAILS");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtVehiclecollisionXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_VEHICLECOLLISION_X_EVENTID");
        });

        modelBuilder.Entity<EvtVehicleinvolvedX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Vehicleinvolvedno });

            entity.ToTable("EVT_VEHICLEINVOLVED_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_VEHICLEINVOLVED_X");
                    tb.HasTrigger("audins_EVT_VEHICLEINVOLVED_X");
                    tb.HasTrigger("audupd_EVT_VEHICLEINVOLVED_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Vehicleinvolvedno).HasColumnName("VEHICLEINVOLVEDNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Vehicleinvolvedtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VEHICLEINVOLVEDTYPE");

            entity.HasOne(d => d.Event).WithMany(p => p.EvtVehicleinvolvedXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_VEHICLEINVOLVED_X_EVENTID");
        });

        modelBuilder.Entity<EvtWhsreviewX>(entity =>
        {
            entity.HasKey(e => e.Eventid);

            entity.ToTable("EVT_WHSREVIEW_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_WHSREVIEW_X");
                    tb.HasTrigger("audins_EVT_WHSREVIEW_X");
                    tb.HasTrigger("audupd_EVT_WHSREVIEW_X");
                });

            entity.Property(e => e.Eventid)
                .ValueGeneratedNever()
                .HasColumnName("EVENTID");
            entity.Property(e => e.Agencyl1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCYL1");
            entity.Property(e => e.Agencyl2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCYL2");
            entity.Property(e => e.Agencyl3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCYL3");
            entity.Property(e => e.Agencyl4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCYL4");
            entity.Property(e => e.Bodilylocationl1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATIONL1");
            entity.Property(e => e.Bodilylocationl2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATIONL2");
            entity.Property(e => e.Bodilylocationl3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATIONL3");
            entity.Property(e => e.Completedbyhrid).HasColumnName("COMPLETEDBYHRID");
            entity.Property(e => e.Correctmechanism).HasColumnName("CORRECTMECHANISM");
            entity.Property(e => e.Datecompleted)
                .HasColumnType("datetime")
                .HasColumnName("DATECOMPLETED");
            entity.Property(e => e.Furtherinvestigationdetails)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("FURTHERINVESTIGATIONDETAILS");
            entity.Property(e => e.Furtherinvestigationrequired).HasColumnName("FURTHERINVESTIGATIONREQUIRED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Injuryside)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYSIDE");
            entity.Property(e => e.Mechanisml1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MECHANISML1");
            entity.Property(e => e.Mechanisml2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MECHANISML2");
            entity.Property(e => e.Naturel1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NATUREL1");
            entity.Property(e => e.Naturel2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NATUREL2");
            entity.Property(e => e.Reviewactions).HasColumnName("REVIEWACTIONS");
            entity.Property(e => e.Reviewdate)
                .HasColumnType("datetime")
                .HasColumnName("REVIEWDATE");
            entity.Property(e => e.Reviewedriskassessment).HasColumnName("REVIEWEDRISKASSESSMENT");
            entity.Property(e => e.Reviewfindings).HasColumnName("REVIEWFINDINGS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Willactionscontrolhazard).HasColumnName("WILLACTIONSCONTROLHAZARD");

            entity.HasOne(d => d.Completedbyhr).WithMany(p => p.EvtWhsreviewXes)
                .HasForeignKey(d => d.Completedbyhrid)
                .HasConstraintName("FK_EVT_WHSREVIEW_X_COMPLETEDBYHRID");

            entity.HasOne(d => d.Event).WithOne(p => p.EvtWhsreviewX)
                .HasForeignKey<EvtWhsreviewX>(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_WHSREVIEW_X_EVENTID");
        });

        modelBuilder.Entity<EvtWitnessX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Witnessno });

            entity.ToTable("EVT_WITNESS_X", tb =>
                {
                    tb.HasTrigger("auddel_EVT_WITNESS_X");
                    tb.HasTrigger("audins_EVT_WITNESS_X");
                    tb.HasTrigger("audupd_EVT_WITNESS_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Witnessno).HasColumnName("WITNESSNO");
            entity.Property(e => e.Descriptionofevent)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTIONOFEVENT");
            entity.Property(e => e.Emailaddress)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAILADDRESS");
            entity.Property(e => e.Familyname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAMILYNAME");
            entity.Property(e => e.Givennames)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GIVENNAMES");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Nonemployeetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NONEMPLOYEETYPE");
            entity.Property(e => e.Otherdetails)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("OTHERDETAILS");
            entity.Property(e => e.Persontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERSONTYPE");
            entity.Property(e => e.Phonenumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PHONENUMBER");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EvtWitnessXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVT_WITNESS_X_EVENTID");

            entity.HasOne(d => d.Hr).WithMany(p => p.EvtWitnessXes)
                .HasForeignKey(d => d.Hrid)
                .HasConstraintName("EVT_WITNESS_X_HRID");
        });

        modelBuilder.Entity<ExampleKinga>(entity =>
        {
            entity.HasKey(e => e.Pkid);

            entity.ToTable("EXAMPLE_KINGA", tb =>
                {
                    tb.HasTrigger("auddel_EXAMPLE_KINGA");
                    tb.HasTrigger("audins_EXAMPLE_KINGA");
                    tb.HasTrigger("audupd_EXAMPLE_KINGA");
                });

            entity.Property(e => e.Pkid).HasColumnName("PKID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Somedata)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SOMEDATA");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<FnDocument>(entity =>
        {
            entity.HasKey(e => new { e.Filenoteid, e.Documentno });

            entity.ToTable("FN_DOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_FN_DOCUMENT");
                    tb.HasTrigger("audins_FN_DOCUMENT");
                    tb.HasTrigger("audupd_FN_DOCUMENT");
                });

            entity.HasIndex(e => e.Documentid, "IDX_FN_DOCUMENT_DOCUMENTID");

            entity.Property(e => e.Filenoteid).HasColumnName("FILENOTEID");
            entity.Property(e => e.Documentno).HasColumnName("DOCUMENTNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.FnDocuments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_FN_DOCUMENT_DOCUMENTID");

            entity.HasOne(d => d.Filenote).WithMany(p => p.FnDocuments)
                .HasForeignKey(d => d.Filenoteid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FN_DOCUMENT_FILENOTEID");
        });

        modelBuilder.Entity<FnFilenote>(entity =>
        {
            entity.HasKey(e => e.Filenoteid);

            entity.ToTable("FN_FILENOTE", tb =>
                {
                    tb.HasTrigger("auddel_FN_FILENOTE");
                    tb.HasTrigger("audins_FN_FILENOTE");
                    tb.HasTrigger("audupd_FN_FILENOTE");
                });

            entity.HasIndex(e => new { e.Category, e.Filenoteid }, "IX_FN_FILENOTE_WF");

            entity.Property(e => e.Filenoteid).HasColumnName("FILENOTEID");
            entity.Property(e => e.Assignaction).HasColumnName("ASSIGNACTION");
            entity.Property(e => e.Category)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CATEGORY");
            entity.Property(e => e.Categorycodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CATEGORYCODETYPE");
            entity.Property(e => e.Confidential).HasColumnName("CONFIDENTIAL");
            entity.Property(e => e.Datecompleted)
                .HasColumnType("datetime")
                .HasColumnName("DATECOMPLETED");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("DUEDATE");
            entity.Property(e => e.Enteredbyuserid).HasColumnName("ENTEREDBYUSERID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("NOTE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reminderdate)
                .HasColumnType("datetime")
                .HasColumnName("REMINDERDATE");
            entity.Property(e => e.Subject)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.Timeentered)
                .HasColumnType("datetime")
                .HasColumnName("TIMEENTERED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Enteredbyuser).WithMany(p => p.FnFilenotes)
                .HasForeignKey(d => d.Enteredbyuserid)
                .HasConstraintName("FK_FN_FILENOTE_ENTEREDBYUSERID");
        });

        modelBuilder.Entity<FnResponsibility>(entity =>
        {
            entity.HasKey(e => new { e.Filenoteid, e.Responsibilityno });

            entity.ToTable("FN_RESPONSIBILITY", tb =>
                {
                    tb.HasTrigger("auddel_FN_RESPONSIBILITY");
                    tb.HasTrigger("audins_FN_RESPONSIBILITY");
                    tb.HasTrigger("audupd_FN_RESPONSIBILITY");
                });

            entity.Property(e => e.Filenoteid).HasColumnName("FILENOTEID");
            entity.Property(e => e.Responsibilityno).HasColumnName("RESPONSIBILITYNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Responsibilityofotheremail)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("RESPONSIBILITYOFOTHEREMAIL");
            entity.Property(e => e.Responsibilityofuserid).HasColumnName("RESPONSIBILITYOFUSERID");
            entity.Property(e => e.Responsibilitytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RESPONSIBILITYTYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Filenote).WithMany(p => p.FnResponsibilities)
                .HasForeignKey(d => d.Filenoteid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FN_RESPONSIBILITY_FILENOTEID");

            entity.HasOne(d => d.Responsibilityofuser).WithMany(p => p.FnResponsibilities)
                .HasForeignKey(d => d.Responsibilityofuserid)
                .HasConstraintName("FK_FN_RESPONSIBILITY_RESPONSIBILITYOFUSERID");
        });

        modelBuilder.Entity<GevtAggressionassaultX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Typeno });

            entity.ToTable("GEVT_AGGRESSIONASSAULT_X");

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Typeno).HasColumnName("TYPENO");
            entity.Property(e => e.Aggressiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGGRESSIONTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Gevent).WithMany(p => p.GevtAggressionassaultXes)
                .HasForeignKey(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_AGGRESSIONASSAULT_X_GEVENTID");
        });

        modelBuilder.Entity<GevtAggressorX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Aggressorno });

            entity.ToTable("GEVT_AGGRESSOR_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_AGGRESSOR_X");
                    tb.HasTrigger("audins_GEVT_AGGRESSOR_X");
                    tb.HasTrigger("audupd_GEVT_AGGRESSOR_X");
                });

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Aggressorno).HasColumnName("AGGRESSORNO");
            entity.Property(e => e.Ageofaggressor).HasColumnName("AGEOFAGGRESSOR");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Nameofaggressor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NAMEOFAGGRESSOR");
            entity.Property(e => e.Previousdisturbances).HasColumnName("PREVIOUSDISTURBANCES");
            entity.Property(e => e.Relationship)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATIONSHIP");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Gevent).WithMany(p => p.GevtAggressorXes)
                .HasForeignKey(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_AGGRESSOR_X_EVENTID");
        });

        modelBuilder.Entity<GevtDocumentX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Docno }).HasName("PK_GEVT_DOCUMENT_X_EVENTID_DOCNO");

            entity.ToTable("GEVT_DOCUMENT_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_DOCUMENT_X");
                    tb.HasTrigger("audins_GEVT_DOCUMENT_X");
                    tb.HasTrigger("audupd_GEVT_DOCUMENT_X");
                });

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Docno).HasColumnName("DOCNO");
            entity.Property(e => e.Confidential).HasColumnName("CONFIDENTIAL");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Document).WithMany(p => p.GevtDocumentXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_GEVT_DOCUMENT_X_DOCUMENTID");

            entity.HasOne(d => d.Gevent).WithMany(p => p.GevtDocumentXes)
                .HasForeignKey(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_DOCUMENT_X_EVENTID");
        });

        modelBuilder.Entity<GevtEventGuestX>(entity =>
        {
            entity.HasKey(e => e.Geventid);

            entity.ToTable("GEVT_EVENT_GUEST_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_EVENT_GUEST_X");
                    tb.HasTrigger("audins_GEVT_EVENT_GUEST_X");
                    tb.HasTrigger("audupd_GEVT_EVENT_GUEST_X");
                });

            entity.Property(e => e.Geventid)
                .ValueGeneratedNever()
                .HasColumnName("GEVENTID");
            entity.Property(e => e.Actiontakenbyname)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ACTIONTAKENBYNAME");
            entity.Property(e => e.Enteredbyemail)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ENTEREDBYEMAIL");
            entity.Property(e => e.Guestformstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GUESTFORMSTATUS");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Gevent).WithOne(p => p.GevtEventGuestX)
                .HasForeignKey<GevtEventGuestX>(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_EVENT_GUEST_X_EVENTID");
        });

        modelBuilder.Entity<GevtEventX>(entity =>
        {
            entity.HasKey(e => e.Geventid).HasName("PK_EVT_EVENT_X");

            entity.ToTable("GEVT_EVENT_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_EVENT_X");
                    tb.HasTrigger("audins_GEVT_EVENT_X");
                    tb.HasTrigger("audupd_GEVT_EVENT_X");
                });

            entity.HasIndex(e => e.Eventnumber, "UNQ_EVT_EVENT_X_EVENTNUMBER").IsUnique();

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Address1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Address3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS3");
            entity.Property(e => e.Aggressorbehaviouralviolence)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGGRESSORBEHAVIOURALVIOLENCE");
            entity.Property(e => e.Aggressorphysicalviolence)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGGRESSORPHYSICALVIOLENCE");
            entity.Property(e => e.Aggressorpropertyviolence).HasColumnName("AGGRESSORPROPERTYVIOLENCE");
            entity.Property(e => e.Aggressorverbalabuse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGGRESSORVERBALABUSE");
            entity.Property(e => e.Claggressionassault)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAGGRESSIONASSAULT");
            entity.Property(e => e.Clbehaviour)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLBEHAVIOUR");
            entity.Property(e => e.Clbodilylocationofinjury)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLBODILYLOCATIONOFINJURY");
            entity.Property(e => e.Clbusinessinterruption)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLBUSINESSINTERRUPTION");
            entity.Property(e => e.Clcareconcern)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLCARECONCERN");
            entity.Property(e => e.Cldateofcontact)
                .HasColumnType("datetime")
                .HasColumnName("CLDATEOFCONTACT");
            entity.Property(e => e.Cldateofsubmission)
                .HasColumnType("datetime")
                .HasColumnName("CLDATEOFSUBMISSION");
            entity.Property(e => e.Cldeathclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLDEATHCLASSIFICATION");
            entity.Property(e => e.Cldescriptionofinjury)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("CLDESCRIPTIONOFINJURY");
            entity.Property(e => e.Cldetailsofcontactresponse)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CLDETAILSOFCONTACTRESPONSE");
            entity.Property(e => e.Clemergencycode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLEMERGENCYCODE");
            entity.Property(e => e.Clequipmentproductsupplies)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLEQUIPMENTPRODUCTSUPPLIES");
            entity.Property(e => e.Cleventnumber)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CLEVENTNUMBER");
            entity.Property(e => e.Clfamilymembercontacted).HasColumnName("CLFAMILYMEMBERCONTACTED");
            entity.Property(e => e.Clfraudtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLFRAUDTYPE");
            entity.Property(e => e.Clhealthissue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLHEALTHISSUE");
            entity.Property(e => e.Clinfectioncontrol)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLINFECTIONCONTROL");
            entity.Property(e => e.Clinitialtreatmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLINITIALTREATMENTTYPE");
            entity.Property(e => e.Clmedicationerror)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLMEDICATIONERROR");
            entity.Property(e => e.Clmotoreventtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLMOTOREVENTTYPE");
            entity.Property(e => e.Clpolicecontacted).HasColumnName("CLPOLICECONTACTED");
            entity.Property(e => e.Clpropertycostofdamage)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("CLPROPERTYCOSTOFDAMAGE");
            entity.Property(e => e.Clpropertyevent)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLPROPERTYEVENT");
            entity.Property(e => e.Clpropertytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLPROPERTYTYPE");
            entity.Property(e => e.Clreportableincident)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLREPORTABLEINCIDENT");
            entity.Property(e => e.Clreportnumber)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CLREPORTNUMBER");
            entity.Property(e => e.Clroadconditions)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLROADCONDITIONS");
            entity.Property(e => e.Clsecurityeventclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLSECURITYEVENTCLASSIFICATION");
            entity.Property(e => e.Clsecurityeventtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLSECURITYEVENTTYPE");
            entity.Property(e => e.Clseverityrating)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLSEVERITYRATING");
            entity.Property(e => e.Clstaffaffected)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLSTAFFAFFECTED");
            entity.Property(e => e.Clstatuschange)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLSTATUSCHANGE");
            entity.Property(e => e.CltHospitalVisit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CltInjuryDescription)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.CltInjuryLocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CltTreatmentDetail)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.CltTreatmentType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cltreatmentdetails)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("CLTREATMENTDETAILS");
            entity.Property(e => e.Cltypeofdeath)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLTYPEOFDEATH");
            entity.Property(e => e.Cltypeoffall)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLTYPEOFFALL");
            entity.Property(e => e.Clvehiclecostofdamage)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("CLVEHICLECOSTOFDAMAGE");
            entity.Property(e => e.Clvehicleeventwhen)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLVEHICLEEVENTWHEN");
            entity.Property(e => e.Clvehicletype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLVEHICLETYPE");
            entity.Property(e => e.Confidential).HasColumnName("CONFIDENTIAL");
            entity.Property(e => e.Convertedfromguesteventid).HasColumnName("CONVERTEDFROMGUESTEVENTID");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datenotified)
                .HasColumnType("datetime")
                .HasColumnName("DATENOTIFIED");
            entity.Property(e => e.Dateofevent)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFEVENT");
            entity.Property(e => e.Datereported)
                .HasColumnType("datetime")
                .HasColumnName("DATEREPORTED");
            entity.Property(e => e.Datetimeconvertedfromguest)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMECONVERTEDFROMGUEST");
            entity.Property(e => e.Deleted).HasColumnName("DELETED");
            entity.Property(e => e.Description)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Eapprovided).HasColumnName("EAPPROVIDED");
            entity.Property(e => e.Enteredbyhrid).HasColumnName("ENTEREDBYHRID");
            entity.Property(e => e.Environmentdetails)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENVIRONMENTDETAILS");
            entity.Property(e => e.Environmentotherdetails)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("ENVIRONMENTOTHERDETAILS");
            entity.Property(e => e.Eventnumber)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("EVENTNUMBER");
            entity.Property(e => e.Eventsleadingto)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("EVENTSLEADINGTO");
            entity.Property(e => e.Eventtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVENTTYPE");
            entity.Property(e => e.Exposureactivity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXPOSUREACTIVITY");
            entity.Property(e => e.Exposurecause)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXPOSURECAUSE");
            entity.Property(e => e.Exposureextent)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXPOSUREEXTENT");
            entity.Property(e => e.Exposuresubstance)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXPOSURESUBSTANCE");
            entity.Property(e => e.Fbagencyadministratorhrid).HasColumnName("FBAGENCYADMINISTRATORHRID");
            entity.Property(e => e.Fbcomplaintinvestigatorhrid).HasColumnName("FBCOMPLAINTINVESTIGATORHRID");
            entity.Property(e => e.Fbcomplaintreviewerhrid).HasColumnName("FBCOMPLAINTREVIEWERHRID");
            entity.Property(e => e.Fbcomplaintsubcat1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBCOMPLAINTSUBCAT1");
            entity.Property(e => e.Fbcomplaintsubcat2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBCOMPLAINTSUBCAT2");
            entity.Property(e => e.Fbcomplainttheme)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBCOMPLAINTTHEME");
            entity.Property(e => e.Fbdateacknowledged)
                .HasColumnType("datetime")
                .HasColumnName("FBDATEACKNOWLEDGED");
            entity.Property(e => e.Fboriginatingmethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBORIGINATINGMETHOD");
            entity.Property(e => e.Fbpersonresponsiblehrid).HasColumnName("FBPERSONRESPONSIBLEHRID");
            entity.Property(e => e.Fbpersonresponsiblenotificationhrid).HasColumnName("FBPERSONRESPONSIBLENOTIFICATIONHRID");
            entity.Property(e => e.Fbpreferredcontactmethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBPREFERREDCONTACTMETHOD");
            entity.Property(e => e.Fbrelatedtoaccommodation).HasColumnName("FBRELATEDTOACCOMMODATION");
            entity.Property(e => e.Fbremainanonymous).HasColumnName("FBREMAINANONYMOUS");
            entity.Property(e => e.Fbtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FBTYPE");
            entity.Property(e => e.Fbwanttobecontacted).HasColumnName("FBWANTTOBECONTACTED");
            entity.Property(e => e.Fitforworkattime).HasColumnName("FITFORWORKATTIME");
            entity.Property(e => e.Guesteventactiontakenbyname)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("GUESTEVENTACTIONTAKENBYNAME");
            entity.Property(e => e.Guestevententeredemail)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("GUESTEVENTENTEREDEMAIL");
            entity.Property(e => e.Guesteventnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GUESTEVENTNUMBER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hazardcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAZARDCATEGORY");
            entity.Property(e => e.Howdidtheyfeel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HOWDIDTHEYFEEL");
            entity.Property(e => e.Hsrephrid).HasColumnName("HSREPHRID");
            entity.Property(e => e.Immediateactiondetails)
                .IsUnicode(false)
                .HasColumnName("IMMEDIATEACTIONDETAILS");
            entity.Property(e => e.Immediateactionhrid).HasColumnName("IMMEDIATEACTIONHRID");
            entity.Property(e => e.Immediateactionnoact).HasColumnName("IMMEDIATEACTIONNOACT");
            entity.Property(e => e.Immediatethreat).HasColumnName("IMMEDIATETHREAT");
            entity.Property(e => e.Involvenatureofwork).HasColumnName("INVOLVENATUREOFWORK");
            entity.Property(e => e.Involveworkconditions).HasColumnName("INVOLVEWORKCONDITIONS");
            entity.Property(e => e.Involveworkperformance).HasColumnName("INVOLVEWORKPERFORMANCE");
            entity.Property(e => e.Involveworkplaceconflict).HasColumnName("INVOLVEWORKPLACECONFLICT");
            entity.Property(e => e.Lastsaveddatetime)
                .HasColumnType("datetime")
                .HasColumnName("LASTSAVEDDATETIME");
            entity.Property(e => e.Location)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mentalfatigue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MENTALFATIGUE");
            entity.Property(e => e.Notfitreason)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("NOTFITREASON");
            entity.Property(e => e.Numberofaggressors).HasColumnName("NUMBEROFAGGRESSORS");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Physicalfatigue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PHYSICALFATIGUE");
            entity.Property(e => e.Postcode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Propertydamagedescription)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("PROPERTYDAMAGEDESCRIPTION");
            entity.Property(e => e.Propertydamageestimate)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PROPERTYDAMAGEESTIMATE");
            entity.Property(e => e.Propertydamagetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROPERTYDAMAGETYPE");
            entity.Property(e => e.Psychisrecurrence).HasColumnName("PSYCHISRECURRENCE");
            entity.Property(e => e.Psychpreexistingcondition).HasColumnName("PSYCHPREEXISTINGCONDITION");
            entity.Property(e => e.Psychrecurrencehowlong)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PSYCHRECURRENCEHOWLONG");
            entity.Property(e => e.Qualityofsleep)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("QUALITYOFSLEEP");
            entity.Property(e => e.Reportedagencycontact)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REPORTEDAGENCYCONTACT");
            entity.Property(e => e.Reportedby)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPORTEDBY");
            entity.Property(e => e.Reportedbyname)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("REPORTEDBYNAME");
            entity.Property(e => e.Reportedcontactnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REPORTEDCONTACTNUMBER");
            entity.Property(e => e.Reportedemail)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("REPORTEDEMAIL");
            entity.Property(e => e.Reportedemporgname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPORTEDEMPORGNAME");
            entity.Property(e => e.Reportedtoname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REPORTEDTONAME");
            entity.Property(e => e.Reviewerhrid).HasColumnName("REVIEWERHRID");
            entity.Property(e => e.Securitydescription)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("SECURITYDESCRIPTION");
            entity.Property(e => e.Severityinjury)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEVERITYINJURY");
            entity.Property(e => e.Severitylikelihood)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEVERITYLIKELIHOOD");
            entity.Property(e => e.Severityrating)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEVERITYRATING");
            entity.Property(e => e.Sleepleadinguptoevent)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SLEEPLEADINGUPTOEVENT");
            entity.Property(e => e.Specificarea)
                .IsUnicode(false)
                .HasColumnName("SPECIFICAREA");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Supervisorhrid).HasColumnName("SUPERVISORHRID");
            entity.Property(e => e.Timeofevent)
                .HasColumnType("datetime")
                .HasColumnName("TIMEOFEVENT");
            entity.Property(e => e.Timereported)
                .HasColumnType("datetime")
                .HasColumnName("TIMEREPORTED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Whsconsultanthrid).HasColumnName("WHSCONSULTANTHRID");

            entity.HasOne(d => d.Fbagencyadministratorhr).WithMany(p => p.GevtEventXFbagencyadministratorhrs)
                .HasForeignKey(d => d.Fbagencyadministratorhrid)
                .HasConstraintName("FK_GEVT_EVENT_X_FBAGENCYADMINISTRATORHRID");

            entity.HasOne(d => d.Fbcomplaintinvestigatorhr).WithMany(p => p.GevtEventXFbcomplaintinvestigatorhrs)
                .HasForeignKey(d => d.Fbcomplaintinvestigatorhrid)
                .HasConstraintName("FK_GEVT_EVENT_X_FBCOMPLAINTINVESTIGATORHRID");

            entity.HasOne(d => d.Fbcomplaintreviewerhr).WithMany(p => p.GevtEventXFbcomplaintreviewerhrs)
                .HasForeignKey(d => d.Fbcomplaintreviewerhrid)
                .HasConstraintName("FK_GEVT_EVENT_X_FBCOMPLAINTREVIEWERHRID");

            entity.HasOne(d => d.Fbpersonresponsiblenotificationhr).WithMany(p => p.GevtEventXFbpersonresponsiblenotificationhrs)
                .HasForeignKey(d => d.Fbpersonresponsiblenotificationhrid)
                .HasConstraintName("FK_GEVT_EVENT_X_FBPERSONRESPONSIBLENOTIFICATIONHRID");
        });

        modelBuilder.Entity<GevtEventsubtypeX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Typeno });

            entity.ToTable("GEVT_EVENTSUBTYPE_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_EVENTSUBTYPE_X");
                    tb.HasTrigger("audins_GEVT_EVENTSUBTYPE_X");
                    tb.HasTrigger("audupd_GEVT_EVENTSUBTYPE_X");
                });

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Typeno).HasColumnName("TYPENO");
            entity.Property(e => e.Eventtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVENTTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Gevent).WithMany(p => p.GevtEventsubtypeXes)
                .HasForeignKey(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_EVENTSUBTYPE_X_EVENTID");
        });

        modelBuilder.Entity<GevtExposureppeX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Ppeno });

            entity.ToTable("GEVT_EXPOSUREPPE_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_EXPOSUREPPE_X");
                    tb.HasTrigger("audins_GEVT_EXPOSUREPPE_X");
                    tb.HasTrigger("audupd_GEVT_EXPOSUREPPE_X");
                });

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Ppeno).HasColumnName("PPENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Ppetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PPETYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Gevent).WithMany(p => p.GevtExposureppeXes)
                .HasForeignKey(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_EXPOSUREPPE_X_EVENTID");
        });

        modelBuilder.Entity<GevtNotificationcontactX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Notificationno });

            entity.ToTable("GEVT_NOTIFICATIONCONTACT_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_NOTIFICATIONCONTAC");
                    tb.HasTrigger("audins_GEVT_NOTIFICATIONCONTAC");
                    tb.HasTrigger("audupd_GEVT_NOTIFICATIONCONTAC");
                });

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Notificationno).HasColumnName("NOTIFICATIONNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Gevent).WithMany(p => p.GevtNotificationcontactXes)
                .HasForeignKey(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_NOTIFICATIONCONTACT_X_EVENTID");
        });

        modelBuilder.Entity<GevtOthervehicleX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Othervehicleno });

            entity.ToTable("GEVT_OTHERVEHICLE_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_OTHERVEHICLE_X");
                    tb.HasTrigger("audins_GEVT_OTHERVEHICLE_X");
                    tb.HasTrigger("audupd_GEVT_OTHERVEHICLE_X");
                });

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Othervehicleno).HasColumnName("OTHERVEHICLENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Othercontactdetails)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("OTHERCONTACTDETAILS");
            entity.Property(e => e.Otherfullnameofdriver)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OTHERFULLNAMEOFDRIVER");
            entity.Property(e => e.Otherinsurancedetails)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("OTHERINSURANCEDETAILS");
            entity.Property(e => e.Otherlicencenumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OTHERLICENCENUMBER");
            entity.Property(e => e.Otherregistrationno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OTHERREGISTRATIONNO");
            entity.Property(e => e.Othervehiclemake)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OTHERVEHICLEMAKE");
            entity.Property(e => e.Othervehiclemodel)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OTHERVEHICLEMODEL");
            entity.Property(e => e.Othervehicletype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OTHERVEHICLETYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Gevent).WithMany(p => p.GevtOthervehicleXes)
                .HasForeignKey(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_OTHERVEHICLE_X_EVENTID");
        });

        modelBuilder.Entity<GevtPdfX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Pdfno }).HasName("PK_GEVT_PDF_X_EVENTID_DOCNO");

            entity.ToTable("GEVT_PDF_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_PDF_X");
                    tb.HasTrigger("audins_GEVT_PDF_X");
                    tb.HasTrigger("audupd_GEVT_PDF_X");
                });

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Pdfno).HasColumnName("PDFNO");
            entity.Property(e => e.Datetimegenerated)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMEGENERATED");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Statushistoryno).HasColumnName("STATUSHISTORYNO");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Document).WithMany(p => p.GevtPdfXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_GEVT_PDF_X_DOCUMENTID");

            entity.HasOne(d => d.Gevent).WithMany(p => p.GevtPdfXes)
                .HasForeignKey(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_PDF_X_EVENTID");
        });

        modelBuilder.Entity<GevtPersoninvolvedX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Personinvolvedno });

            entity.ToTable("GEVT_PERSONINVOLVED_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_PERSONINVOLVED_X");
                    tb.HasTrigger("audins_GEVT_PERSONINVOLVED_X");
                    tb.HasTrigger("audupd_GEVT_PERSONINVOLVED_X");
                });

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Personinvolvedno).HasColumnName("PERSONINVOLVEDNO");
            entity.Property(e => e.Affectedbyfatigue).HasColumnName("AFFECTEDBYFATIGUE");
            entity.Property(e => e.Bodilylocationl2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATIONL2");
            entity.Property(e => e.Clientid)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CLIENTID");
            entity.Property(e => e.Clientnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CLIENTNUMBER");
            entity.Property(e => e.Contactnumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CONTACTNUMBER");
            entity.Property(e => e.Dateworkceased)
                .HasColumnType("datetime")
                .HasColumnName("DATEWORKCEASED");
            entity.Property(e => e.Descriptionofinjury)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTIONOFINJURY");
            entity.Property(e => e.Descriptionoftreatment)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTIONOFTREATMENT");
            entity.Property(e => e.Emailaddress)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAILADDRESS");
            entity.Property(e => e.Employeeno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEENO");
            entity.Property(e => e.Familyname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAMILYNAME");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GENDER");
            entity.Property(e => e.Givennames)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GIVENNAMES");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Initialtreatmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INITIALTREATMENTTYPE");
            entity.Property(e => e.Injury)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("INJURY");
            entity.Property(e => e.Injuryside)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYSIDE");
            entity.Property(e => e.Involvement)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INVOLVEMENT");
            entity.Property(e => e.Nonemployeetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NONEMPLOYEETYPE");
            entity.Property(e => e.Occupation)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Percentofshiftcomplete)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERCENTOFSHIFTCOMPLETE");
            entity.Property(e => e.Persontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERSONTYPE");
            entity.Property(e => e.Relationshiptosubject)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RELATIONSHIPTOSUBJECT");
            entity.Property(e => e.Subjectofcomplaint)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUBJECTOFCOMPLAINT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Timeworkceased)
                .HasColumnType("datetime")
                .HasColumnName("TIMEWORKCEASED");
            entity.Property(e => e.Workceased).HasColumnName("WORKCEASED");
            entity.Property(e => e.Workstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WORKSTATUS");

            entity.HasOne(d => d.Gevent).WithMany(p => p.GevtPersoninvolvedXes)
                .HasForeignKey(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_PERSONINVOLVED_X_EVENTID");
        });

        modelBuilder.Entity<GevtPsychinvolveX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Involvedno });

            entity.ToTable("GEVT_PSYCHINVOLVE_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_PSYCHINVOLVE_X");
                    tb.HasTrigger("audins_GEVT_PSYCHINVOLVE_X");
                    tb.HasTrigger("audupd_GEVT_PSYCHINVOLVE_X");
                });

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Involvedno).HasColumnName("INVOLVEDNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Persontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERSONTYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Gevent).WithMany(p => p.GevtPsychinvolveXes)
                .HasForeignKey(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_PSYCHINVOLVE_X_EVENTID");
        });

        modelBuilder.Entity<GevtSecuritycontrolX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Typeno });

            entity.ToTable("GEVT_SECURITYCONTROL_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_SECURITYCONTROL_X");
                    tb.HasTrigger("audins_GEVT_SECURITYCONTROL_X");
                    tb.HasTrigger("audupd_GEVT_SECURITYCONTROL_X");
                });

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Typeno).HasColumnName("TYPENO");
            entity.Property(e => e.Controltype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTROLTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Gevent).WithMany(p => p.GevtSecuritycontrolXes)
                .HasForeignKey(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_SECURITYCONTROL_X_EVENTID");
        });

        modelBuilder.Entity<GevtSecuritytypeX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Typeno });

            entity.ToTable("GEVT_SECURITYTYPE_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_SECURITYTYPE_X");
                    tb.HasTrigger("audins_GEVT_SECURITYTYPE_X");
                    tb.HasTrigger("audupd_GEVT_SECURITYTYPE_X");
                });

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Typeno).HasColumnName("TYPENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Securitytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SECURITYTYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Gevent).WithMany(p => p.GevtSecuritytypeXes)
                .HasForeignKey(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_SECURITYTYPE_X_EVENTID");
        });

        modelBuilder.Entity<GevtSleeptypeX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Typeno });

            entity.ToTable("GEVT_SLEEPTYPE_X");

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Typeno).HasColumnName("TYPENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Sleeptype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SLEEPTYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Gevent).WithMany(p => p.GevtSleeptypeXes)
                .HasForeignKey(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_SLEEPTYPE_X_GEVENTID");
        });

        modelBuilder.Entity<GevtStatusX>(entity =>
        {
            entity.HasKey(e => e.Geventid);

            entity.ToTable("GEVT_STATUS_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_STATUS_X");
                    tb.HasTrigger("audins_GEVT_STATUS_X");
                    tb.HasTrigger("audupd_GEVT_STATUS_X");
                });

            entity.Property(e => e.Geventid)
                .ValueGeneratedNever()
                .HasColumnName("GEVENTID");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMECHANGED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Gevent).WithOne(p => p.GevtStatusX)
                .HasForeignKey<GevtStatusX>(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_STATUS_X_EVENTID");

            entity.HasOne(d => d.Hr).WithMany(p => p.GevtStatusXes)
                .HasForeignKey(d => d.Hrid)
                .HasConstraintName("GEVT_STATUS_X_HRID");
        });

        modelBuilder.Entity<GevtVehicleX>(entity =>
        {
            entity.HasKey(e => e.Geventid);

            entity.ToTable("GEVT_VEHICLE_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_VEHICLE_X");
                    tb.HasTrigger("audins_GEVT_VEHICLE_X");
                    tb.HasTrigger("audupd_GEVT_VEHICLE_X");
                });

            entity.Property(e => e.Geventid)
                .ValueGeneratedNever()
                .HasColumnName("GEVENTID");
            entity.Property(e => e.Fleetno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FLEETNO");
            entity.Property(e => e.Fullnameofdriver)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("FULLNAMEOFDRIVER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Lengthoftimedriving)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LENGTHOFTIMEDRIVING");
            entity.Property(e => e.Licencenumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("LICENCENUMBER");
            entity.Property(e => e.Othervehicleunknown).HasColumnName("OTHERVEHICLEUNKNOWN");
            entity.Property(e => e.Registrationno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("REGISTRATIONNO");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Vehiclemake)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHICLEMAKE");
            entity.Property(e => e.Vehiclemodel)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHICLEMODEL");
            entity.Property(e => e.Vehiclespeed)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHICLESPEED");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VEHICLETYPE");
            entity.Property(e => e.Vehicleunregistered).HasColumnName("VEHICLEUNREGISTERED");
            entity.Property(e => e.Vehroadconditions)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHROADCONDITIONS");
            entity.Property(e => e.Vehweatherconditions)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHWEATHERCONDITIONS");

            entity.HasOne(d => d.Gevent).WithOne(p => p.GevtVehicleX)
                .HasForeignKey<GevtVehicleX>(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_VEHICLE_X_EVENTID");
        });

        modelBuilder.Entity<GevtVehiclecollisionX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Collisionno });

            entity.ToTable("GEVT_VEHICLECOLLISION_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_VEHICLECOLLISION_X");
                    tb.HasTrigger("audins_GEVT_VEHICLECOLLISION_X");
                    tb.HasTrigger("audupd_GEVT_VEHICLECOLLISION_X");
                });

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Collisionno).HasColumnName("COLLISIONNO");
            entity.Property(e => e.Details)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DETAILS");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Gevent).WithMany(p => p.GevtVehiclecollisionXes)
                .HasForeignKey(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_VEHICLECOLLISION_X_EVENTID");
        });

        modelBuilder.Entity<GevtVehicleinvolvedX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Vehicleinvolvedno });

            entity.ToTable("GEVT_VEHICLEINVOLVED_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_VEHICLEINVOLVED_X");
                    tb.HasTrigger("audins_GEVT_VEHICLEINVOLVED_X");
                    tb.HasTrigger("audupd_GEVT_VEHICLEINVOLVED_X");
                });

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Vehicleinvolvedno).HasColumnName("VEHICLEINVOLVEDNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Vehicleinvolvedtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VEHICLEINVOLVEDTYPE");

            entity.HasOne(d => d.Gevent).WithMany(p => p.GevtVehicleinvolvedXes)
                .HasForeignKey(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_VEHICLEINVOLVED_X_EVENTID");
        });

        modelBuilder.Entity<GevtWitnessGuestX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Witnessno });

            entity.ToTable("GEVT_WITNESS_GUEST_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_WITNESS_GUEST_X");
                    tb.HasTrigger("audins_GEVT_WITNESS_GUEST_X");
                    tb.HasTrigger("audupd_GEVT_WITNESS_GUEST_X");
                });

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Witnessno).HasColumnName("WITNESSNO");
            entity.Property(e => e.Employeeid)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEEID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.GevtWitnessX).WithOne(p => p.GevtWitnessGuestX)
                .HasForeignKey<GevtWitnessGuestX>(d => new { d.Geventid, d.Witnessno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_WITNESS_GUEST_X_EVENTID");
        });

        modelBuilder.Entity<GevtWitnessX>(entity =>
        {
            entity.HasKey(e => new { e.Geventid, e.Witnessno });

            entity.ToTable("GEVT_WITNESS_X", tb =>
                {
                    tb.HasTrigger("auddel_GEVT_WITNESS_X");
                    tb.HasTrigger("audins_GEVT_WITNESS_X");
                    tb.HasTrigger("audupd_GEVT_WITNESS_X");
                });

            entity.Property(e => e.Geventid).HasColumnName("GEVENTID");
            entity.Property(e => e.Witnessno).HasColumnName("WITNESSNO");
            entity.Property(e => e.Descriptionofevent)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTIONOFEVENT");
            entity.Property(e => e.Emailaddress)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAILADDRESS");
            entity.Property(e => e.Familyname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAMILYNAME");
            entity.Property(e => e.Givennames)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GIVENNAMES");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Nonemployeetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NONEMPLOYEETYPE");
            entity.Property(e => e.Otherdetails)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("OTHERDETAILS");
            entity.Property(e => e.Persontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERSONTYPE");
            entity.Property(e => e.Phonenumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PHONENUMBER");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Gevent).WithMany(p => p.GevtWitnessXes)
                .HasForeignKey(d => d.Geventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEVT_WITNESS_X_EVENTID");
        });

        modelBuilder.Entity<GlAccount>(entity =>
        {
            entity.HasKey(e => e.Accountid);

            entity.ToTable("GL_ACCOUNT", tb =>
                {
                    tb.HasTrigger("auddel_GL_ACCOUNT");
                    tb.HasTrigger("audins_GL_ACCOUNT");
                    tb.HasTrigger("audupd_GL_ACCOUNT");
                });

            entity.Property(e => e.Accountid).HasColumnName("ACCOUNTID");
            entity.Property(e => e.Accountname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ACCOUNTNAME");
            entity.Property(e => e.Accountsubtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ACCOUNTSUBTYPE");
            entity.Property(e => e.Accounttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ACCOUNTTYPE");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Category)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CATEGORY");
            entity.Property(e => e.Costcentre)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("COSTCENTRE");
            entity.Property(e => e.Datechanged)
                .HasColumnType("datetime")
                .HasColumnName("DATECHANGED");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Debitmultiplier).HasColumnName("DEBITMULTIPLIER");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Enteredbyuserid).HasColumnName("ENTEREDBYUSERID");
            entity.Property(e => e.Fmisreference)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("FMISREFERENCE");
            entity.Property(e => e.Glcode)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("GLCODE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Monetarymovement).HasColumnName("MONETARYMOVEMENT");
            entity.Property(e => e.Purchaseexpense).HasColumnName("PURCHASEEXPENSE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Referencenumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("REFERENCENUMBER");
            entity.Property(e => e.Taxcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TAXCATEGORY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Updatedbyuserid).HasColumnName("UPDATEDBYUSERID");

            entity.HasOne(d => d.Enteredbyuser).WithMany(p => p.GlAccountEnteredbyusers)
                .HasForeignKey(d => d.Enteredbyuserid)
                .HasConstraintName("FK_GL_ACCOUNT_ENTEREDBY");

            entity.HasOne(d => d.Updatedbyuser).WithMany(p => p.GlAccountUpdatedbyusers)
                .HasForeignKey(d => d.Updatedbyuserid)
                .HasConstraintName("FK_GL_ACCOUNT_UPDATEDBY");
        });

        modelBuilder.Entity<GlEntry>(entity =>
        {
            entity.HasKey(e => new { e.Transactionid, e.Entryno });

            entity.ToTable("GL_ENTRY", tb =>
                {
                    tb.HasTrigger("auddel_GL_ENTRY");
                    tb.HasTrigger("audins_GL_ENTRY");
                    tb.HasTrigger("audupd_GL_ENTRY");
                });

            entity.Property(e => e.Transactionid).HasColumnName("TRANSACTIONID");
            entity.Property(e => e.Entryno).HasColumnName("ENTRYNO");
            entity.Property(e => e.Accountid).HasColumnName("ACCOUNTID");
            entity.Property(e => e.Amount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("AMOUNT");
            entity.Property(e => e.Debitcredit).HasColumnName("DEBITCREDIT");
            entity.Property(e => e.Entrytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENTRYTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Account).WithMany(p => p.GlEntries)
                .HasForeignKey(d => d.Accountid)
                .HasConstraintName("FK_GL_ENTRY_ACCOUNTID");

            entity.HasOne(d => d.Transaction).WithMany(p => p.GlEntries)
                .HasForeignKey(d => d.Transactionid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GL_ENTRY_TRANSACTIONID");
        });

        modelBuilder.Entity<GlLinkedcode>(entity =>
        {
            entity.HasKey(e => new { e.Accountid, e.Linkedcodeno });

            entity.ToTable("GL_LINKEDCODE", tb =>
                {
                    tb.HasTrigger("auddel_GL_LINKEDCODE");
                    tb.HasTrigger("audins_GL_LINKEDCODE");
                    tb.HasTrigger("audupd_GL_LINKEDCODE");
                });

            entity.Property(e => e.Accountid).HasColumnName("ACCOUNTID");
            entity.Property(e => e.Linkedcodeno).HasColumnName("LINKEDCODENO");
            entity.Property(e => e.Codetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CODETYPE");
            entity.Property(e => e.Codevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CODEVALUE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Jurisdictionzone).HasColumnName("JURISDICTIONZONE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Account).WithMany(p => p.GlLinkedcodes)
                .HasForeignKey(d => d.Accountid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GL_LINKEDCODE_ACCOUNTID");
        });

        modelBuilder.Entity<GlPaymenttype>(entity =>
        {
            entity.HasKey(e => new { e.Accountid, e.Paymenttypeno });

            entity.ToTable("GL_PAYMENTTYPE", tb =>
                {
                    tb.HasTrigger("auddel_GL_PAYMENTTYPE");
                    tb.HasTrigger("audins_GL_PAYMENTTYPE");
                    tb.HasTrigger("audupd_GL_PAYMENTTYPE");
                });

            entity.Property(e => e.Accountid).HasColumnName("ACCOUNTID");
            entity.Property(e => e.Paymenttypeno).HasColumnName("PAYMENTTYPENO");
            entity.Property(e => e.Claimtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Jurisdictionzone).HasColumnName("JURISDICTIONZONE");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORY");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Account).WithMany(p => p.GlPaymenttypes)
                .HasForeignKey(d => d.Accountid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GL_PAYMENTTYPE_ACCOUNTID");
        });

        modelBuilder.Entity<GlRule>(entity =>
        {
            entity.HasKey(e => e.Ruleid);

            entity.ToTable("GL_RULE", tb =>
                {
                    tb.HasTrigger("auddel_GL_RULE");
                    tb.HasTrigger("audins_GL_RULE");
                    tb.HasTrigger("audupd_GL_RULE");
                });

            entity.Property(e => e.Ruleid).HasColumnName("RULEID");
            entity.Property(e => e.Accountid).HasColumnName("ACCOUNTID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Creditaccountid).HasColumnName("CREDITACCOUNTID");
            entity.Property(e => e.Credittaxid).HasColumnName("CREDITTAXID");
            entity.Property(e => e.Debitaccountid).HasColumnName("DEBITACCOUNTID");
            entity.Property(e => e.Debittaxid).HasColumnName("DEBITTAXID");
            entity.Property(e => e.Entrytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENTRYTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Account).WithMany(p => p.GlRuleAccounts)
                .HasForeignKey(d => d.Accountid)
                .HasConstraintName("FK_GL_RULE_ACCOUNTID");

            entity.HasOne(d => d.Creditaccount).WithMany(p => p.GlRuleCreditaccounts)
                .HasForeignKey(d => d.Creditaccountid)
                .HasConstraintName("FK_GL_RULE_CREDITACCOUNTID");

            entity.HasOne(d => d.Credittax).WithMany(p => p.GlRuleCredittaxes)
                .HasForeignKey(d => d.Credittaxid)
                .HasConstraintName("FK_GL_RULE_CREDITTAXID");

            entity.HasOne(d => d.Debitaccount).WithMany(p => p.GlRuleDebitaccounts)
                .HasForeignKey(d => d.Debitaccountid)
                .HasConstraintName("FK_GL_RULE_DEBITACCOUNTID");

            entity.HasOne(d => d.Debittax).WithMany(p => p.GlRuleDebittaxes)
                .HasForeignKey(d => d.Debittaxid)
                .HasConstraintName("FK_GL_RULE_DEBITTAXID");
        });

        modelBuilder.Entity<GlSubentry>(entity =>
        {
            entity.HasKey(e => new { e.Transactionid, e.Subentryno });

            entity.ToTable("GL_SUBENTRY", tb =>
                {
                    tb.HasTrigger("auddel_GL_SUBENTRY");
                    tb.HasTrigger("audins_GL_SUBENTRY");
                    tb.HasTrigger("audupd_GL_SUBENTRY");
                });

            entity.Property(e => e.Transactionid).HasColumnName("TRANSACTIONID");
            entity.Property(e => e.Subentryno).HasColumnName("SUBENTRYNO");
            entity.Property(e => e.Accountid).HasColumnName("ACCOUNTID");
            entity.Property(e => e.Amount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("AMOUNT");
            entity.Property(e => e.Debitcredit).HasColumnName("DEBITCREDIT");
            entity.Property(e => e.Entrytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENTRYTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Account).WithMany(p => p.GlSubentries)
                .HasForeignKey(d => d.Accountid)
                .HasConstraintName("FK_GL_SUBENTRY_ACCOUNTID");

            entity.HasOne(d => d.Transaction).WithMany(p => p.GlSubentries)
                .HasForeignKey(d => d.Transactionid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GL_SUBENTRY_TRANSACTIONID");
        });

        modelBuilder.Entity<GlTransaction>(entity =>
        {
            entity.HasKey(e => e.Transactionid);

            entity.ToTable("GL_TRANSACTION", tb =>
                {
                    tb.HasTrigger("auddel_GL_TRANSACTION");
                    tb.HasTrigger("audins_GL_TRANSACTION");
                    tb.HasTrigger("audupd_GL_TRANSACTION");
                });

            entity.Property(e => e.Transactionid).HasColumnName("TRANSACTIONID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Partylocationno).HasColumnName("PARTYLOCATIONNO");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Transactiondatetime)
                .HasColumnType("datetime")
                .HasColumnName("TRANSACTIONDATETIME");
            entity.Property(e => e.Transactiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRANSACTIONTYPE");

            entity.HasOne(d => d.Party).WithMany(p => p.GlTransactions)
                .HasForeignKey(d => d.Partyid)
                .HasConstraintName("FK_GL_TRANSACTION_PARTYID");

            entity.HasOne(d => d.ParLocation).WithMany(p => p.GlTransactions)
                .HasForeignKey(d => new { d.Partyid, d.Partylocationno })
                .HasConstraintName("FK_GL_TRANSACTION_PARTYLOCATIONNO");
        });

        modelBuilder.Entity<HirmAccessattemptX>(entity =>
        {
            entity.HasKey(e => e.Accessattemptid);

            entity.ToTable("HIRM_ACCESSATTEMPT_X", tb =>
                {
                    tb.HasTrigger("auddel_HIRM_ACCESSATTEMPT_X");
                    tb.HasTrigger("audins_HIRM_ACCESSATTEMPT_X");
                    tb.HasTrigger("audupd_HIRM_ACCESSATTEMPT_X");
                });

            entity.Property(e => e.Accessattemptid).HasColumnName("ACCESSATTEMPTID");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY");
            entity.Property(e => e.Attemptdatetime)
                .HasColumnType("datetime")
                .HasColumnName("ATTEMPTDATETIME");
            entity.Property(e => e.Attemptnumber).HasColumnName("ATTEMPTNUMBER");
            entity.Property(e => e.Dateofbirth)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFBIRTH");
            entity.Property(e => e.Email)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Employeenumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEENUMBER");
            entity.Property(e => e.Givenames)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("GIVENAMES");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IPADDRESS");
            entity.Property(e => e.Mobile)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("MOBILE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Stage)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STAGE");
            entity.Property(e => e.Stagedatetime)
                .HasColumnType("datetime")
                .HasColumnName("STAGEDATETIME");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdatetime)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATETIME");
            entity.Property(e => e.Surname)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SURNAME");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Username)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("USERNAME");
            entity.Property(e => e.Whsconsultant).HasColumnName("WHSCONSULTANT");
        });

        modelBuilder.Entity<HirmAccesstokenX>(entity =>
        {
            entity.HasKey(e => e.Accesstokenid);

            entity.ToTable("HIRM_ACCESSTOKEN_X", tb =>
                {
                    tb.HasTrigger("auddel_HIRM_ACCESSTOKEN_X");
                    tb.HasTrigger("audins_HIRM_ACCESSTOKEN_X");
                    tb.HasTrigger("audupd_HIRM_ACCESSTOKEN_X");
                });

            entity.Property(e => e.Accesstokenid).HasColumnName("ACCESSTOKENID");
            entity.Property(e => e.Accessattemptid).HasColumnName("ACCESSATTEMPTID");
            entity.Property(e => e.Createdatetime)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATETIME");
            entity.Property(e => e.Expiredatetime)
                .HasColumnType("datetime")
                .HasColumnName("EXPIREDATETIME");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Token)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TOKEN");
            entity.Property(e => e.Tokentype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TOKENTYPE");

            entity.HasOne(d => d.Accessattempt).WithMany(p => p.HirmAccesstokenXes)
                .HasForeignKey(d => d.Accessattemptid)
                .HasConstraintName("FK_HIRM_ACCESSTOKEN_X_ACCESSATTEMPTID");
        });

        modelBuilder.Entity<HirmIpblockX>(entity =>
        {
            entity.HasKey(e => e.Ipblockid);

            entity.ToTable("HIRM_IPBLOCK_X", tb =>
                {
                    tb.HasTrigger("auddel_HIRM_IPBLOCK_X");
                    tb.HasTrigger("audins_HIRM_IPBLOCK_X");
                    tb.HasTrigger("audupd_HIRM_IPBLOCK_X");
                });

            entity.Property(e => e.Ipblockid).HasColumnName("IPBLOCKID");
            entity.Property(e => e.Accessattemptid).HasColumnName("ACCESSATTEMPTID");
            entity.Property(e => e.Blockeduntildatetime)
                .HasColumnType("datetime")
                .HasColumnName("BLOCKEDUNTILDATETIME");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IPADDRESS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Accessattempt).WithMany(p => p.HirmIpblockXes)
                .HasForeignKey(d => d.Accessattemptid)
                .HasConstraintName("FK_HIRM_IPBLOCK_X_ACCESSATTEMPTID");
        });

        modelBuilder.Entity<HrAuditX>(entity =>
        {
            entity.HasKey(e => e.Attemptid);

            entity.ToTable("HR_AUDIT_X", tb =>
                {
                    tb.HasTrigger("auddel_HR_AUDIT_X");
                    tb.HasTrigger("audins_HR_AUDIT_X");
                    tb.HasTrigger("audupd_HR_AUDIT_X");
                });

            entity.Property(e => e.Attemptid).HasColumnName("ATTEMPTID");
            entity.Property(e => e.Datetimeoccurred)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMEOCCURRED");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IPADDRESS");
            entity.Property(e => e.Modulename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODULENAME");
            entity.Property(e => e.Successfullogin).HasColumnName("SUCCESSFULLOGIN");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Validuser).HasColumnName("VALIDUSER");
        });

        modelBuilder.Entity<HrBatchErrorsX>(entity =>
        {
            entity.HasKey(e => new { e.Batchid, e.Errorno });

            entity.ToTable("HR_BATCH_ERRORS_X", tb =>
                {
                    tb.HasTrigger("auddel_HR_BATCH_ERRORS_X");
                    tb.HasTrigger("audins_HR_BATCH_ERRORS_X");
                    tb.HasTrigger("audupd_HR_BATCH_ERRORS_X");
                });

            entity.Property(e => e.Batchid).HasColumnName("BATCHID");
            entity.Property(e => e.Errorno).HasColumnName("ERRORNO");
            entity.Property(e => e.Errordesc)
                .IsUnicode(false)
                .HasColumnName("ERRORDESC");
            entity.Property(e => e.Errortype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ERRORTYPE");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Batch).WithMany(p => p.HrBatchErrorsXes)
                .HasForeignKey(d => d.Batchid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HR_BATCH_ERRORS_X_BATCHID");
        });

        modelBuilder.Entity<HrBatchStagingX>(entity =>
        {
            entity.HasKey(e => new { e.Batchid, e.Rownumber });

            entity.ToTable("HR_BATCH_STAGING_X", tb =>
                {
                    tb.HasTrigger("auddel_HR_BATCH_STAGING_X");
                    tb.HasTrigger("audins_HR_BATCH_STAGING_X");
                    tb.HasTrigger("audupd_HR_BATCH_STAGING_X");
                });

            entity.Property(e => e.Batchid).HasColumnName("BATCHID");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.Active)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ACTIVE");
            entity.Property(e => e.Addressline1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE1");
            entity.Property(e => e.Addressline2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE2");
            entity.Property(e => e.Agencystartdate)
                .HasColumnType("datetime")
                .HasColumnName("AGENCYSTARTDATE");
            entity.Property(e => e.Anzsco)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ANZSCO");
            entity.Property(e => e.Atsi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATSI");
            entity.Property(e => e.AuditCreated)
                .HasColumnType("datetime")
                .HasColumnName("AUDIT_CREATED");
            entity.Property(e => e.AuditLastmodified)
                .HasColumnType("datetime")
                .HasColumnName("AUDIT_LASTMODIFIED");
            entity.Property(e => e.AuditRowversion).HasColumnName("AUDIT_ROWVERSION");
            entity.Property(e => e.Countryofbirth)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COUNTRYOFBIRTH");
            entity.Property(e => e.Dateofbirth)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFBIRTH");
            entity.Property(e => e.Emailaddress)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAILADDRESS");
            entity.Property(e => e.Emailaddresspersonal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAILADDRESSPERSONAL");
            entity.Property(e => e.Employeenumber)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEENUMBER");
            entity.Property(e => e.Employeestartdate)
                .HasColumnType("datetime")
                .HasColumnName("EMPLOYEESTARTDATE");
            entity.Property(e => e.Employmentclassification)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMPLOYMENTCLASSIFICATION");
            entity.Property(e => e.Employmentstatus)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMPLOYMENTSTATUS");
            entity.Property(e => e.Employmenttype)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMPLOYMENTTYPE");
            entity.Property(e => e.Familyname)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FAMILYNAME");
            entity.Property(e => e.Gender)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("GENDER");
            entity.Property(e => e.Givenname)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("GIVENNAME");
            entity.Property(e => e.Homephone)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("HOMEPHONE");
            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Invalid).HasColumnName("INVALID");
            entity.Property(e => e.Jobtitle)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("JOBTITLE");
            entity.Property(e => e.Language)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("LANGUAGE");
            entity.Property(e => e.Managingsupervisor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MANAGINGSUPERVISOR");
            entity.Property(e => e.Middlename)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MIDDLENAME");
            entity.Property(e => e.Mobilephone)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOBILEPHONE");
            entity.Property(e => e.Orgagencycode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ORGAGENCYCODE");
            entity.Property(e => e.Orgheirarchyid)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ORGHEIRARCHYID");
            entity.Property(e => e.Personid)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PERSONID");
            entity.Property(e => e.Postcode)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Preferredname)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PREFERREDNAME");
            entity.Property(e => e.State)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Terminationresignationdate)
                .HasColumnType("datetime")
                .HasColumnName("TERMINATIONRESIGNATIONDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TITLE");
            entity.Property(e => e.Validfrom)
                .HasColumnType("datetime")
                .HasColumnName("VALIDFROM");
            entity.Property(e => e.Validto)
                .HasColumnType("datetime")
                .HasColumnName("VALIDTO");
            entity.Property(e => e.Workphone)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("WORKPHONE");

            entity.HasOne(d => d.Batch).WithMany(p => p.HrBatchStagingXes)
                .HasForeignKey(d => d.Batchid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HR_BATCH_STAGING_X_BATCHID");
        });

        modelBuilder.Entity<HrBatchX>(entity =>
        {
            entity.HasKey(e => e.Batchid);

            entity.ToTable("HR_BATCH_X", tb =>
                {
                    tb.HasTrigger("auddel_HR_BATCH_X");
                    tb.HasTrigger("audins_HR_BATCH_X");
                    tb.HasTrigger("audupd_HR_BATCH_X");
                });

            entity.Property(e => e.Batchid).HasColumnName("BATCHID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<HrDataX>(entity =>
        {
            entity.HasKey(e => e.Hrid);

            entity.ToTable("HR_DATA_X", tb =>
                {
                    tb.HasTrigger("auddel_HR_DATA_X");
                    tb.HasTrigger("audins_HR_DATA_X");
                    tb.HasTrigger("audupd_HR_DATA_X");
                });

            entity.Property(e => e.Hrid)
                .ValueGeneratedNever()
                .HasColumnName("HRID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Agencystartdate)
                .HasColumnType("datetime")
                .HasColumnName("AGENCYSTARTDATE");
            entity.Property(e => e.Anzsco)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ANZSCO");
            entity.Property(e => e.AuditCreated)
                .HasColumnType("datetime")
                .HasColumnName("AUDIT_CREATED");
            entity.Property(e => e.AuditLastmodified)
                .HasColumnType("datetime")
                .HasColumnName("AUDIT_LASTMODIFIED");
            entity.Property(e => e.AuditRowversion).HasColumnName("AUDIT_ROWVERSION");
            entity.Property(e => e.Countryofbirth)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRYOFBIRTH");
            entity.Property(e => e.Datecreated)
                .HasColumnType("datetime")
                .HasColumnName("DATECREATED");
            entity.Property(e => e.Emailaddresspersonal)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAILADDRESSPERSONAL");
            entity.Property(e => e.Employmentclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EMPLOYMENTCLASSIFICATION");
            entity.Property(e => e.Employmentstatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYMENTSTATUS");
            entity.Property(e => e.Employmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EMPLOYMENTTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Jobtitle)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("JOBTITLE");
            entity.Property(e => e.Language)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LANGUAGE");
            entity.Property(e => e.Managingsupervisornumber)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MANAGINGSUPERVISORNUMBER");
            entity.Property(e => e.Middlename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MIDDLENAME");
            entity.Property(e => e.Orgagencycode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ORGAGENCYCODE");
            entity.Property(e => e.Orgheirarchyid)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ORGHEIRARCHYID");
            entity.Property(e => e.Personid)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PERSONID");
            entity.Property(e => e.Preferredname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PREFERREDNAME");
            entity.Property(e => e.Simsworkerno)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SIMSWORKERNO");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Validfrom)
                .HasColumnType("datetime")
                .HasColumnName("VALIDFROM");
            entity.Property(e => e.Validto)
                .HasColumnType("datetime")
                .HasColumnName("VALIDTO");

            entity.HasOne(d => d.Hr).WithOne(p => p.HrDataX)
                .HasForeignKey<HrDataX>(d => d.Hrid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HR_DATA_X_HRID");
        });

        modelBuilder.Entity<HrDatum>(entity =>
        {
            entity.HasKey(e => e.Hrid).HasName("PK_HR_DATA_HRID");

            entity.ToTable("HR_DATA", tb =>
                {
                    tb.HasTrigger("TRIG_HR_DATA_EVENT_SECURITY_X");
                    tb.HasTrigger("auddel_HR_DATA");
                    tb.HasTrigger("audins_HR_DATA");
                    tb.HasTrigger("audupd_HR_DATA");
                });

            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Accountname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACCOUNTNAME");
            entity.Property(e => e.Accountnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACCOUNTNUMBER");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Bankbranch)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BANKBRANCH");
            entity.Property(e => e.Bankname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BANKNAME");
            entity.Property(e => e.Bsb1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BSB1");
            entity.Property(e => e.Bsb2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BSB2");
            entity.Property(e => e.Contactname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CONTACTNAME");
            entity.Property(e => e.Countryofbirth)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRYOFBIRTH");
            entity.Property(e => e.Datelastsynchronised)
                .HasColumnType("datetime")
                .HasColumnName("DATELASTSYNCHRONISED");
            entity.Property(e => e.Datelastupdated)
                .HasColumnType("datetime")
                .HasColumnName("DATELASTUPDATED");
            entity.Property(e => e.Dateofbirth)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFBIRTH");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Employeenumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEENUMBER");
            entity.Property(e => e.Employmentenddate)
                .HasColumnType("datetime")
                .HasColumnName("EMPLOYMENTENDDATE");
            entity.Property(e => e.Employmentendreason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EMPLOYMENTENDREASON");
            entity.Property(e => e.Employmentstartdate)
                .HasColumnType("datetime")
                .HasColumnName("EMPLOYMENTSTARTDATE");
            entity.Property(e => e.Exemployee).HasColumnName("EXEMPLOYEE");
            entity.Property(e => e.Familyname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAMILYNAME");
            entity.Property(e => e.Fax)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FAX");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GENDER");
            entity.Property(e => e.Givennames)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GIVENNAMES");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Homephone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("HOMEPHONE");
            entity.Property(e => e.Identifiedasaboriginal).HasColumnName("IDENTIFIEDASABORIGINAL");
            entity.Property(e => e.Identifiedastsislander).HasColumnName("IDENTIFIEDASTSISLANDER");
            entity.Property(e => e.Interpreterrequired).HasColumnName("INTERPRETERREQUIRED");
            entity.Property(e => e.Language)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LANGUAGE");
            entity.Property(e => e.Maritalstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MARITALSTATUS");
            entity.Property(e => e.Mobilephone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("MOBILEPHONE");
            entity.Property(e => e.Numberofchilddependants).HasColumnName("NUMBEROFCHILDDEPENDANTS");
            entity.Property(e => e.Numberofotherdependants).HasColumnName("NUMBEROFOTHERDEPENDANTS");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPE");
            entity.Property(e => e.Postaladdressline1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTALADDRESSLINE1");
            entity.Property(e => e.Postaladdressline2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTALADDRESSLINE2");
            entity.Property(e => e.Postaladdressline3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTALADDRESSLINE3");
            entity.Property(e => e.Postalcountry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("POSTALCOUNTRY");
            entity.Property(e => e.Postalinternational).HasColumnName("POSTALINTERNATIONAL");
            entity.Property(e => e.Postalpostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("POSTALPOSTCODE");
            entity.Property(e => e.Postalsameasresidential).HasColumnName("POSTALSAMEASRESIDENTIAL");
            entity.Property(e => e.Postalstate)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("POSTALSTATE");
            entity.Property(e => e.Postalsuburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("POSTALSUBURB");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Residentialaddressline1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RESIDENTIALADDRESSLINE1");
            entity.Property(e => e.Residentialaddressline2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RESIDENTIALADDRESSLINE2");
            entity.Property(e => e.Residentialaddressline3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RESIDENTIALADDRESSLINE3");
            entity.Property(e => e.Residentialcountry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RESIDENTIALCOUNTRY");
            entity.Property(e => e.Residentialinternational).HasColumnName("RESIDENTIALINTERNATIONAL");
            entity.Property(e => e.Residentialpostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("RESIDENTIALPOSTCODE");
            entity.Property(e => e.Residentialstate)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("RESIDENTIALSTATE");
            entity.Property(e => e.Residentialsuburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("RESIDENTIALSUBURB");
            entity.Property(e => e.Specialrequirements)
                .IsUnicode(false)
                .HasColumnName("SPECIALREQUIREMENTS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Title)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TITLE");
            entity.Property(e => e.Workphone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("WORKPHONE");

            entity.HasOne(d => d.Orgstruct).WithMany(p => p.HrData)
                .HasForeignKey(d => d.Orgstructid)
                .HasConstraintName("FK_HR_DATA_OS_ORGSTRUCTURE");

            entity.HasOne(d => d.Party).WithMany(p => p.HrData)
                .HasForeignKey(d => d.Partyid)
                .HasConstraintName("FK_HR_DATA_PAR_EMPLOYEE");
        });

        modelBuilder.Entity<HrPasswordX>(entity =>
        {
            entity.HasKey(e => e.Hrid);

            entity.ToTable("HR_PASSWORD_X", tb =>
                {
                    tb.HasTrigger("auddel_HR_PASSWORD_X");
                    tb.HasTrigger("audins_HR_PASSWORD_X");
                    tb.HasTrigger("audupd_HR_PASSWORD_X");
                });

            entity.Property(e => e.Hrid)
                .ValueGeneratedNever()
                .HasColumnName("HRID");
            entity.Property(e => e.AuditCreated)
                .HasColumnType("datetime")
                .HasColumnName("AUDIT_CREATED");
            entity.Property(e => e.AuditLastmodified)
                .HasColumnType("datetime")
                .HasColumnName("AUDIT_LASTMODIFIED");
            entity.Property(e => e.AuditRowversion).HasColumnName("AUDIT_ROWVERSION");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hashedpassword)
                .HasMaxLength(256)
                .HasColumnName("HASHEDPASSWORD");
            entity.Property(e => e.Password)
                .HasMaxLength(256)
                .HasColumnName("PASSWORD");
            entity.Property(e => e.Salt)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("SALT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Hr).WithOne(p => p.HrPasswordX)
                .HasForeignKey<HrPasswordX>(d => d.Hrid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HR_PASSWORD_X_HRID");
        });

        modelBuilder.Entity<HrPasswordhistoryX>(entity =>
        {
            entity.HasKey(e => new { e.Hrid, e.Passwordno });

            entity.ToTable("HR_PASSWORDHISTORY_X", tb =>
                {
                    tb.HasTrigger("auddel_HR_PASSWORDHISTORY_X");
                    tb.HasTrigger("audins_HR_PASSWORDHISTORY_X");
                    tb.HasTrigger("audupd_HR_PASSWORDHISTORY_X");
                });

            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Passwordno).HasColumnName("PASSWORDNO");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMECHANGED");
            entity.Property(e => e.Hashedpassword)
                .HasMaxLength(256)
                .HasColumnName("HASHEDPASSWORD");
            entity.Property(e => e.Salt)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("SALT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Hr).WithMany(p => p.HrPasswordhistoryXes)
                .HasForeignKey(d => d.Hrid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HR_PASSWORDHISTORY_X_HRID");
        });

        modelBuilder.Entity<IfnFilenoteX>(entity =>
        {
            entity.HasKey(e => e.Filenoteid);

            entity.ToTable("IFN_FILENOTE_X", tb =>
                {
                    tb.HasTrigger("auddel_IFN_FILENOTE_X");
                    tb.HasTrigger("audins_IFN_FILENOTE_X");
                    tb.HasTrigger("audupd_IFN_FILENOTE_X");
                });

            entity.Property(e => e.Filenoteid).HasColumnName("FILENOTEID");
            entity.Property(e => e.Category)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CATEGORY");
            entity.Property(e => e.Confidential).HasColumnName("CONFIDENTIAL");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Enteredbyhrid).HasColumnName("ENTEREDBYHRID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("NOTE");
            entity.Property(e => e.Recordtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECORDTYPE");
            entity.Property(e => e.Subject)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.Timeentered)
                .HasColumnType("datetime")
                .HasColumnName("TIMEENTERED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Enteredbyhr).WithMany(p => p.IfnFilenoteXes)
                .HasForeignKey(d => d.Enteredbyhrid)
                .HasConstraintName("FK_IFN_FILENOTE_X_ENTEREDBYHRID");
        });

        modelBuilder.Entity<ImpDocument>(entity =>
        {
            entity.HasKey(e => new { e.Injurymanagementplanid, e.Documentno });

            entity.ToTable("IMP_DOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_IMP_DOCUMENT");
                    tb.HasTrigger("audins_IMP_DOCUMENT");
                    tb.HasTrigger("audupd_IMP_DOCUMENT");
                });

            entity.Property(e => e.Injurymanagementplanid).HasColumnName("INJURYMANAGEMENTPLANID");
            entity.Property(e => e.Documentno).HasColumnName("DOCUMENTNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.ImpDocuments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_IMP_DOCUMENT_DOCUMENTID");

            entity.HasOne(d => d.Injurymanagementplan).WithMany(p => p.ImpDocuments)
                .HasForeignKey(d => d.Injurymanagementplanid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMP_DOCUMENT_INJURYMANAGEMENTPLANID");
        });

        modelBuilder.Entity<ImpInjurymanagementplan>(entity =>
        {
            entity.HasKey(e => e.Injurymanagementplanid);

            entity.ToTable("IMP_INJURYMANAGEMENTPLAN", tb =>
                {
                    tb.HasTrigger("auddel_IMP_INJURYMANAGEMENTPLA");
                    tb.HasTrigger("audins_IMP_INJURYMANAGEMENTPLA");
                    tb.HasTrigger("audupd_IMP_INJURYMANAGEMENTPLA");
                });

            entity.Property(e => e.Injurymanagementplanid).HasColumnName("INJURYMANAGEMENTPLANID");
            entity.Property(e => e.Consulteddoctor).HasColumnName("CONSULTEDDOCTOR");
            entity.Property(e => e.Consultedemployer).HasColumnName("CONSULTEDEMPLOYER");
            entity.Property(e => e.Consultedinjuredworker).HasColumnName("CONSULTEDINJUREDWORKER");
            entity.Property(e => e.Consultedrehabmanager).HasColumnName("CONSULTEDREHABMANAGER");
            entity.Property(e => e.Consultedrehabprovider).HasColumnName("CONSULTEDREHABPROVIDER");
            entity.Property(e => e.Consultedrtwcoordinator).HasColumnName("CONSULTEDRTWCOORDINATOR");
            entity.Property(e => e.Dateachieveestimated)
                .HasColumnType("datetime")
                .HasColumnName("DATEACHIEVEESTIMATED");
            entity.Property(e => e.Dateprepared)
                .HasColumnType("datetime")
                .HasColumnName("DATEPREPARED");
            entity.Property(e => e.Datereview)
                .HasColumnType("datetime")
                .HasColumnName("DATEREVIEW");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Injurymanagementgoal)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYMANAGEMENTGOAL");
            entity.Property(e => e.Nominatedtreatingdoctorid).HasColumnName("NOMINATEDTREATINGDOCTORID");
            entity.Property(e => e.Plandocumentid).HasColumnName("PLANDOCUMENTID");
            entity.Property(e => e.Plannumber).HasColumnName("PLANNUMBER");
            entity.Property(e => e.Progresssummary)
                .IsUnicode(false)
                .HasColumnName("PROGRESSSUMMARY");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Rehabilitationproviderid).HasColumnName("REHABILITATIONPROVIDERID");
            entity.Property(e => e.Rehabmanagerid).HasColumnName("REHABMANAGERID");
            entity.Property(e => e.Rtwcoordinator)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RTWCOORDINATOR");
            entity.Property(e => e.Rtwcoordinatorphone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RTWCOORDINATORPHONE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Nominatedtreatingdoctor).WithMany(p => p.ImpInjurymanagementplanNominatedtreatingdoctors)
                .HasForeignKey(d => d.Nominatedtreatingdoctorid)
                .HasConstraintName("FK_IMP_INJURYMANAGEMENTPLAN_NOMINATEDTREATINGDOCTORID");

            entity.HasOne(d => d.Rehabilitationprovider).WithMany(p => p.ImpInjurymanagementplanRehabilitationproviders)
                .HasForeignKey(d => d.Rehabilitationproviderid)
                .HasConstraintName("FK_IMP_INJURYMANAGEMENTPLAN_REHABILITATIONPROVIDERID");

            entity.HasOne(d => d.Rehabmanager).WithMany(p => p.ImpInjurymanagementplans)
                .HasForeignKey(d => d.Rehabmanagerid)
                .HasConstraintName("FK_IMP_INJURYMANAGEMENTPLAN_REHABMANAGERID");
        });

        modelBuilder.Entity<IncActionlevelX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Controllevelno });

            entity.ToTable("INC_ACTIONLEVEL_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_ACTIONLEVEL_X");
                    tb.HasTrigger("audins_INC_ACTIONLEVEL_X");
                    tb.HasTrigger("audupd_INC_ACTIONLEVEL_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Controllevelno).HasColumnName("CONTROLLEVELNO");
            entity.Property(e => e.Controllevel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTROLLEVEL");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncActionlevelXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_ACTIONLEVEL_X_INCIDENTID");
        });

        modelBuilder.Entity<IncActionleveltypeX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Controlno, e.Controllevelno }).HasName("PK_INC_ACTIONPLAN_TYPES_X");

            entity.ToTable("INC_ACTIONLEVELTYPE_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_ACTIONLEVELTYPE_X");
                    tb.HasTrigger("audins_INC_ACTIONLEVELTYPE_X");
                    tb.HasTrigger("audupd_INC_ACTIONLEVELTYPE_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Controlno).HasColumnName("CONTROLNO");
            entity.Property(e => e.Controllevelno).HasColumnName("CONTROLLEVELNO");
            entity.Property(e => e.Controltype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTROLTYPE");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.IncActionlevelX).WithMany(p => p.IncActionleveltypeXes)
                .HasForeignKey(d => new { d.Incidentid, d.Controllevelno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_ACTIONPLAN_TYPE_INCIDENTID_CONTROLNO");
        });

        modelBuilder.Entity<IncActionplanX>(entity =>
        {
            entity.HasKey(e => e.Incidentid);

            entity.ToTable("INC_ACTIONPLAN_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_ACTIONPLAN_X");
                    tb.HasTrigger("audins_INC_ACTIONPLAN_X");
                    tb.HasTrigger("audupd_INC_ACTIONPLAN_X");
                });

            entity.Property(e => e.Incidentid)
                .ValueGeneratedNever()
                .HasColumnName("INCIDENTID");
            entity.Property(e => e.Actiondetails)
                .IsUnicode(false)
                .HasColumnName("ACTIONDETAILS");
            entity.Property(e => e.Consequence)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONSEQUENCE");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Likelihood)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIKELIHOOD");
            entity.Property(e => e.Noaction).HasColumnName("NOACTION");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithOne(p => p.IncActionplanX)
                .HasForeignKey<IncActionplanX>(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_ACTIONPLAN_X_INCIDENTID");
        });

        modelBuilder.Entity<IncAggressionactionX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Actionno }).HasName("PK_INC_AGGRESSIONACTION_X_INCIDENTID_ACTIONNO");

            entity.ToTable("INC_AGGRESSIONACTION_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_AGGRESSIONACTION_X");
                    tb.HasTrigger("audins_INC_AGGRESSIONACTION_X");
                    tb.HasTrigger("audupd_INC_AGGRESSIONACTION_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Actionno).HasColumnName("ACTIONNO");
            entity.Property(e => e.Action)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ACTION");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncAggressionactionXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_AGGRESSIONACTION_X_INCIDENTID");
        });

        modelBuilder.Entity<IncAggressionaggressorX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Aggressorno }).HasName("PK_INC_AGGRESSIONAGGRESSOR_X_INCIDENTID");

            entity.ToTable("INC_AGGRESSIONAGGRESSOR_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_AGGRESSIONAGGRESSOR");
                    tb.HasTrigger("audins_INC_AGGRESSIONAGGRESSOR");
                    tb.HasTrigger("audupd_INC_AGGRESSIONAGGRESSOR");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Aggressorno).HasColumnName("AGGRESSORNO");
            entity.Property(e => e.Age).HasColumnName("AGE");
            entity.Property(e => e.Causedprevious).HasColumnName("CAUSEDPREVIOUS");
            entity.Property(e => e.Firstname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Lastname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LASTNAME");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Relationship)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATIONSHIP");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncAggressionaggressorXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_AGGRESSIONAGGRESSOR_X_INCIDENTID");
        });

        modelBuilder.Entity<IncAggressiondetailsX>(entity =>
        {
            entity.HasKey(e => e.Incidentid).HasName("PK_INC_AGGRESSIONDETAILS_X_INCIDENTID");

            entity.ToTable("INC_AGGRESSIONDETAILS_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_AGGRESSIONDETAILS_X");
                    tb.HasTrigger("audins_INC_AGGRESSIONDETAILS_X");
                    tb.HasTrigger("audupd_INC_AGGRESSIONDETAILS_X");
                });

            entity.Property(e => e.Incidentid)
                .ValueGeneratedNever()
                .HasColumnName("INCIDENTID");
            entity.Property(e => e.Actiontrainingyear).HasColumnName("ACTIONTRAININGYEAR");
            entity.Property(e => e.Debriefemployeedate)
                .HasColumnType("datetime")
                .HasColumnName("DEBRIEFEMPLOYEEDATE");
            entity.Property(e => e.Debriefexternaldate)
                .HasColumnType("datetime")
                .HasColumnName("DEBRIEFEXTERNALDATE");
            entity.Property(e => e.Debriefinggiven).HasColumnName("DEBRIEFINGGIVEN");
            entity.Property(e => e.Debriefinternaldate)
                .HasColumnType("datetime")
                .HasColumnName("DEBRIEFINTERNALDATE");
            entity.Property(e => e.Degreeofbehvaiour)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEGREEOFBEHVAIOUR");
            entity.Property(e => e.Degreeofphysical)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEGREEOFPHYSICAL");
            entity.Property(e => e.Degreeofverbal)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEGREEOFVERBAL");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Leadingeventdetails)
                .IsUnicode(false)
                .HasColumnName("LEADINGEVENTDETAILS");
            entity.Property(e => e.Managingtrainingyear).HasColumnName("MANAGINGTRAININGYEAR");
            entity.Property(e => e.Noactiontrainingdetails)
                .IsUnicode(false)
                .HasColumnName("NOACTIONTRAININGDETAILS");
            entity.Property(e => e.Nomanagingtrainingdetails)
                .IsUnicode(false)
                .HasColumnName("NOMANAGINGTRAININGDETAILS");
            entity.Property(e => e.Numberinvolved).HasColumnName("NUMBERINVOLVED");
            entity.Property(e => e.Numberofaggressors).HasColumnName("NUMBEROFAGGRESSORS");
            entity.Property(e => e.Otheraction)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OTHERACTION");
            entity.Property(e => e.Otherfactors)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OTHERFACTORS");
            entity.Property(e => e.Propertythreat).HasColumnName("PROPERTYTHREAT");
            entity.Property(e => e.Receiveactiontraining).HasColumnName("RECEIVEACTIONTRAINING");
            entity.Property(e => e.Receivemanagingtraining).HasColumnName("RECEIVEMANAGINGTRAINING");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithOne(p => p.IncAggressiondetailsX)
                .HasForeignKey<IncAggressiondetailsX>(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_AGGRESSIONDETAILS_X_INCIDENTID");
        });

        modelBuilder.Entity<IncAggressionfactorsX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Factorno }).HasName("PK_INC_AGGRESSIONFACTORS_X_INCIDENTID");

            entity.ToTable("INC_AGGRESSIONFACTORS_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_AGGRESSIONFACTORS_X");
                    tb.HasTrigger("audins_INC_AGGRESSIONFACTORS_X");
                    tb.HasTrigger("audupd_INC_AGGRESSIONFACTORS_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Factorno).HasColumnName("FACTORNO");
            entity.Property(e => e.Factortype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FACTORTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncAggressionfactorsXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_AGGRESSIONFACTORS_X_INCIDENTID");
        });

        modelBuilder.Entity<IncAltinvestigatorX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Investigatorno }).HasName("PK_INC_ALTINVESTIGATOR_X_INCIDENTID");

            entity.ToTable("INC_ALTINVESTIGATOR_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_ALTINVESTIGATOR_X");
                    tb.HasTrigger("audins_INC_ALTINVESTIGATOR_X");
                    tb.HasTrigger("audupd_INC_ALTINVESTIGATOR_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Investigatorno).HasColumnName("INVESTIGATORNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Inchrid).HasColumnName("INCHRID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Inchr).WithMany(p => p.IncAltinvestigatorXes)
                .HasForeignKey(d => d.Inchrid)
                .HasConstraintName("FK_INC_ALTINVESTIGATOR_X_INCHRID");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncAltinvestigatorXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_ALTINVESTIGATOR_X_INCIDENTID");
        });

        modelBuilder.Entity<IncCorrectiveactionX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Correctiveactionno }).HasName("PK_INC_CORRECTIVEACTIONS_X_INCIDENTID");

            entity.ToTable("INC_CORRECTIVEACTION_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_CORRECTIVEACTION_X");
                    tb.HasTrigger("audins_INC_CORRECTIVEACTION_X");
                    tb.HasTrigger("audupd_INC_CORRECTIVEACTION_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Correctiveactionno).HasColumnName("CORRECTIVEACTIONNO");
            entity.Property(e => e.Completeddescription)
                .IsUnicode(false)
                .HasColumnName("COMPLETEDDESCRIPTION");
            entity.Property(e => e.Completiondate)
                .HasColumnType("datetime")
                .HasColumnName("COMPLETIONDATE");
            entity.Property(e => e.Consequence)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONSEQUENCE");
            entity.Property(e => e.Controltype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTROLTYPE");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Likelihood)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIKELIHOOD");
            entity.Property(e => e.Notifiedhrid).HasColumnName("NOTIFIEDHRID");
            entity.Property(e => e.Personresponsible).HasColumnName("PERSONRESPONSIBLE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reviewdate)
                .HasColumnType("datetime")
                .HasColumnName("REVIEWDATE");
            entity.Property(e => e.Targetdate)
                .HasColumnType("datetime")
                .HasColumnName("TARGETDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncCorrectiveactionXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_CORRECTIVEACTIONS_X_INCIDENTID");

            entity.HasOne(d => d.PersonresponsibleNavigation).WithMany(p => p.IncCorrectiveactionXes)
                .HasForeignKey(d => d.Personresponsible)
                .HasConstraintName("FK_INC_CORRECTIVEACTION_X_PERSONRESPONSIBLE");
        });

        modelBuilder.Entity<IncCovidisolationX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Covidisolationno });

            entity.ToTable("INC_COVIDISOLATION_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_COVIDISOLATION_X");
                    tb.HasTrigger("audins_INC_COVIDISOLATION_X");
                    tb.HasTrigger("audupd_INC_COVIDISOLATION_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Covidisolationno).HasColumnName("COVIDISOLATIONNO");
            entity.Property(e => e.Comfirmationresult)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMFIRMATIONRESULT");
            entity.Property(e => e.Dateisolatedfrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEISOLATEDFROM");
            entity.Property(e => e.Dateisolatedto)
                .HasColumnType("datetime")
                .HasColumnName("DATEISOLATEDTO");
            entity.Property(e => e.Dateofexposure)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFEXPOSURE");
            entity.Property(e => e.Dateoftestconfirmation)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFTESTCONFIRMATION");
            entity.Property(e => e.Datetestcompleted)
                .HasColumnType("datetime")
                .HasColumnName("DATETESTCOMPLETED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Isolationtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ISOLATIONTYPE");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Testedforcovid).HasColumnName("TESTEDFORCOVID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Typeofexposure)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TYPEOFEXPOSURE");
            entity.Property(e => e.Typeofinjury)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TYPEOFINJURY");
            entity.Property(e => e.Workingfromhome).HasColumnName("WORKINGFROMHOME");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncCovidisolationXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_COVIDISOLATION_X_INCIDENTID");
        });

        modelBuilder.Entity<IncCovidsymptomX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Covidisolationno, e.Covidsymptomno });

            entity.ToTable("INC_COVIDSYMPTOM_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_COVIDSYMPTOM_X");
                    tb.HasTrigger("audins_INC_COVIDSYMPTOM_X");
                    tb.HasTrigger("audupd_INC_COVIDSYMPTOM_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Covidisolationno).HasColumnName("COVIDISOLATIONNO");
            entity.Property(e => e.Covidsymptomno).HasColumnName("COVIDSYMPTOMNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Symptom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SYMPTOM");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.IncCovidisolationX).WithMany(p => p.IncCovidsymptomXes)
                .HasForeignKey(d => new { d.Incidentid, d.Covidisolationno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_COVIDSYMPTOM_X_COVIDISOLATIONNO");
        });

        modelBuilder.Entity<IncDetailsX>(entity =>
        {
            entity.HasKey(e => e.Incidentid).HasName("PK_INC_DETAILS_X_INCIDENTID");

            entity.ToTable("INC_DETAILS_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_DETAILS_X");
                    tb.HasTrigger("audins_INC_DETAILS_X");
                    tb.HasTrigger("audupd_INC_DETAILS_X");
                });

            entity.Property(e => e.Incidentid)
                .ValueGeneratedNever()
                .HasColumnName("INCIDENTID");
            entity.Property(e => e.Address1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Address3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS3");
            entity.Property(e => e.Dateadvised)
                .HasColumnType("datetime")
                .HasColumnName("DATEADVISED");
            entity.Property(e => e.Dateofincident)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFINCIDENT");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Isrecurrence).HasColumnName("ISRECURRENCE");
            entity.Property(e => e.Isrepeat).HasColumnName("ISREPEAT");
            entity.Property(e => e.Location)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCATION");
            entity.Property(e => e.Noknownsuburb).HasColumnName("NOKNOWNSUBURB");
            entity.Property(e => e.Postcode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reportedtopartyid).HasColumnName("REPORTEDTOPARTYID");
            entity.Property(e => e.Specificarea)
                .IsUnicode(false)
                .HasColumnName("SPECIFICAREA");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Timeadvised)
                .HasColumnType("datetime")
                .HasColumnName("TIMEADVISED");
            entity.Property(e => e.Timeofincident)
                .HasColumnType("datetime")
                .HasColumnName("TIMEOFINCIDENT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithOne(p => p.IncDetailsX)
                .HasForeignKey<IncDetailsX>(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_DETAILS_X_INCIDENTID");
        });

        modelBuilder.Entity<IncDocumentX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Documentno }).HasName("PK_INC_DOCUMENT_X_INCIDENTID");

            entity.ToTable("INC_DOCUMENT_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_DOCUMENT_X");
                    tb.HasTrigger("audins_INC_DOCUMENT_X");
                    tb.HasTrigger("audupd_INC_DOCUMENT_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Documentno).HasColumnName("DOCUMENTNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.IncDocumentXes)
                .HasForeignKey(d => d.Documentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_DOCUMENT_X_DOCUMENTID");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncDocumentXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_DOCUMENT_X_INCIDENTID");
        });

        modelBuilder.Entity<IncExposureX>(entity =>
        {
            entity.HasKey(e => e.Incidentid).HasName("PK_INC_EXPOSURE_X_INCIDENTID");

            entity.ToTable("INC_EXPOSURE_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_EXPOSURE_X");
                    tb.HasTrigger("audins_INC_EXPOSURE_X");
                    tb.HasTrigger("audupd_INC_EXPOSURE_X");
                });

            entity.Property(e => e.Incidentid)
                .ValueGeneratedNever()
                .HasColumnName("INCIDENTID");
            entity.Property(e => e.Activity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ACTIVITY");
            entity.Property(e => e.Activityother)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACTIVITYOTHER");
            entity.Property(e => e.Antiseptics).HasColumnName("ANTISEPTICS");
            entity.Property(e => e.Comments)
                .IsUnicode(false)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Completedvaccine).HasColumnName("COMPLETEDVACCINE");
            entity.Property(e => e.Exposurecauseother)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EXPOSURECAUSEOTHER");
            entity.Property(e => e.Exposuremethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXPOSUREMETHOD");
            entity.Property(e => e.Exposureother)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EXPOSUREOTHER");
            entity.Property(e => e.Extent)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXTENT");
            entity.Property(e => e.Extentunknown)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EXTENTUNKNOWN");
            entity.Property(e => e.Firstaidapplied).HasColumnName("FIRSTAIDAPPLIED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Infected).HasColumnName("INFECTED");
            entity.Property(e => e.Othertreatment)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OTHERTREATMENT");
            entity.Property(e => e.Ppeworn).HasColumnName("PPEWORN");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Rinsing).HasColumnName("RINSING");
            entity.Property(e => e.Sharpcontaminated).HasColumnName("SHARPCONTAMINATED");
            entity.Property(e => e.Sharpother)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SHARPOTHER");
            entity.Property(e => e.Sharptype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SHARPTYPE");
            entity.Property(e => e.Substance)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUBSTANCE");
            entity.Property(e => e.Substanceother)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUBSTANCEOTHER");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Vaccinemonth)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VACCINEMONTH");
            entity.Property(e => e.Vaccineyear).HasColumnName("VACCINEYEAR");
            entity.Property(e => e.Washing).HasColumnName("WASHING");

            entity.HasOne(d => d.Incident).WithOne(p => p.IncExposureX)
                .HasForeignKey<IncExposureX>(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_EXPOSURE_X_INCIDENTID");
        });

        modelBuilder.Entity<IncExposureareaX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Areano }).HasName("PK_INC_EXPOSUREAREA_X_INCIDENTID");

            entity.ToTable("INC_EXPOSUREAREA_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_EXPOSUREAREA_X");
                    tb.HasTrigger("audins_INC_EXPOSUREAREA_X");
                    tb.HasTrigger("audupd_INC_EXPOSUREAREA_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Areano).HasColumnName("AREANO");
            entity.Property(e => e.Areatype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AREATYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncExposureareaXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_EXPOSUREAREA_X_INCIDENTID");
        });

        modelBuilder.Entity<IncExposurecauseX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Causeno }).HasName("PK_INC_EXPOSURECAUSE_X_INCIDENTID");

            entity.ToTable("INC_EXPOSURECAUSE_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_EXPOSURECAUSE_X");
                    tb.HasTrigger("audins_INC_EXPOSURECAUSE_X");
                    tb.HasTrigger("audupd_INC_EXPOSURECAUSE_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Causeno).HasColumnName("CAUSENO");
            entity.Property(e => e.Causetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAUSETYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncExposurecausexes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_EXPOSURECAUSE_X_INCIDENTID");
        });

        modelBuilder.Entity<IncExposureppeX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Ppeno }).HasName("PK_INC_EXPOSUREPPE_X_INCIDENTID");

            entity.ToTable("INC_EXPOSUREPPE_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_EXPOSUREPPE_X");
                    tb.HasTrigger("audins_INC_EXPOSUREPPE_X");
                    tb.HasTrigger("audupd_INC_EXPOSUREPPE_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Ppeno).HasColumnName("PPENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Ppetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PPETYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncExposureppeXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_EXPOSUREPPE_X_INCIDENTID");
        });

        modelBuilder.Entity<IncFactorindividualX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Factorno }).HasName("PK_INC_FACTORINDIVIDUAL_X_INCIDENTID");

            entity.ToTable("INC_FACTORINDIVIDUAL_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_FACTORINDIVIDUAL_X");
                    tb.HasTrigger("audins_INC_FACTORINDIVIDUAL_X");
                    tb.HasTrigger("audupd_INC_FACTORINDIVIDUAL_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Factorno).HasColumnName("FACTORNO");
            entity.Property(e => e.Factor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FACTOR");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncFactorindividualXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_FACTORINDIVIDUAL_X_INCIDENTID");
        });

        modelBuilder.Entity<IncFactorlayoutX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Factorno }).HasName("PK_INC_FACTORLAYOUT_X_INCIDENTID");

            entity.ToTable("INC_FACTORLAYOUT_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_FACTORLAYOUT_X");
                    tb.HasTrigger("audins_INC_FACTORLAYOUT_X");
                    tb.HasTrigger("audupd_INC_FACTORLAYOUT_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Factorno).HasColumnName("FACTORNO");
            entity.Property(e => e.Factor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FACTOR");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncFactorlayoutXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_FACTORLAYOUT_X_INCIDENTID");
        });

        modelBuilder.Entity<IncFactorsystemofworkX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Factorno }).HasName("PK_INC_FACTORSYSTEMOFWORK_X_INCIDENTID");

            entity.ToTable("INC_FACTORSYSTEMOFWORK_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_FACTORSYSTEMOFWORK_");
                    tb.HasTrigger("audins_INC_FACTORSYSTEMOFWORK_");
                    tb.HasTrigger("audupd_INC_FACTORSYSTEMOFWORK_");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Factorno).HasColumnName("FACTORNO");
            entity.Property(e => e.Factor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FACTOR");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncFactorsystemofworkXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_FACTORSYSTEMOFWORK_X_INCIDENTID");
        });

        modelBuilder.Entity<IncFactorworkenvironmentX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Factorno }).HasName("PK_INC_FACTORWORKENVIRONMENT_X_INCIDENTID");

            entity.ToTable("INC_FACTORWORKENVIRONMENT_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_FACTORWORKENVIRONME");
                    tb.HasTrigger("audins_INC_FACTORWORKENVIRONME");
                    tb.HasTrigger("audupd_INC_FACTORWORKENVIRONME");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Factorno).HasColumnName("FACTORNO");
            entity.Property(e => e.Factor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FACTOR");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncFactorworkenvironmentXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_FACTORWORKENVIRONMENT_X_INCIDENTID");
        });

        modelBuilder.Entity<IncFallsliptripX>(entity =>
        {
            entity.HasKey(e => e.Incidentid).HasName("PK_INC_FALLSLIPTRIP_X_INCIDENTID");

            entity.ToTable("INC_FALLSLIPTRIP_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_FALLSLIPTRIP_X");
                    tb.HasTrigger("audins_INC_FALLSLIPTRIP_X");
                    tb.HasTrigger("audupd_INC_FALLSLIPTRIP_X");
                });

            entity.Property(e => e.Incidentid)
                .ValueGeneratedNever()
                .HasColumnName("INCIDENTID");
            entity.Property(e => e.Falloccurredfrom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FALLOCCURREDFROM");
            entity.Property(e => e.Falloccurredlocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FALLOCCURREDLOCATION");
            entity.Property(e => e.Falloccurredlocationother)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FALLOCCURREDLOCATIONOTHER");
            entity.Property(e => e.Falloccurredother)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FALLOCCURREDOTHER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Involvedobjectorhazard).HasColumnName("INVOLVEDOBJECTORHAZARD");
            entity.Property(e => e.Objectinvolved)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OBJECTINVOLVED");
            entity.Property(e => e.Objectinvolvedother)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OBJECTINVOLVEDOTHER");
            entity.Property(e => e.Occurredtolowerlevel).HasColumnName("OCCURREDTOLOWERLEVEL");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithOne(p => p.IncFallsliptripX)
                .HasForeignKey<IncFallsliptripX>(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_FALLSLIPTRIP_X_INCIDENTID");
        });

        modelBuilder.Entity<IncFurtherfindingX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Findingno }).HasName("PK_INC_FURTHERFINDING_X_INCIDENTID_FINDINGNO");

            entity.ToTable("INC_FURTHERFINDING_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_FURTHERFINDING_X");
                    tb.HasTrigger("audins_INC_FURTHERFINDING_X");
                    tb.HasTrigger("audupd_INC_FURTHERFINDING_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Findingno).HasColumnName("FINDINGNO");
            entity.Property(e => e.Datecompleted)
                .HasColumnType("datetime")
                .HasColumnName("DATECOMPLETED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Summary)
                .IsUnicode(false)
                .HasColumnName("SUMMARY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Incident).WithMany(p => p.IncFurtherfindingXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_FURTHERFINDING_X_INCIDENTID");
        });

        modelBuilder.Entity<IncHrdataX>(entity =>
        {
            entity.HasKey(e => e.Inchrid);

            entity.ToTable("INC_HRDATA_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_HRDATA_X");
                    tb.HasTrigger("audins_INC_HRDATA_X");
                    tb.HasTrigger("audupd_INC_HRDATA_X");
                });

            entity.Property(e => e.Inchrid).HasColumnName("INCHRID");
            entity.Property(e => e.Accesslevel).HasColumnName("ACCESSLEVEL");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Agencycode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCYCODE");
            entity.Property(e => e.Dateofbirth)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFBIRTH");
            entity.Property(e => e.Dateofrun)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFRUN");
            entity.Property(e => e.Email)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Employeenumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEENUMBER");
            entity.Property(e => e.Gender).HasColumnName("GENDER");
            entity.Property(e => e.Givenname)
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("GIVENNAME");
            entity.Property(e => e.Hashcode).HasColumnName("HASHCODE");
            entity.Property(e => e.Level1code)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LEVEL1CODE");
            entity.Property(e => e.Level2code)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LEVEL2CODE");
            entity.Property(e => e.Password)
                .HasMaxLength(256)
                .HasColumnName("PASSWORD");
            entity.Property(e => e.Preferredname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PREFERREDNAME");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Remoteaccessenabled).HasColumnName("REMOTEACCESSENABLED");
            entity.Property(e => e.Remoteaccessmobile)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("REMOTEACCESSMOBILE");
            entity.Property(e => e.Surname)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SURNAME");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<IncHrloadAgencyruleX>(entity =>
        {
            entity.HasKey(e => e.Agencyruleid).HasName("PK_INC_HRLOAD_AGENCYRULE_X_AGENCYRULEID");

            entity.ToTable("INC_HRLOAD_AGENCYRULE_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_HRLOAD_AGENCYRULE_X");
                    tb.HasTrigger("audins_INC_HRLOAD_AGENCYRULE_X");
                    tb.HasTrigger("audupd_INC_HRLOAD_AGENCYRULE_X");
                });

            entity.Property(e => e.Agencyruleid).HasColumnName("AGENCYRULEID");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AGENCY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Leadingzero).HasColumnName("LEADINGZERO");
            entity.Property(e => e.Numdigits).HasColumnName("NUMDIGITS");
            entity.Property(e => e.Portfolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PORTFOLIO");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Region)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("REGION");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<IncIncidentX>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("INC_INCIDENT_X");

            entity.Property(e => e.Actiontakenbyid).HasColumnName("ACTIONTAKENBYID");
            entity.Property(e => e.Actiontakendescription)
                .IsUnicode(false)
                .HasColumnName("ACTIONTAKENDESCRIPTION");
            entity.Property(e => e.Address1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Address3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS3");
            entity.Property(e => e.Alcoholaffected).HasColumnName("ALCOHOLAFFECTED");
            entity.Property(e => e.Coronarelated).HasColumnName("CORONARELATED");
            entity.Property(e => e.Dateadvised)
                .HasColumnType("datetime")
                .HasColumnName("DATEADVISED");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Dateofincident)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFINCIDENT");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Drugaffected).HasColumnName("DRUGAFFECTED");
            entity.Property(e => e.Environmental).HasColumnName("ENVIRONMENTAL");
            entity.Property(e => e.Environmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENVIRONMENTTYPE");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Hashs).HasColumnName("HASHS");
            entity.Property(e => e.Haswitnesses).HasColumnName("HASWITNESSES");
            entity.Property(e => e.Incidentid)
                .ValueGeneratedOnAdd()
                .HasColumnName("INCIDENTID");
            entity.Property(e => e.Incidentnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INCIDENTNUMBER");
            entity.Property(e => e.Incidenttype).HasColumnName("INCIDENTTYPE");
            entity.Property(e => e.Involvesinjuryillness).HasColumnName("INVOLVESINJURYILLNESS");
            entity.Property(e => e.Isrecurrence).HasColumnName("ISRECURRENCE");
            entity.Property(e => e.Isrepeat).HasColumnName("ISREPEAT");
            entity.Property(e => e.Likelihood)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIKELIHOOD");
            entity.Property(e => e.Location)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mechanismofhazardincident)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MECHANISMOFHAZARDINCIDENT");
            entity.Property(e => e.Mentalillness).HasColumnName("MENTALILLNESS");
            entity.Property(e => e.Motorvehicle).HasColumnName("MOTORVEHICLE");
            entity.Property(e => e.Nearmiss).HasColumnName("NEARMISS");
            entity.Property(e => e.Noknownsuburb).HasColumnName("NOKNOWNSUBURB");
            entity.Property(e => e.Nonworkrelatedincident).HasColumnName("NONWORKRELATEDINCIDENT");
            entity.Property(e => e.Notificationhsid).HasColumnName("NOTIFICATIONHSID");
            entity.Property(e => e.Notificationmanagerid).HasColumnName("NOTIFICATIONMANAGERID");
            entity.Property(e => e.Notificationsuperid).HasColumnName("NOTIFICATIONSUPERID");
            entity.Property(e => e.Notificationwhsuserid).HasColumnName("NOTIFICATIONWHSUSERID");
            entity.Property(e => e.Offender).HasColumnName("OFFENDER");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Pddamagedescription)
                .IsUnicode(false)
                .HasColumnName("PDDAMAGEDESCRIPTION");
            entity.Property(e => e.Pdotherdetails)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PDOTHERDETAILS");
            entity.Property(e => e.Pdtypeofdamage)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PDTYPEOFDAMAGE");
            entity.Property(e => e.Postcode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Propertydamage).HasColumnName("PROPERTYDAMAGE");
            entity.Property(e => e.Psychological).HasColumnName("PSYCHOLOGICAL");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reportedbyempno)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("REPORTEDBYEMPNO");
            entity.Property(e => e.Reportedbyfirstname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REPORTEDBYFIRSTNAME");
            entity.Property(e => e.Reportedbyid).HasColumnName("REPORTEDBYID");
            entity.Property(e => e.Reportedbysurname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REPORTEDBYSURNAME");
            entity.Property(e => e.Reportedtoid).HasColumnName("REPORTEDTOID");
            entity.Property(e => e.Security).HasColumnName("SECURITY");
            entity.Property(e => e.Securitydescription)
                .IsUnicode(false)
                .HasColumnName("SECURITYDESCRIPTION");
            entity.Property(e => e.Securityotherdetails)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SECURITYOTHERDETAILS");
            entity.Property(e => e.Securitysitelocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SECURITYSITELOCATION");
            entity.Property(e => e.Securitysitelocationother)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SECURITYSITELOCATIONOTHER");
            entity.Property(e => e.Securitytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SECURITYTYPE");
            entity.Property(e => e.Severity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEVERITY");
            entity.Property(e => e.Specificarea)
                .IsUnicode(false)
                .HasColumnName("SPECIFICAREA");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Timeadvised)
                .HasColumnType("datetime")
                .HasColumnName("TIMEADVISED");
            entity.Property(e => e.Timeentered)
                .HasColumnType("datetime")
                .HasColumnName("TIMEENTERED");
            entity.Property(e => e.Timeofincident)
                .HasColumnType("datetime")
                .HasColumnName("TIMEOFINCIDENT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Vehicledetailsunknown).HasColumnName("VEHICLEDETAILSUNKNOWN");
            entity.Property(e => e.Vehiclefleetnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHICLEFLEETNUMBER");
            entity.Property(e => e.Vehicleotherdetails)
                .IsUnicode(false)
                .HasColumnName("VEHICLEOTHERDETAILS");
            entity.Property(e => e.Vehicleregistrationnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHICLEREGISTRATIONNUMBER");
            entity.Property(e => e.Vehicletype).HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<IncIncidentX1>(entity =>
        {
            entity.HasKey(e => e.Incidentid).HasName("PK_INC_INCIDENT_X_INCIDENTID");

            entity.ToTable("INC_INCIDENT_X", "secure", tb =>
                {
                    tb.HasTrigger("auddel_INC_INCIDENT_X");
                    tb.HasTrigger("audins_INC_INCIDENT_X");
                    tb.HasTrigger("audupd_INC_INCIDENT_X");
                });

            entity.HasIndex(e => e.Incidentnumber, "UNQ_INC_INCIDENT_X_INCIDENTNUMBER").IsUnique();

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Actiontakenbyid).HasColumnName("ACTIONTAKENBYID");
            entity.Property(e => e.Actiontakendescription)
                .IsUnicode(false)
                .HasColumnName("ACTIONTAKENDESCRIPTION");
            entity.Property(e => e.Address1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Address3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS3");
            entity.Property(e => e.Alcoholaffected).HasColumnName("ALCOHOLAFFECTED");
            entity.Property(e => e.Coronarelated).HasColumnName("CORONARELATED");
            entity.Property(e => e.Dateadvised)
                .HasColumnType("datetime")
                .HasColumnName("DATEADVISED");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Dateofincident)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFINCIDENT");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Drugaffected).HasColumnName("DRUGAFFECTED");
            entity.Property(e => e.Environmental).HasColumnName("ENVIRONMENTAL");
            entity.Property(e => e.Environmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENVIRONMENTTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hashs).HasColumnName("HASHS");
            entity.Property(e => e.Haswitnesses).HasColumnName("HASWITNESSES");
            entity.Property(e => e.Incidentnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INCIDENTNUMBER");
            entity.Property(e => e.Incidenttype).HasColumnName("INCIDENTTYPE");
            entity.Property(e => e.Involvesinjuryillness).HasColumnName("INVOLVESINJURYILLNESS");
            entity.Property(e => e.Isrecurrence).HasColumnName("ISRECURRENCE");
            entity.Property(e => e.Isrepeat).HasColumnName("ISREPEAT");
            entity.Property(e => e.Likelihood)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIKELIHOOD");
            entity.Property(e => e.Location)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mechanismofhazardincident)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MECHANISMOFHAZARDINCIDENT");
            entity.Property(e => e.Mentalillness).HasColumnName("MENTALILLNESS");
            entity.Property(e => e.Motorvehicle).HasColumnName("MOTORVEHICLE");
            entity.Property(e => e.Nearmiss).HasColumnName("NEARMISS");
            entity.Property(e => e.Noknownsuburb).HasColumnName("NOKNOWNSUBURB");
            entity.Property(e => e.Nonworkrelatedincident).HasColumnName("NONWORKRELATEDINCIDENT");
            entity.Property(e => e.Notificationhsid).HasColumnName("NOTIFICATIONHSID");
            entity.Property(e => e.Notificationmanagerid).HasColumnName("NOTIFICATIONMANAGERID");
            entity.Property(e => e.Notificationsuperid).HasColumnName("NOTIFICATIONSUPERID");
            entity.Property(e => e.Notificationwhsuserid).HasColumnName("NOTIFICATIONWHSUSERID");
            entity.Property(e => e.Offender).HasColumnName("OFFENDER");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Pddamagedescription)
                .IsUnicode(false)
                .HasColumnName("PDDAMAGEDESCRIPTION");
            entity.Property(e => e.Pdotherdetails)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PDOTHERDETAILS");
            entity.Property(e => e.Pdtypeofdamage)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PDTYPEOFDAMAGE");
            entity.Property(e => e.Postcode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Propertydamage).HasColumnName("PROPERTYDAMAGE");
            entity.Property(e => e.Psychological).HasColumnName("PSYCHOLOGICAL");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reportedbyempno)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("REPORTEDBYEMPNO");
            entity.Property(e => e.Reportedbyfirstname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REPORTEDBYFIRSTNAME");
            entity.Property(e => e.Reportedbyid).HasColumnName("REPORTEDBYID");
            entity.Property(e => e.Reportedbysurname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REPORTEDBYSURNAME");
            entity.Property(e => e.Reportedtoid).HasColumnName("REPORTEDTOID");
            entity.Property(e => e.Security).HasColumnName("SECURITY");
            entity.Property(e => e.Securitydescription)
                .IsUnicode(false)
                .HasColumnName("SECURITYDESCRIPTION");
            entity.Property(e => e.Securityotherdetails)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SECURITYOTHERDETAILS");
            entity.Property(e => e.Securitysitelocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SECURITYSITELOCATION");
            entity.Property(e => e.Securitysitelocationother)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SECURITYSITELOCATIONOTHER");
            entity.Property(e => e.Securitytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SECURITYTYPE");
            entity.Property(e => e.Severity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEVERITY");
            entity.Property(e => e.Specificarea)
                .IsUnicode(false)
                .HasColumnName("SPECIFICAREA");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Timeadvised)
                .HasColumnType("datetime")
                .HasColumnName("TIMEADVISED");
            entity.Property(e => e.Timeentered)
                .HasColumnType("datetime")
                .HasColumnName("TIMEENTERED");
            entity.Property(e => e.Timeofincident)
                .HasColumnType("datetime")
                .HasColumnName("TIMEOFINCIDENT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Vehicledetailsunknown).HasColumnName("VEHICLEDETAILSUNKNOWN");
            entity.Property(e => e.Vehiclefleetnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHICLEFLEETNUMBER");
            entity.Property(e => e.Vehicleotherdetails)
                .IsUnicode(false)
                .HasColumnName("VEHICLEOTHERDETAILS");
            entity.Property(e => e.Vehicleregistrationnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHICLEREGISTRATIONNUMBER");
            entity.Property(e => e.Vehicletype).HasColumnName("VEHICLETYPE");

            entity.HasOne(d => d.Actiontakenby).WithMany(p => p.IncIncidentX1Actiontakenbies)
                .HasForeignKey(d => d.Actiontakenbyid)
                .HasConstraintName("FK_INC_INCIDENT_X_ACTIONTAKENBYID");

            entity.HasOne(d => d.Notificationhs).WithMany(p => p.IncIncidentX1Notificationhs)
                .HasForeignKey(d => d.Notificationhsid)
                .HasConstraintName("FK_INC_INCIDENT_X_NOTIFICATIONHSID");

            entity.HasOne(d => d.Notificationmanager).WithMany(p => p.IncIncidentX1Notificationmanagers)
                .HasForeignKey(d => d.Notificationmanagerid)
                .HasConstraintName("FK_INC_INCIDENT_X_NOTIFICATIONMANAGERID");

            entity.HasOne(d => d.Notificationsuper).WithMany(p => p.IncIncidentX1Notificationsupers)
                .HasForeignKey(d => d.Notificationsuperid)
                .HasConstraintName("FK_INC_INCIDENT_X_NOTIFICATIONSUPERID");

            entity.HasOne(d => d.Notificationwhsuser).WithMany(p => p.IncIncidentX1s)
                .HasForeignKey(d => d.Notificationwhsuserid)
                .HasConstraintName("FK_INC_INCIDENT_X_NOTIFICATIONWHSUSERID");

            entity.HasOne(d => d.Orgstruct).WithMany(p => p.IncIncidentX1s)
                .HasForeignKey(d => d.Orgstructid)
                .HasConstraintName("FK_INC_INCIDENT_X_ORGSTRUCTID");

            entity.HasOne(d => d.Reportedby).WithMany(p => p.IncIncidentX1Reportedbies)
                .HasForeignKey(d => d.Reportedbyid)
                .HasConstraintName("FK_INC_INCIDENT_X_REPORTEDBYID");

            entity.HasOne(d => d.Reportedto).WithMany(p => p.IncIncidentX1Reportedtos)
                .HasForeignKey(d => d.Reportedtoid)
                .HasConstraintName("FK_INC_INCIDENT_X_REPORTEDTOID");
        });

        modelBuilder.Entity<IncIncidentXSecure>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("INC_INCIDENT_X_SECURE");

            entity.Property(e => e.Actiontakenbyid).HasColumnName("ACTIONTAKENBYID");
            entity.Property(e => e.Actiontakendescription)
                .IsUnicode(false)
                .HasColumnName("ACTIONTAKENDESCRIPTION");
            entity.Property(e => e.Address1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Address3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS3");
            entity.Property(e => e.Dateadvised)
                .HasColumnType("datetime")
                .HasColumnName("DATEADVISED");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Dateofincident)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFINCIDENT");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Environmental).HasColumnName("ENVIRONMENTAL");
            entity.Property(e => e.Environmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENVIRONMENTTYPE");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Hashs).HasColumnName("HASHS");
            entity.Property(e => e.Haswitnesses).HasColumnName("HASWITNESSES");
            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Incidentnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INCIDENTNUMBER");
            entity.Property(e => e.Incidenttype).HasColumnName("INCIDENTTYPE");
            entity.Property(e => e.Involvesinjuryillness).HasColumnName("INVOLVESINJURYILLNESS");
            entity.Property(e => e.Isrecurrence).HasColumnName("ISRECURRENCE");
            entity.Property(e => e.Isrepeat).HasColumnName("ISREPEAT");
            entity.Property(e => e.Likelihood)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIKELIHOOD");
            entity.Property(e => e.Location)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mechanismofhazardincident)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MECHANISMOFHAZARDINCIDENT");
            entity.Property(e => e.Motorvehicle).HasColumnName("MOTORVEHICLE");
            entity.Property(e => e.Nearmiss).HasColumnName("NEARMISS");
            entity.Property(e => e.Noknownsuburb).HasColumnName("NOKNOWNSUBURB");
            entity.Property(e => e.Nonworkrelatedincident).HasColumnName("NONWORKRELATEDINCIDENT");
            entity.Property(e => e.Notificationhsid).HasColumnName("NOTIFICATIONHSID");
            entity.Property(e => e.Notificationmanagerid).HasColumnName("NOTIFICATIONMANAGERID");
            entity.Property(e => e.Notificationsuperid).HasColumnName("NOTIFICATIONSUPERID");
            entity.Property(e => e.Notificationwhsuserid).HasColumnName("NOTIFICATIONWHSUSERID");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Pddamagedescription)
                .IsUnicode(false)
                .HasColumnName("PDDAMAGEDESCRIPTION");
            entity.Property(e => e.Pdotherdetails)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PDOTHERDETAILS");
            entity.Property(e => e.Pdtypeofdamage)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PDTYPEOFDAMAGE");
            entity.Property(e => e.Postcode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Propertydamage).HasColumnName("PROPERTYDAMAGE");
            entity.Property(e => e.Psychological).HasColumnName("PSYCHOLOGICAL");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reportedbyempno)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("REPORTEDBYEMPNO");
            entity.Property(e => e.Reportedbyfirstname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REPORTEDBYFIRSTNAME");
            entity.Property(e => e.Reportedbyid).HasColumnName("REPORTEDBYID");
            entity.Property(e => e.Reportedbysurname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REPORTEDBYSURNAME");
            entity.Property(e => e.Reportedtoid).HasColumnName("REPORTEDTOID");
            entity.Property(e => e.Security).HasColumnName("SECURITY");
            entity.Property(e => e.Securitydescription)
                .IsUnicode(false)
                .HasColumnName("SECURITYDESCRIPTION");
            entity.Property(e => e.Securityotherdetails)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SECURITYOTHERDETAILS");
            entity.Property(e => e.Securitytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SECURITYTYPE");
            entity.Property(e => e.Severity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEVERITY");
            entity.Property(e => e.Specificarea)
                .IsUnicode(false)
                .HasColumnName("SPECIFICAREA");
            entity.Property(e => e.Spid).HasColumnName("SPID");
            entity.Property(e => e.Starttime)
                .HasColumnType("datetime")
                .HasColumnName("starttime");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Timeadvised)
                .HasColumnType("datetime")
                .HasColumnName("TIMEADVISED");
            entity.Property(e => e.Timeentered)
                .HasColumnType("datetime")
                .HasColumnName("TIMEENTERED");
            entity.Property(e => e.Timeofincident)
                .HasColumnType("datetime")
                .HasColumnName("TIMEOFINCIDENT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Token)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("token");
            entity.Property(e => e.Userid).HasColumnName("userid");
            entity.Property(e => e.Vehicledetailsunknown).HasColumnName("VEHICLEDETAILSUNKNOWN");
            entity.Property(e => e.Vehiclefleetnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHICLEFLEETNUMBER");
            entity.Property(e => e.Vehicleotherdetails)
                .IsUnicode(false)
                .HasColumnName("VEHICLEOTHERDETAILS");
            entity.Property(e => e.Vehicleregistrationnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VEHICLEREGISTRATIONNUMBER");
            entity.Property(e => e.Vehicletype).HasColumnName("VEHICLETYPE");
            entity.Property(e => e.Xbypassclaimsecurity).HasColumnName("XBYPASSCLAIMSECURITY");
            entity.Property(e => e.Xbypassincidentsecurity).HasColumnName("XBYPASSINCIDENTSECURITY");
            entity.Property(e => e.Xcanviewconfidentialclaim).HasColumnName("XCANVIEWCONFIDENTIALCLAIM");
            entity.Property(e => e.Xcanviewebclaim).HasColumnName("XCANVIEWEBCLAIM");
            entity.Property(e => e.Xcanviewsiclaim).HasColumnName("XCANVIEWSICLAIM");
            entity.Property(e => e.Xsuspendsecurityupdates).HasColumnName("XSUSPENDSECURITYUPDATES");
        });

        modelBuilder.Entity<IncIncidentuserX>(entity =>
        {
            entity.HasKey(e => e.Incidentuserid).HasName("PK_INC_INCIDENTUSER_X_INCIDENTID");

            entity.ToTable("INC_INCIDENTUSER_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_INCIDENTUSER_X");
                    tb.HasTrigger("audins_INC_INCIDENTUSER_X");
                    tb.HasTrigger("audupd_INC_INCIDENTUSER_X");
                });

            entity.Property(e => e.Incidentuserid).HasColumnName("INCIDENTUSERID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Password)
                .HasMaxLength(256)
                .HasColumnName("PASSWORD");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Username)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("USERNAME");

            entity.HasOne(d => d.Party).WithMany(p => p.IncIncidentuserXes)
                .HasForeignKey(d => d.Partyid)
                .HasConstraintName("FK_INC_INCIDENTUSER_X_PARTYID");

            entity.HasOne(d => d.User).WithMany(p => p.IncIncidentuserXes)
                .HasForeignKey(d => d.Userid)
                .HasConstraintName("FK_INC_INCIDENTUSER_X_USERID");
        });

        modelBuilder.Entity<IncInitialtreatmentX>(entity =>
        {
            entity.HasKey(e => e.Incidentid).HasName("PK_INC_INITIALTREATMENT_X_INCIDENTID");

            entity.ToTable("INC_INITIALTREATMENT_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_INITIALTREATMENT_X");
                    tb.HasTrigger("audins_INC_INITIALTREATMENT_X");
                    tb.HasTrigger("audupd_INC_INITIALTREATMENT_X");
                });

            entity.Property(e => e.Incidentid)
                .ValueGeneratedNever()
                .HasColumnName("INCIDENTID");
            entity.Property(e => e.Assistancerequired).HasColumnName("ASSISTANCEREQUIRED");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Initialtreatment).HasColumnName("INITIALTREATMENT");
            entity.Property(e => e.Injuryillnessdescription)
                .IsUnicode(false)
                .HasColumnName("INJURYILLNESSDESCRIPTION");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithOne(p => p.IncInitialtreatmentX)
                .HasForeignKey<IncInitialtreatmentX>(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_INITIALTREATMENT_X_INCIDENTID");
        });

        modelBuilder.Entity<IncInvestigationX>(entity =>
        {
            entity.HasKey(e => e.Incidentid).HasName("PK_INC_INVESTIGATION_X_INCIDENTID");

            entity.ToTable("INC_INVESTIGATION_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_INVESTIGATION_X");
                    tb.HasTrigger("audins_INC_INVESTIGATION_X");
                    tb.HasTrigger("audupd_INC_INVESTIGATION_X");
                });

            entity.Property(e => e.Incidentid)
                .ValueGeneratedNever()
                .HasColumnName("INCIDENTID");
            entity.Property(e => e.Agency1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY1");
            entity.Property(e => e.Agency1codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY1CODETYPE");
            entity.Property(e => e.Agency2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY2");
            entity.Property(e => e.Agency2codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY2CODETYPE");
            entity.Property(e => e.Areasafe).HasColumnName("AREASAFE");
            entity.Property(e => e.Areasafedetails)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("AREASAFEDETAILS");
            entity.Property(e => e.Assessmentconducted).HasColumnName("ASSESSMENTCONDUCTED");
            entity.Property(e => e.Aware).HasColumnName("AWARE");
            entity.Property(e => e.Awaredetails)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("AWAREDETAILS");
            entity.Property(e => e.Bodilylocation1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATION1");
            entity.Property(e => e.Bodilylocation1codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATION1CODETYPE");
            entity.Property(e => e.Bodilylocation2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATION2");
            entity.Property(e => e.Bodilylocation2codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATION2CODETYPE");
            entity.Property(e => e.Bodilylocation3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATION3");
            entity.Property(e => e.Bodilylocation3codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODILYLOCATION3CODETYPE");
            entity.Property(e => e.Consultcomments)
                .IsUnicode(false)
                .HasColumnName("CONSULTCOMMENTS");
            entity.Property(e => e.Consultdate)
                .HasColumnType("datetime")
                .HasColumnName("CONSULTDATE");
            entity.Property(e => e.Consultedhsrep).HasColumnName("CONSULTEDHSREP");
            entity.Property(e => e.Dateclosed)
                .HasColumnType("datetime")
                .HasColumnName("DATECLOSED");
            entity.Property(e => e.Datecommenced)
                .HasColumnType("datetime")
                .HasColumnName("DATECOMMENCED");
            entity.Property(e => e.Datecompleted)
                .HasColumnType("datetime")
                .HasColumnName("DATECOMPLETED");
            entity.Property(e => e.Datedue)
                .HasColumnType("datetime")
                .HasColumnName("DATEDUE");
            entity.Property(e => e.Dateinvestigationactionscompleted)
                .HasColumnType("datetime")
                .HasColumnName("DATEINVESTIGATIONACTIONSCOMPLETED");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Electricalhasnotified).HasColumnName("ELECTRICALHASNOTIFIED");
            entity.Property(e => e.Electricalhasnotifieddetails)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ELECTRICALHASNOTIFIEDDETAILS");
            entity.Property(e => e.Exposuretype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXPOSURETYPE");
            entity.Property(e => e.Externalinvestigation).HasColumnName("EXTERNALINVESTIGATION");
            entity.Property(e => e.Externalinvestigationdetails)
                .IsUnicode(false)
                .HasColumnName("EXTERNALINVESTIGATIONDETAILS");
            entity.Property(e => e.Firsttime).HasColumnName("FIRSTTIME");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Injuryside)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYSIDE");
            entity.Property(e => e.Injurytype).HasColumnName("INJURYTYPE");
            entity.Property(e => e.Involvebodyfluid).HasColumnName("INVOLVEBODYFLUID");
            entity.Property(e => e.Involvefall).HasColumnName("INVOLVEFALL");
            entity.Property(e => e.Involvehumanbiofactors).HasColumnName("INVOLVEHUMANBIOFACTORS");
            entity.Property(e => e.Involveneedle).HasColumnName("INVOLVENEEDLE");
            entity.Property(e => e.Involvepsych).HasColumnName("INVOLVEPSYCH");
            entity.Property(e => e.Involveskin).HasColumnName("INVOLVESKIN");
            entity.Property(e => e.Involvestress).HasColumnName("INVOLVESTRESS");
            entity.Property(e => e.Involvesubstance).HasColumnName("INVOLVESUBSTANCE");
            entity.Property(e => e.Involveviolence).HasColumnName("INVOLVEVIOLENCE");
            entity.Property(e => e.Isdangerous).HasColumnName("ISDANGEROUS");
            entity.Property(e => e.Iselectrical).HasColumnName("ISELECTRICAL");
            entity.Property(e => e.Isnotifiable).HasColumnName("ISNOTIFIABLE");
            entity.Property(e => e.Leadinvestigatorid).HasColumnName("LEADINVESTIGATORID");
            entity.Property(e => e.Likelihood)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIKELIHOOD");
            entity.Property(e => e.Mechanism1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MECHANISM1");
            entity.Property(e => e.Mechanism1codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MECHANISM1CODETYPE");
            entity.Property(e => e.Mechanism2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MECHANISM2");
            entity.Property(e => e.Mechanism2codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MECHANISM2CODETYPE");
            entity.Property(e => e.Nature1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NATURE1");
            entity.Property(e => e.Nature1codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NATURE1CODETYPE");
            entity.Property(e => e.Nature2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NATURE2");
            entity.Property(e => e.Nature2codetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NATURE2CODETYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Recurrencedetails)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("RECURRENCEDETAILS");
            entity.Property(e => e.Regulatorfilenumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("REGULATORFILENUMBER");
            entity.Property(e => e.Regulatoridnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("REGULATORIDNUMBER");
            entity.Property(e => e.Regulatornotified).HasColumnName("REGULATORNOTIFIED");
            entity.Property(e => e.Regulatornotifieddangerous).HasColumnName("REGULATORNOTIFIEDDANGEROUS");
            entity.Property(e => e.Regulatornotifieddangerousdetails)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REGULATORNOTIFIEDDANGEROUSDETAILS");
            entity.Property(e => e.Regulatornotifieddetails)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REGULATORNOTIFIEDDETAILS");
            entity.Property(e => e.Regulatorreporteddate)
                .HasColumnType("datetime")
                .HasColumnName("REGULATORREPORTEDDATE");
            entity.Property(e => e.Regulatorreportedtime)
                .HasColumnType("datetime")
                .HasColumnName("REGULATORREPORTEDTIME");
            entity.Property(e => e.Representativeconsultedid).HasColumnName("REPRESENTATIVECONSULTEDID");
            entity.Property(e => e.Reviewerhrid).HasColumnName("REVIEWERHRID");
            entity.Property(e => e.Severity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEVERITY");
            entity.Property(e => e.Sitepreserved).HasColumnName("SITEPRESERVED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithOne(p => p.IncInvestigationX)
                .HasForeignKey<IncInvestigationX>(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_INVESTIGATION_X_INCIDENTID");

            entity.HasOne(d => d.Leadinvestigator).WithMany(p => p.IncInvestigationXLeadinvestigators)
                .HasForeignKey(d => d.Leadinvestigatorid)
                .HasConstraintName("FK_INC_INVESTIGATION_X_LEADINVESTIGATORID");

            entity.HasOne(d => d.Representativeconsulted).WithMany(p => p.IncInvestigationXRepresentativeconsulteds)
                .HasForeignKey(d => d.Representativeconsultedid)
                .HasConstraintName("FK_INC_INVESTIGATION_X_REPRESENTATIVECONSULTEDID");

            entity.HasOne(d => d.Reviewerhr).WithMany(p => p.IncInvestigationXReviewerhrs)
                .HasForeignKey(d => d.Reviewerhrid)
                .HasConstraintName("FK_INC_INVESTIGATION_X_REVIEWERHRID");
        });

        modelBuilder.Entity<IncInvestigationdocumentX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Docno }).HasName("PK_IINC_INVESTIGATIONDOCUMENT_X_INCIDENTID_DOCNO");

            entity.ToTable("INC_INVESTIGATIONDOCUMENT_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_INVESTIGATIONDOCUME");
                    tb.HasTrigger("audins_INC_INVESTIGATIONDOCUME");
                    tb.HasTrigger("audupd_INC_INVESTIGATIONDOCUME");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Docno).HasColumnName("DOCNO");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Isreportform).HasColumnName("ISREPORTFORM");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.IncInvestigationdocumentXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_INC_INVESTIGATIONDOCUMENT_X_DOCUMENTID");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncInvestigationdocumentXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_INVESTIGATIONDOCUMENT_X_INCIDENTID");
        });

        modelBuilder.Entity<IncInvestigationpartbX>(entity =>
        {
            entity.HasKey(e => e.Incidentid).HasName("PK_INC_INVESTIGATIONPARTB_X_INCIDENTID");

            entity.ToTable("INC_INVESTIGATIONPARTB_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_INVESTIGATIONPARTB_");
                    tb.HasTrigger("audins_INC_INVESTIGATIONPARTB_");
                    tb.HasTrigger("audupd_INC_INVESTIGATIONPARTB_");
                });

            entity.Property(e => e.Incidentid)
                .ValueGeneratedNever()
                .HasColumnName("INCIDENTID");
            entity.Property(e => e.Changeintraining).HasColumnName("CHANGEINTRAINING");
            entity.Property(e => e.Changeintrainingdate)
                .HasColumnType("datetime")
                .HasColumnName("CHANGEINTRAININGDATE");
            entity.Property(e => e.Changetoinduction).HasColumnName("CHANGETOINDUCTION");
            entity.Property(e => e.Changetoinductiondate)
                .HasColumnType("datetime")
                .HasColumnName("CHANGETOINDUCTIONDATE");
            entity.Property(e => e.Changetoworkprocedure).HasColumnName("CHANGETOWORKPROCEDURE");
            entity.Property(e => e.Changetoworkproceduredate)
                .HasColumnType("datetime")
                .HasColumnName("CHANGETOWORKPROCEDUREDATE");
            entity.Property(e => e.Controlmeasure)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTROLMEASURE");
            entity.Property(e => e.Debrief).HasColumnName("DEBRIEF");
            entity.Property(e => e.Debriefdate)
                .HasColumnType("datetime")
                .HasColumnName("DEBRIEFDATE");
            entity.Property(e => e.Details)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("DETAILS");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("DUEDATE");
            entity.Property(e => e.Equipmaintainence).HasColumnName("EQUIPMAINTAINENCE");
            entity.Property(e => e.Equipmaintainencedate)
                .HasColumnType("datetime")
                .HasColumnName("EQUIPMAINTAINENCEDATE");
            entity.Property(e => e.Equipmods).HasColumnName("EQUIPMODS");
            entity.Property(e => e.Equipmodsdate)
                .HasColumnType("datetime")
                .HasColumnName("EQUIPMODSDATE");
            entity.Property(e => e.Executiveoverview)
                .IsUnicode(false)
                .HasColumnName("EXECUTIVEOVERVIEW");
            entity.Property(e => e.Feedbackdate)
                .HasColumnType("datetime")
                .HasColumnName("FEEDBACKDATE");
            entity.Property(e => e.Feedbackprovided).HasColumnName("FEEDBACKPROVIDED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hazardreassessment).HasColumnName("HAZARDREASSESSMENT");
            entity.Property(e => e.Hazardresolved).HasColumnName("HAZARDRESOLVED");
            entity.Property(e => e.Hazardtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAZARDTYPE");
            entity.Property(e => e.Immediateactiondetails)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("IMMEDIATEACTIONDETAILS");
            entity.Property(e => e.Individualdetails)
                .IsUnicode(false)
                .HasColumnName("INDIVIDUALDETAILS");
            entity.Property(e => e.Jobredesign).HasColumnName("JOBREDESIGN");
            entity.Property(e => e.Jobredesigndate)
                .HasColumnType("datetime")
                .HasColumnName("JOBREDESIGNDATE");
            entity.Property(e => e.Layoutandequipmentdetails)
                .IsUnicode(false)
                .HasColumnName("LAYOUTANDEQUIPMENTDETAILS");
            entity.Property(e => e.Nochange).HasColumnName("NOCHANGE");
            entity.Property(e => e.Nofeedbackreason)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("NOFEEDBACKREASON");
            entity.Property(e => e.Other)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OTHER");
            entity.Property(e => e.Otheraction).HasColumnName("OTHERACTION");
            entity.Property(e => e.Otheractiondate)
                .HasColumnType("datetime")
                .HasColumnName("OTHERACTIONDATE");
            entity.Property(e => e.Personreassessmentid).HasColumnName("PERSONREASSESSMENTID");
            entity.Property(e => e.Preventativeactiondescription)
                .IsUnicode(false)
                .HasColumnName("PREVENTATIVEACTIONDESCRIPTION");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Repconsulted).HasColumnName("REPCONSULTED");
            entity.Property(e => e.Representativeid).HasColumnName("REPRESENTATIVEID");
            entity.Property(e => e.Systemofworkdetails)
                .IsUnicode(false)
                .HasColumnName("SYSTEMOFWORKDETAILS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Workenvironmentdetails)
                .IsUnicode(false)
                .HasColumnName("WORKENVIRONMENTDETAILS");
            entity.Property(e => e.Workstationadjustments).HasColumnName("WORKSTATIONADJUSTMENTS");
            entity.Property(e => e.Workstationadjustmentsdate)
                .HasColumnType("datetime")
                .HasColumnName("WORKSTATIONADJUSTMENTSDATE");

            entity.HasOne(d => d.Incident).WithOne(p => p.IncInvestigationpartbX)
                .HasForeignKey<IncInvestigationpartbX>(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_INVESTIGATIONPARTB_X_INCIDENTID");

            entity.HasOne(d => d.Personreassessment).WithMany(p => p.IncInvestigationpartbXPersonreassessments)
                .HasForeignKey(d => d.Personreassessmentid)
                .HasConstraintName("FK_INC_INVESTIGATIONPARTB_X_PERSONREASSESSMENTID");

            entity.HasOne(d => d.Representative).WithMany(p => p.IncInvestigationpartbXRepresentatives)
                .HasForeignKey(d => d.Representativeid)
                .HasConstraintName("FK_INC_INVESTIGATIONPARTB_X_REPRESENTATIVEID");
        });

        modelBuilder.Entity<IncInvestigationreasonX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Reasonno }).HasName("PK_INC_INVESTIGATIONREASON_X_INCIDENTID");

            entity.ToTable("INC_INVESTIGATIONREASON_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_INVESTIGATIONREASON");
                    tb.HasTrigger("audins_INC_INVESTIGATIONREASON");
                    tb.HasTrigger("audupd_INC_INVESTIGATIONREASON");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Reasonno).HasColumnName("REASONNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REASON");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncInvestigationreasonXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_INVESTIGATIONREASON_X_INCIDENTID");
        });

        modelBuilder.Entity<IncInvestigationreviewX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Reviewno }).HasName("PK_INC_INVESTIGATIONREVIEW_X_INCIDENTID_REVIEWNO");

            entity.ToTable("INC_INVESTIGATIONREVIEW_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_INVESTIGATIONREVIEW");
                    tb.HasTrigger("audins_INC_INVESTIGATIONREVIEW");
                    tb.HasTrigger("audupd_INC_INVESTIGATIONREVIEW");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Reviewno).HasColumnName("REVIEWNO");
            entity.Property(e => e.Actionapprassgined).HasColumnName("ACTIONAPPRASSGINED");
            entity.Property(e => e.Actioncomments)
                .IsUnicode(false)
                .HasColumnName("ACTIONCOMMENTS");
            entity.Property(e => e.Furtherinvestigationrequired).HasColumnName("FURTHERINVESTIGATIONREQUIRED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Investigationcomments)
                .IsUnicode(false)
                .HasColumnName("INVESTIGATIONCOMMENTS");
            entity.Property(e => e.Rejectedreason)
                .IsUnicode(false)
                .HasColumnName("REJECTEDREASON");
            entity.Property(e => e.Reviewedbyinchrid).HasColumnName("REVIEWEDBYINCHRID");
            entity.Property(e => e.Revieweddate)
                .HasColumnType("datetime")
                .HasColumnName("REVIEWEDDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Incident).WithMany(p => p.IncInvestigationreviewXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_INVESTIGATIONREVIEW_X_INCIDENTID");

            entity.HasOne(d => d.Reviewedbyinchr).WithMany(p => p.IncInvestigationreviewXes)
                .HasForeignKey(d => d.Reviewedbyinchrid)
                .HasConstraintName("FK_INC_INVESTIGATIONREVIEW_X_REVIEWEDBYINCHRID");
        });

        modelBuilder.Entity<IncInvestigationteamX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Teamno }).HasName("PK_INC_INVESTIGATIONTEAM_X_INCIDENTID");

            entity.ToTable("INC_INVESTIGATIONTEAM_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_INVESTIGATIONTEAM_X");
                    tb.HasTrigger("audins_INC_INVESTIGATIONTEAM_X");
                    tb.HasTrigger("audupd_INC_INVESTIGATIONTEAM_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Teamno).HasColumnName("TEAMNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Inchrid).HasColumnName("INCHRID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncInvestigationteamXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_INVESTIGATIONTEAM_X_INCIDENTID");
        });

        modelBuilder.Entity<IncManualtaskX>(entity =>
        {
            entity.HasKey(e => e.Incidentid).HasName("PK_INC_MANUALTASK_X_INCIDENTID");

            entity.ToTable("INC_MANUALTASK_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_MANUALTASK_X");
                    tb.HasTrigger("audins_INC_MANUALTASK_X");
                    tb.HasTrigger("audupd_INC_MANUALTASK_X");
                });

            entity.Property(e => e.Incidentid)
                .ValueGeneratedNever()
                .HasColumnName("INCIDENTID");
            entity.Property(e => e.Assistancesought).HasColumnName("ASSISTANCESOUGHT");
            entity.Property(e => e.Employeenumber)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EMPLOYEENUMBER");
            entity.Property(e => e.Equipmentavailable).HasColumnName("EQUIPMENTAVAILABLE");
            entity.Property(e => e.Equipmentother)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EQUIPMENTOTHER");
            entity.Property(e => e.Equipmentrequired).HasColumnName("EQUIPMENTREQUIRED");
            entity.Property(e => e.Equipmenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EQUIPMENTTYPE");
            entity.Property(e => e.Equipmentused).HasColumnName("EQUIPMENTUSED");
            entity.Property(e => e.Equipmentworking).HasColumnName("EQUIPMENTWORKING");
            entity.Property(e => e.Exposuretovibration).HasColumnName("EXPOSURETOVIBRATION");
            entity.Property(e => e.Firstname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Gender).HasColumnName("GENDER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Highforce).HasColumnName("HIGHFORCE");
            entity.Property(e => e.Involvedpartyid).HasColumnName("INVOLVEDPARTYID");
            entity.Property(e => e.Involvedperson).HasColumnName("INVOLVEDPERSON");
            entity.Property(e => e.Manualhandlingtraining).HasColumnName("MANUALHANDLINGTRAINING");
            entity.Property(e => e.Manualtrainingnone)
                .IsUnicode(false)
                .HasColumnName("MANUALTRAININGNONE");
            entity.Property(e => e.Manualtrainingother)
                .IsUnicode(false)
                .HasColumnName("MANUALTRAININGOTHER");
            entity.Property(e => e.Manualtrainingyear).HasColumnName("MANUALTRAININGYEAR");
            entity.Property(e => e.Numberofpeople).HasColumnName("NUMBEROFPEOPLE");
            entity.Property(e => e.Personcooperated).HasColumnName("PERSONCOOPERATED");
            entity.Property(e => e.Persontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERSONTYPE");
            entity.Property(e => e.Prolongedforce).HasColumnName("PROLONGEDFORCE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Repetitivemovement).HasColumnName("REPETITIVEMOVEMENT");
            entity.Property(e => e.Sufficientavailable).HasColumnName("SUFFICIENTAVAILABLE");
            entity.Property(e => e.Sufficientroom).HasColumnName("SUFFICIENTROOM");
            entity.Property(e => e.Surfaceadjustable).HasColumnName("SURFACEADJUSTABLE");
            entity.Property(e => e.Surfacewasadjusted).HasColumnName("SURFACEWASADJUSTED");
            entity.Property(e => e.Surname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SURNAME");
            entity.Property(e => e.Sustainedposture).HasColumnName("SUSTAINEDPOSTURE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Unexpectedmovement).HasColumnName("UNEXPECTEDMOVEMENT");

            entity.HasOne(d => d.Incident).WithOne(p => p.IncManualtaskX)
                .HasForeignKey<IncManualtaskX>(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_MANUALTASK_X_INCIDENTID");
        });

        modelBuilder.Entity<IncNotificationsX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Notificationno }).HasName("PK_INC_NOTIFICATIONS_X_INCIDENTID");

            entity.ToTable("INC_NOTIFICATIONS_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_NOTIFICATIONS_X");
                    tb.HasTrigger("audins_INC_NOTIFICATIONS_X");
                    tb.HasTrigger("audupd_INC_NOTIFICATIONS_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Notificationno).HasColumnName("NOTIFICATIONNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Inchrid).HasColumnName("INCHRID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Role)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ROLE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Userid).HasColumnName("USERID");

            entity.HasOne(d => d.Inchr).WithMany(p => p.IncNotificationsXes)
                .HasForeignKey(d => d.Inchrid)
                .HasConstraintName("FK_INC_NOTIFICATIONS_X_INCHRID");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncNotificationsXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_NOTIFICATIONS_X_INCIDENTID");

            entity.HasOne(d => d.User).WithMany(p => p.IncNotificationsXes)
                .HasForeignKey(d => d.Userid)
                .HasConstraintName("FK_INC_NOTIFICATIONS_X_USERID");
        });

        modelBuilder.Entity<IncPersoninvolvedX>(entity =>
        {
            entity.HasKey(e => e.Incidentid).HasName("PK_INC_PERSONINVOLVED_X_INCIDENTID");

            entity.ToTable("INC_PERSONINVOLVED_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_PERSONINVOLVED_X");
                    tb.HasTrigger("audins_INC_PERSONINVOLVED_X");
                    tb.HasTrigger("audupd_INC_PERSONINVOLVED_X");
                });

            entity.Property(e => e.Incidentid)
                .ValueGeneratedNever()
                .HasColumnName("INCIDENTID");
            entity.Property(e => e.Altemail)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ALTEMAIL");
            entity.Property(e => e.Altphone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ALTPHONE");
            entity.Property(e => e.Company)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Employeenumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEENUMBER");
            entity.Property(e => e.Familyname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAMILYNAME");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GENDER");
            entity.Property(e => e.Givennames)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GIVENNAMES");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Nonemployeetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NONEMPLOYEETYPE");
            entity.Property(e => e.Occupation)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Personinvolved).HasColumnName("PERSONINVOLVED");
            entity.Property(e => e.Persontype).HasColumnName("PERSONTYPE");
            entity.Property(e => e.Phone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Hr).WithMany(p => p.IncPersoninvolvedXes)
                .HasForeignKey(d => d.Hrid)
                .HasConstraintName("FK_INC_PERSONINVOLVED_X_INCHRID");

            entity.HasOne(d => d.Incident).WithOne(p => p.IncPersoninvolvedX)
                .HasForeignKey<IncPersoninvolvedX>(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_PERSONINVOLVED_X_INCIDENTID");
        });

        modelBuilder.Entity<IncPsychologicalX>(entity =>
        {
            entity.HasKey(e => e.Incidentid).HasName("PK_INC_PSYCHOLOGICAL_X_INCIDENTID");

            entity.ToTable("INC_PSYCHOLOGICAL_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_PSYCHOLOGICAL_X");
                    tb.HasTrigger("audins_INC_PSYCHOLOGICAL_X");
                    tb.HasTrigger("audupd_INC_PSYCHOLOGICAL_X");
                });

            entity.Property(e => e.Incidentid)
                .ValueGeneratedNever()
                .HasColumnName("INCIDENTID");
            entity.Property(e => e.Eventdescription)
                .IsUnicode(false)
                .HasColumnName("EVENTDESCRIPTION");
            entity.Property(e => e.Eventfrequency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVENTFREQUENCY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Otherdetails)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OTHERDETAILS");
            entity.Property(e => e.Prioreventdescription)
                .IsUnicode(false)
                .HasColumnName("PRIOREVENTDESCRIPTION");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithOne(p => p.IncPsychologicalX)
                .HasForeignKey<IncPsychologicalX>(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_PSYCHOLOGICAL_X_INCIDENTID");
        });

        modelBuilder.Entity<IncPsychologicalfactorX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Psychologicalfactorno }).HasName("PK_INC_PSYCHOLOGICALFACTOR_X_INCIDENTID_PSYCHOLOGICALFACTORNO");

            entity.ToTable("INC_PSYCHOLOGICALFACTOR_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_PSYCHOLOGICALFACTOR");
                    tb.HasTrigger("audins_INC_PSYCHOLOGICALFACTOR");
                    tb.HasTrigger("audupd_INC_PSYCHOLOGICALFACTOR");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Psychologicalfactorno).HasColumnName("PSYCHOLOGICALFACTORNO");
            entity.Property(e => e.Factor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FACTOR");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncPsychologicalfactorXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_PSYCHOLOGICALFACTOR_X_INCIDENTID");
        });

        modelBuilder.Entity<IncPsychologicalotherpeopleX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Personno }).HasName("PK_INC_PSYCHOLOGICALOTHERPEOPLE_X_INCIDENTID");

            entity.ToTable("INC_PSYCHOLOGICALOTHERPEOPLE_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_PSYCHOLOGICALOTHERP");
                    tb.HasTrigger("audins_INC_PSYCHOLOGICALOTHERP");
                    tb.HasTrigger("audupd_INC_PSYCHOLOGICALOTHERP");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Personno).HasColumnName("PERSONNO");
            entity.Property(e => e.Firstname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Inchrid).HasColumnName("INCHRID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Relationshiptype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATIONSHIPTYPE");
            entity.Property(e => e.Surname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SURNAME");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Inchr).WithMany(p => p.IncPsychologicalotherpeopleXes)
                .HasForeignKey(d => d.Inchrid)
                .HasConstraintName("FK_INC_PSYCHOLOGICALOTHERPEOPLE_X_INCHRID");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncPsychologicalotherpeopleXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_PSYCHOLOGICALOTHERPEOPLE_X_INCIDENTID");
        });

        modelBuilder.Entity<IncRejectX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Rejectno }).HasName("PK_INC_REJECT_X_INCIDENTID_REJECTNO");

            entity.ToTable("INC_REJECT_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_REJECT_X");
                    tb.HasTrigger("audins_INC_REJECT_X");
                    tb.HasTrigger("audupd_INC_REJECT_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Rejectno).HasColumnName("REJECTNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Rejectedbyinchrid).HasColumnName("REJECTEDBYINCHRID");
            entity.Property(e => e.Rejectedbyuserid).HasColumnName("REJECTEDBYUSERID");
            entity.Property(e => e.Rejectedreason)
                .IsUnicode(false)
                .HasColumnName("REJECTEDREASON");
            entity.Property(e => e.Reviewerinchrid).HasColumnName("REVIEWERINCHRID");
            entity.Property(e => e.Revieweruserid).HasColumnName("REVIEWERUSERID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Incident).WithMany(p => p.IncRejectXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_REJECT_X_INCIDENTID");

            entity.HasOne(d => d.Rejectedbyinchr).WithMany(p => p.IncRejectXRejectedbyinchrs)
                .HasForeignKey(d => d.Rejectedbyinchrid)
                .HasConstraintName("FK_INC_REJECT_X_REJECTEDBYINCHRID");

            entity.HasOne(d => d.Rejectedbyuser).WithMany(p => p.IncRejectXRejectedbyusers)
                .HasForeignKey(d => d.Rejectedbyuserid)
                .HasConstraintName("FK_INC_REJECT_X_REJECTEDBYUSERID");

            entity.HasOne(d => d.Reviewerinchr).WithMany(p => p.IncRejectXReviewerinchrs)
                .HasForeignKey(d => d.Reviewerinchrid)
                .HasConstraintName("FK_INC_REJECT_X_REVIEWERINCHRID");

            entity.HasOne(d => d.Revieweruser).WithMany(p => p.IncRejectXReviewerusers)
                .HasForeignKey(d => d.Revieweruserid)
                .HasConstraintName("FK_INC_REJECT_X_REVIEWERUSERID");
        });

        modelBuilder.Entity<IncReviewX>(entity =>
        {
            entity.HasKey(e => e.Incidentid).HasName("PK_INC_REVIEW_X_INCIDENTID");

            entity.ToTable("INC_REVIEW_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_REVIEW_X");
                    tb.HasTrigger("audins_INC_REVIEW_X");
                    tb.HasTrigger("audupd_INC_REVIEW_X");
                });

            entity.Property(e => e.Incidentid)
                .ValueGeneratedNever()
                .HasColumnName("INCIDENTID");
            entity.Property(e => e.Closeddate)
                .HasColumnType("datetime")
                .HasColumnName("CLOSEDDATE");
            entity.Property(e => e.Closurecomments)
                .IsUnicode(false)
                .HasColumnName("CLOSURECOMMENTS");
            entity.Property(e => e.Comments)
                .IsUnicode(false)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Confirmcostcentre).HasColumnName("CONFIRMCOSTCENTRE");
            entity.Property(e => e.Confirminjurycoding).HasColumnName("CONFIRMINJURYCODING");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reviewedbyid).HasColumnName("REVIEWEDBYID");
            entity.Property(e => e.Reviewedbyuserid).HasColumnName("REVIEWEDBYUSERID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithOne(p => p.IncReviewX)
                .HasForeignKey<IncReviewX>(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_REVIEW_X_INCIDENTID");

            entity.HasOne(d => d.Reviewedby).WithMany(p => p.IncReviewXes)
                .HasForeignKey(d => d.Reviewedbyid)
                .HasConstraintName("FK_INC_REVIEW_X_REVIEWEDBYINCHRID");

            entity.HasOne(d => d.Reviewedbyuser).WithMany(p => p.IncReviewXes)
                .HasForeignKey(d => d.Reviewedbyuserid)
                .HasConstraintName("FK_INC_REVIEW_X_REVIEWEDBYUSERID");
        });

        modelBuilder.Entity<IncReviewsummaryX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Reviewno }).HasName("PK_INC_REVIEWSUMMARY_X_INCIDENTID");

            entity.ToTable("INC_REVIEWSUMMARY_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_REVIEWSUMMARY_X");
                    tb.HasTrigger("audins_INC_REVIEWSUMMARY_X");
                    tb.HasTrigger("audupd_INC_REVIEWSUMMARY_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Reviewno).HasColumnName("REVIEWNO");
            entity.Property(e => e.Comments)
                .IsUnicode(false)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reviewdatetime)
                .HasColumnType("datetime")
                .HasColumnName("REVIEWDATETIME");
            entity.Property(e => e.Reviewedbyid).HasColumnName("REVIEWEDBYID");
            entity.Property(e => e.Reviewedbyuserid).HasColumnName("REVIEWEDBYUSERID");
            entity.Property(e => e.Reviewername)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REVIEWERNAME");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.IncReviewsummaryXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_INC_REVIEWSUMMARY_X_DOCUMENTID");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncReviewsummaryXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_REVIEWSUMMARY_X_INC_REVIEWSUMMARY_X");

            entity.HasOne(d => d.Reviewedby).WithMany(p => p.IncReviewsummaryXes)
                .HasForeignKey(d => d.Reviewedbyid)
                .HasConstraintName("FK_INC_REVIEWSUMMARY_X_REVIEWEDBYINCHRID");

            entity.HasOne(d => d.Reviewedbyuser).WithMany(p => p.IncReviewsummaryXes)
                .HasForeignKey(d => d.Reviewedbyuserid)
                .HasConstraintName("FK_INC_REVIEWSUMMARY_X_REVIEWEDBYUSERID");
        });

        modelBuilder.Entity<IncRiskratingX>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("INC_RISKRATING_X");

            entity.Property(e => e.Likelihood)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIKELIHOOD");
            entity.Property(e => e.Rating)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RATING");
            entity.Property(e => e.Severity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEVERITY");
        });

        modelBuilder.Entity<IncSapolX>(entity =>
        {
            entity.HasKey(e => e.Incidentid).HasName("PK_INC_SAPOL_X_INCIDENTID");

            entity.ToTable("INC_SAPOL_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_SAPOL_X");
                    tb.HasTrigger("audins_INC_SAPOL_X");
                    tb.HasTrigger("audupd_INC_SAPOL_X");
                });

            entity.Property(e => e.Incidentid)
                .ValueGeneratedNever()
                .HasColumnName("INCIDENTID");
            entity.Property(e => e.Activity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ACTIVITY");
            entity.Property(e => e.Activityother)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACTIVITYOTHER");
            entity.Property(e => e.Breach)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BREACH");
            entity.Property(e => e.Classification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Clothingidtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLOTHINGIDTYPE");
            entity.Property(e => e.Clothingworn).HasColumnName("CLOTHINGWORN");
            entity.Property(e => e.Contributingfactor).HasColumnName("CONTRIBUTINGFACTOR");
            entity.Property(e => e.Contributingfactortype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTRIBUTINGFACTORTYPE");
            entity.Property(e => e.Duties)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DUTIES");
            entity.Property(e => e.Duty).HasColumnName("DUTY");
            entity.Property(e => e.Employeetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEETYPE");
            entity.Property(e => e.Exposuredisease).HasColumnName("EXPOSUREDISEASE");
            entity.Property(e => e.Exposuredob)
                .HasColumnType("datetime")
                .HasColumnName("EXPOSUREDOB");
            entity.Property(e => e.Exposurefluid).HasColumnName("EXPOSUREFLUID");
            entity.Property(e => e.Exposuresource)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXPOSURESOURCE");
            entity.Property(e => e.Exposuresubstance).HasColumnName("EXPOSURESUBSTANCE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Highrisk).HasColumnName("HIGHRISK");
            entity.Property(e => e.Inclocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("INCLOCATION");
            entity.Property(e => e.Inclocationtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INCLOCATIONTYPE");
            entity.Property(e => e.Involvealcohol).HasColumnName("INVOLVEALCOHOL");
            entity.Property(e => e.Involveanimal).HasColumnName("INVOLVEANIMAL");
            entity.Property(e => e.Involvedrugs).HasColumnName("INVOLVEDRUGS");
            entity.Property(e => e.Involvemental).HasColumnName("INVOLVEMENTAL");
            entity.Property(e => e.Involveneedle).HasColumnName("INVOLVENEEDLE");
            entity.Property(e => e.Involveoffender).HasColumnName("INVOLVEOFFENDER");
            entity.Property(e => e.Majorevent).HasColumnName("MAJOREVENT");
            entity.Property(e => e.Majoreventdetails)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MAJOREVENTDETAILS");
            entity.Property(e => e.Numofficerspresent).HasColumnName("NUMOFFICERSPRESENT");
            entity.Property(e => e.Polequipcaused).HasColumnName("POLEQUIPCAUSED");
            entity.Property(e => e.Polequipissue).HasColumnName("POLEQUIPISSUE");
            entity.Property(e => e.Polequipused).HasColumnName("POLEQUIPUSED");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Resultoffatigue).HasColumnName("RESULTOFFATIGUE");
            entity.Property(e => e.Resultofmva).HasColumnName("RESULTOFMVA");
            entity.Property(e => e.Resultofmvatype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RESULTOFMVATYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithOne(p => p.IncSapolX)
                .HasForeignKey<IncSapolX>(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_SAPOL_X_INCIDENTID");
        });

        modelBuilder.Entity<IncSapolequipcausedX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Equipmentno }).HasName("PK_INC_SAPOLEQUIPCAUSED_X_INCIDENTID");

            entity.ToTable("INC_SAPOLEQUIPCAUSED_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_SAPOLEQUIPCAUSED_X");
                    tb.HasTrigger("audins_INC_SAPOLEQUIPCAUSED_X");
                    tb.HasTrigger("audupd_INC_SAPOLEQUIPCAUSED_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Equipmentno).HasColumnName("EQUIPMENTNO");
            entity.Property(e => e.Equipment)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EQUIPMENT");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncSapolequipcausedXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_SAPOLEQUIPCAUSED_X_INCIDENTID");
        });

        modelBuilder.Entity<IncSapolequipusedX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Equipmentno }).HasName("PK_INC_SAPOLEQUIPUSED_X_INCIDENTID");

            entity.ToTable("INC_SAPOLEQUIPUSED_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_SAPOLEQUIPUSED_X");
                    tb.HasTrigger("audins_INC_SAPOLEQUIPUSED_X");
                    tb.HasTrigger("audupd_INC_SAPOLEQUIPUSED_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Equipmentno).HasColumnName("EQUIPMENTNO");
            entity.Property(e => e.Equipment)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EQUIPMENT");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncSapolequipusedXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_SAPOLEQUIPUSED_X_INCIDENTID");
        });

        modelBuilder.Entity<IncSecurityX>(entity =>
        {
            entity.HasKey(e => new { e.Teamid, e.Incidentid });

            entity.ToTable("INC_SECURITY_X", "secure");

            entity.Property(e => e.Teamid).HasColumnName("TEAMID");
            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Versionnumber).HasColumnName("VERSIONNUMBER");
        });

        modelBuilder.Entity<IncSecuritycontroltypeX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Controlno });

            entity.ToTable("INC_SECURITYCONTROLTYPE_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_SECURITYCONTROLTYPE");
                    tb.HasTrigger("audins_INC_SECURITYCONTROLTYPE");
                    tb.HasTrigger("audupd_INC_SECURITYCONTROLTYPE");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Controlno).HasColumnName("CONTROLNO");
            entity.Property(e => e.Controltype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTROLTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncSecuritycontroltypeXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_SECURITYCONTROLTYPE_X_INCIDENTID_CONTROLNO");
        });

        modelBuilder.Entity<IncStatusX>(entity =>
        {
            entity.HasKey(e => e.Incidentid).HasName("PK_INC_STATUS_X_INCIDENTID");

            entity.ToTable("INC_STATUS_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_STATUS_X");
                    tb.HasTrigger("audins_INC_STATUS_X");
                    tb.HasTrigger("audupd_INC_STATUS_X");
                });

            entity.Property(e => e.Incidentid)
                .ValueGeneratedNever()
                .HasColumnName("INCIDENTID");
            entity.Property(e => e.Changedbyinchrid).HasColumnName("CHANGEDBYINCHRID");
            entity.Property(e => e.Changedbyuserid).HasColumnName("CHANGEDBYUSERID");
            entity.Property(e => e.Datestatuschanged)
                .HasColumnType("datetime")
                .HasColumnName("DATESTATUSCHANGED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Changedbyinchr).WithMany(p => p.IncStatusXes)
                .HasForeignKey(d => d.Changedbyinchrid)
                .HasConstraintName("FK_INC_STATUS_X_CHANGEDBYINCHRID");

            entity.HasOne(d => d.Changedbyuser).WithMany(p => p.IncStatusXes)
                .HasForeignKey(d => d.Changedbyuserid)
                .HasConstraintName("FK_INC_STATUS_X_CHANGEDBYUSERID");

            entity.HasOne(d => d.Incident).WithOne(p => p.IncStatusX)
                .HasForeignKey<IncStatusX>(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_STATUS_X_INCIDENTID");
        });

        modelBuilder.Entity<IncStatushistoryX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Statusno }).HasName("PK_INC_STATUSHISTORY_X_INCIDENTID");

            entity.ToTable("INC_STATUSHISTORY_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_STATUSHISTORY_X");
                    tb.HasTrigger("audins_INC_STATUSHISTORY_X");
                    tb.HasTrigger("audupd_INC_STATUSHISTORY_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Statusno).HasColumnName("STATUSNO");
            entity.Property(e => e.Changedbyinchrid).HasColumnName("CHANGEDBYINCHRID");
            entity.Property(e => e.Changedbyuserid).HasColumnName("CHANGEDBYUSERID");
            entity.Property(e => e.Datestatuschanged)
                .HasColumnType("datetime")
                .HasColumnName("DATESTATUSCHANGED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Changedbyinchr).WithMany(p => p.IncStatushistoryXes)
                .HasForeignKey(d => d.Changedbyinchrid)
                .HasConstraintName("FK_INC_STATUSHISTORY_X_CHANGEDBYINCHRID");

            entity.HasOne(d => d.Changedbyuser).WithMany(p => p.IncStatushistoryXes)
                .HasForeignKey(d => d.Changedbyuserid)
                .HasConstraintName("FK_INC_STATUSHISTORY_X_CHANGEDBYUSERID");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncStatushistoryXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_STATUSHISTORY_X_INCIDENTID");
        });

        modelBuilder.Entity<IncWitnessX>(entity =>
        {
            entity.HasKey(e => new { e.Incidentid, e.Witnessno }).HasName("PK_INC_INVESTIGATIONWITNESS_X_INCIDENTID");

            entity.ToTable("INC_WITNESS_X", tb =>
                {
                    tb.HasTrigger("auddel_INC_INVESTIGATIONWITNES");
                    tb.HasTrigger("auddel_INC_WITNESS_X");
                    tb.HasTrigger("audins_INC_INVESTIGATIONWITNES");
                    tb.HasTrigger("audins_INC_WITNESS_X");
                    tb.HasTrigger("audupd_INC_INVESTIGATIONWITNES");
                    tb.HasTrigger("audupd_INC_WITNESS_X");
                });

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Witnessno).HasColumnName("WITNESSNO");
            entity.Property(e => e.Company)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Employeenumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEENUMBER");
            entity.Property(e => e.Familyname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAMILYNAME");
            entity.Property(e => e.Givennames)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GIVENNAMES");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Inchrid).HasColumnName("INCHRID");
            entity.Property(e => e.Nonemployeetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NONEMPLOYEETYPE");
            entity.Property(e => e.Occupation)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Otherdetails)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OTHERDETAILS");
            entity.Property(e => e.Persontype).HasColumnName("PERSONTYPE");
            entity.Property(e => e.Phone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Witnessdescription)
                .IsUnicode(false)
                .HasColumnName("WITNESSDESCRIPTION");

            entity.HasOne(d => d.Inchr).WithMany(p => p.IncWitnessXes)
                .HasForeignKey(d => d.Inchrid)
                .HasConstraintName("FK_INC_INVESTIGATIONWITNESS_X_INCHRID");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncWitnessXes)
                .HasForeignKey(d => d.Incidentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INC_INVESTIGATIONWITNESS_X_INCIDENTID");
        });

        modelBuilder.Entity<IncdocFilequeueX>(entity =>
        {
            entity.HasKey(e => e.Incdocid).HasName("PK_INCDOC_FILEQUEUE_FILEQUEUEID");

            entity.ToTable("INCDOC_FILEQUEUE_X", tb =>
                {
                    tb.HasTrigger("auddel_INCDOC_FILEQUEUE_X");
                    tb.HasTrigger("audins_INCDOC_FILEQUEUE_X");
                    tb.HasTrigger("audupd_INCDOC_FILEQUEUE_X");
                });

            entity.Property(e => e.Incdocid).HasColumnName("INCDOCID");
            entity.Property(e => e.Datereceived)
                .HasColumnType("datetime")
                .HasColumnName("DATERECEIVED");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Filename)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("FILENAME");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Reason)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REASON");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reject).HasColumnName("REJECT");
            entity.Property(e => e.Removed).HasColumnName("REMOVED");
            entity.Property(e => e.Sender)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SENDER");
            entity.Property(e => e.Subject)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Document).WithMany(p => p.IncdocFilequeueXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_INCDOC_FILEQUEUE_DOCUMENTID");
        });

        modelBuilder.Entity<IncnotiCorrectiveactiontypeX>(entity =>
        {
            entity.HasKey(e => new { e.Incnotiid, e.Correctiveactiontypeno });

            entity.ToTable("INCNOTI_CORRECTIVEACTIONTYPE_X", tb =>
                {
                    tb.HasTrigger("auddel_INCNOTI_CORRECTIVEACTIO");
                    tb.HasTrigger("audins_INCNOTI_CORRECTIVEACTIO");
                    tb.HasTrigger("audupd_INCNOTI_CORRECTIVEACTIO");
                });

            entity.Property(e => e.Incnotiid).HasColumnName("INCNOTIID");
            entity.Property(e => e.Correctiveactiontypeno).HasColumnName("CORRECTIVEACTIONTYPENO");
            entity.Property(e => e.Correctiveactiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORRECTIVEACTIONTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incnoti).WithMany(p => p.IncnotiCorrectiveactiontypeXes)
                .HasForeignKey(d => d.Incnotiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INCNOTI_CORRECTIVEACTIONTYPE_X_INCNOTIID");
        });

        modelBuilder.Entity<IncnotiIncidentfactorsX>(entity =>
        {
            entity.HasKey(e => new { e.Incnotiid, e.Incidentfactorsno });

            entity.ToTable("INCNOTI_INCIDENTFACTORS_X", tb =>
                {
                    tb.HasTrigger("auddel_INCNOTI_INCIDENTFACTORS");
                    tb.HasTrigger("audins_INCNOTI_INCIDENTFACTORS");
                    tb.HasTrigger("audupd_INCNOTI_INCIDENTFACTORS");
                });

            entity.Property(e => e.Incnotiid).HasColumnName("INCNOTIID");
            entity.Property(e => e.Incidentfactorsno).HasColumnName("INCIDENTFACTORSNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Incidentfactors)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INCIDENTFACTORS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incnoti).WithMany(p => p.IncnotiIncidentfactorsXes)
                .HasForeignKey(d => d.Incnotiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INCNOTI_INCIDENTFACTORS_X_INCNOTIID");
        });

        modelBuilder.Entity<IncnotiIncidentnotificationX>(entity =>
        {
            entity.HasKey(e => e.Incnotiid).HasName("PK_INCNOTI_INCIDENTNOTIFICATION_X_INCNOTIID");

            entity.ToTable("INCNOTI_INCIDENTNOTIFICATION_X", tb =>
                {
                    tb.HasTrigger("auddel_INCNOTI_INCIDENTNOTIFIC");
                    tb.HasTrigger("audins_INCNOTI_INCIDENTNOTIFIC");
                    tb.HasTrigger("audupd_INCNOTI_INCIDENTNOTIFIC");
                });

            entity.Property(e => e.Incnotiid).HasColumnName("INCNOTIID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Body)
                .IsUnicode(false)
                .HasColumnName("BODY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Incidentinvolvesinjury).HasColumnName("INCIDENTINVOLVESINJURY");
            entity.Property(e => e.Includeincidentreport).HasColumnName("INCLUDEINCIDENTREPORT");
            entity.Property(e => e.Numberofdays).HasColumnName("NUMBEROFDAYS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Sendnotification).HasColumnName("SENDNOTIFICATION");
            entity.Property(e => e.Shorttitle)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SHORTTITLE");
            entity.Property(e => e.Subject)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Triggeringevent)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRIGGERINGEVENT");
        });

        modelBuilder.Entity<IncnotiIncidentstatusX>(entity =>
        {
            entity.HasKey(e => new { e.Incnotiid, e.Incidentstatusno });

            entity.ToTable("INCNOTI_INCIDENTSTATUS_X", tb =>
                {
                    tb.HasTrigger("auddel_INCNOTI_INCIDENTSTATUS_");
                    tb.HasTrigger("audins_INCNOTI_INCIDENTSTATUS_");
                    tb.HasTrigger("audupd_INCNOTI_INCIDENTSTATUS_");
                });

            entity.Property(e => e.Incnotiid).HasColumnName("INCNOTIID");
            entity.Property(e => e.Incidentstatusno).HasColumnName("INCIDENTSTATUSNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Incidentstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INCIDENTSTATUS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incnoti).WithMany(p => p.IncnotiIncidentstatusXes)
                .HasForeignKey(d => d.Incnotiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INCNOTI_INCIDENTSTATUS_X_INCNOTIID");
        });

        modelBuilder.Entity<IncnotiIncidentsubtypeX>(entity =>
        {
            entity.HasKey(e => new { e.Incnotiid, e.Incidentsubtypeno });

            entity.ToTable("INCNOTI_INCIDENTSUBTYPE_X", tb =>
                {
                    tb.HasTrigger("auddel_INCNOTI_INCIDENTSUBTYPE");
                    tb.HasTrigger("audins_INCNOTI_INCIDENTSUBTYPE");
                    tb.HasTrigger("audupd_INCNOTI_INCIDENTSUBTYPE");
                });

            entity.Property(e => e.Incnotiid).HasColumnName("INCNOTIID");
            entity.Property(e => e.Incidentsubtypeno).HasColumnName("INCIDENTSUBTYPENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Incidenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INCIDENTTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incnoti).WithMany(p => p.IncnotiIncidentsubtypeXes)
                .HasForeignKey(d => d.Incnotiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INCNOTI_INCIDENTSUBTYPE_X_INCNOTIID");
        });

        modelBuilder.Entity<IncnotiIncidenttypeX>(entity =>
        {
            entity.HasKey(e => new { e.Incnotiid, e.Incidenttypeno });

            entity.ToTable("INCNOTI_INCIDENTTYPE_X", tb =>
                {
                    tb.HasTrigger("auddel_INCNOTI_INCIDENTTYPE_X");
                    tb.HasTrigger("audins_INCNOTI_INCIDENTTYPE_X");
                    tb.HasTrigger("audupd_INCNOTI_INCIDENTTYPE_X");
                });

            entity.Property(e => e.Incnotiid).HasColumnName("INCNOTIID");
            entity.Property(e => e.Incidenttypeno).HasColumnName("INCIDENTTYPENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Incidenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INCIDENTTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incnoti).WithMany(p => p.IncnotiIncidenttypeXes)
                .HasForeignKey(d => d.Incnotiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INCNOTI_INCIDENTTYPE_X_INCNOTIID");
        });

        modelBuilder.Entity<IncnotiInjurytypeX>(entity =>
        {
            entity.HasKey(e => new { e.Incnotiid, e.Injurytypeno });

            entity.ToTable("INCNOTI_INJURYTYPE_X", tb =>
                {
                    tb.HasTrigger("auddel_INCNOTI_INJURYTYPE_X");
                    tb.HasTrigger("audins_INCNOTI_INJURYTYPE_X");
                    tb.HasTrigger("audupd_INCNOTI_INJURYTYPE_X");
                });

            entity.Property(e => e.Incnotiid).HasColumnName("INCNOTIID");
            entity.Property(e => e.Injurytypeno).HasColumnName("INJURYTYPENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Injurytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incnoti).WithMany(p => p.IncnotiInjurytypeXes)
                .HasForeignKey(d => d.Incnotiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INCNOTI_INJURYTYPE_X_INCNOTIID");
        });

        modelBuilder.Entity<IncnotiNotificationemailX>(entity =>
        {
            entity.HasKey(e => new { e.Incnotiid, e.Emailno }).HasName("PK_INCNOTI_NOTIFICATIONEMAIL_X_INCNOTIID_EMAILNO");

            entity.ToTable("INCNOTI_NOTIFICATIONEMAIL_X", tb =>
                {
                    tb.HasTrigger("auddel_INCNOTI_NOTIFICATIONEMA");
                    tb.HasTrigger("audins_INCNOTI_NOTIFICATIONEMA");
                    tb.HasTrigger("audupd_INCNOTI_NOTIFICATIONEMA");
                });

            entity.Property(e => e.Incnotiid).HasColumnName("INCNOTIID");
            entity.Property(e => e.Emailno).HasColumnName("EMAILNO");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incnoti).WithMany(p => p.IncnotiNotificationemailXes)
                .HasForeignKey(d => d.Incnotiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INCNOTI_NOTIFICATIONEMAIL_X");
        });

        modelBuilder.Entity<IncnotiNotificationroleX>(entity =>
        {
            entity.HasKey(e => new { e.Incnotiid, e.Roleno }).HasName("PK_INCNOTI_NOTIFICATIONROLE_X_INCNOTIID_ROLENO");

            entity.ToTable("INCNOTI_NOTIFICATIONROLE_X", tb =>
                {
                    tb.HasTrigger("auddel_INCNOTI_NOTIFICATIONROL");
                    tb.HasTrigger("audins_INCNOTI_NOTIFICATIONROL");
                    tb.HasTrigger("audupd_INCNOTI_NOTIFICATIONROL");
                });

            entity.Property(e => e.Incnotiid).HasColumnName("INCNOTIID");
            entity.Property(e => e.Roleno).HasColumnName("ROLENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Role)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incnoti).WithMany(p => p.IncnotiNotificationroleXes)
                .HasForeignKey(d => d.Incnotiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INCNOTI_NOTIFICATIONROLE_X_INCNOTIID");
        });

        modelBuilder.Entity<IncnotiOrganisationalstructureX>(entity =>
        {
            entity.HasKey(e => new { e.Incnotiid, e.Organisationalstructureno });

            entity.ToTable("INCNOTI_ORGANISATIONALSTRUCTURE_X", tb =>
                {
                    tb.HasTrigger("auddel_INCNOTI_ORGANISATIONALS");
                    tb.HasTrigger("audins_INCNOTI_ORGANISATIONALS");
                    tb.HasTrigger("audupd_INCNOTI_ORGANISATIONALS");
                });

            entity.Property(e => e.Incnotiid).HasColumnName("INCNOTIID");
            entity.Property(e => e.Organisationalstructureno).HasColumnName("ORGANISATIONALSTRUCTURENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incnoti).WithMany(p => p.IncnotiOrganisationalstructureXes)
                .HasForeignKey(d => d.Incnotiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INCNOTI_ORGANISATIONALSTRUCTURE_X_INCNOTIID");

            entity.HasOne(d => d.Orgstruct).WithMany(p => p.IncnotiOrganisationalstructureXes)
                .HasForeignKey(d => d.Orgstructid)
                .HasConstraintName("FK_INCNOTI_ORGANISATIONALSTRUCTURE_X_ORGSTRUCTID");
        });

        modelBuilder.Entity<IncnotiRiskratingX>(entity =>
        {
            entity.HasKey(e => new { e.Incnotiid, e.Riskratingno });

            entity.ToTable("INCNOTI_RISKRATING_X", tb =>
                {
                    tb.HasTrigger("auddel_INCNOTI_RISKRATING_X");
                    tb.HasTrigger("audins_INCNOTI_RISKRATING_X");
                    tb.HasTrigger("audupd_INCNOTI_RISKRATING_X");
                });

            entity.Property(e => e.Incnotiid).HasColumnName("INCNOTIID");
            entity.Property(e => e.Riskratingno).HasColumnName("RISKRATINGNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Riskrating)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RISKRATING");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Incnoti).WithMany(p => p.IncnotiRiskratingXes)
                .HasForeignKey(d => d.Incnotiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INCNOTI_RISKRATING_X_INCNOTIID");
        });

        modelBuilder.Entity<InsBatch>(entity =>
        {
            entity.HasKey(e => e.Insbatchid).HasName("PK_INS_BATCH_INSBATCHID");

            entity.ToTable("INS_BATCH", tb =>
                {
                    tb.HasTrigger("auddel_INS_BATCH");
                    tb.HasTrigger("audins_INS_BATCH");
                    tb.HasTrigger("audupd_INS_BATCH");
                });

            entity.Property(e => e.Insbatchid).HasColumnName("INSBATCHID");
            entity.Property(e => e.Dateoffile)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFFILE");
            entity.Property(e => e.Dateofload)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFLOAD");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Initialload).HasColumnName("INITIALLOAD");
            entity.Property(e => e.Insurerid).HasColumnName("INSURERID");
            entity.Property(e => e.Insurerloadid).HasColumnName("INSURERLOADID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Stagingloadid).HasColumnName("STAGINGLOADID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Unlinkedload).HasColumnName("UNLINKEDLOAD");
            entity.Property(e => e.Unlinkedloadforinsurerloadid).HasColumnName("UNLINKEDLOADFORINSURERLOADID");

            entity.HasOne(d => d.Insurer).WithMany(p => p.InsBatches)
                .HasForeignKey(d => d.Insurerid)
                .HasConstraintName("FK_INS_INSURER_INSURERID");

            entity.HasOne(d => d.Insurerload).WithMany(p => p.InsBatches)
                .HasForeignKey(d => d.Insurerloadid)
                .HasConstraintName("FK_INS_INSURER_INSURERLOADID");

            entity.HasOne(d => d.Stagingload).WithMany(p => p.InsBatches)
                .HasForeignKey(d => d.Stagingloadid)
                .HasConstraintName("FK_INS_INSURER_STAGINGLOADID");
        });

        modelBuilder.Entity<InsBatcherror>(entity =>
        {
            entity.HasKey(e => new { e.Insbatchid, e.Batcherrorno }).HasName("PK_INS_BATCHERROR_INSBATCHID");

            entity.ToTable("INS_BATCHERROR", tb =>
                {
                    tb.HasTrigger("auddel_INS_BATCHERROR");
                    tb.HasTrigger("audins_INS_BATCHERROR");
                    tb.HasTrigger("audupd_INS_BATCHERROR");
                });

            entity.Property(e => e.Insbatchid).HasColumnName("INSBATCHID");
            entity.Property(e => e.Batcherrorno).HasColumnName("BATCHERRORNO");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Fileidentifier)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FILEIDENTIFIER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Keyvalue)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("KEYVALUE");
            entity.Property(e => e.Keyvalue2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("KEYVALUE2");
            entity.Property(e => e.Keyvalue3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("KEYVALUE3");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.Severity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEVERITY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<InsClaim>(entity =>
        {
            entity.HasKey(e => new { e.Insurerloadid, e.Claimno });

            entity.ToTable("INS_CLAIM", tb =>
                {
                    tb.HasTrigger("auddel_INS_CLAIM");
                    tb.HasTrigger("audins_INS_CLAIM");
                    tb.HasTrigger("audupd_INS_CLAIM");
                });

            entity.Property(e => e.Insurerloadid).HasColumnName("INSURERLOADID");
            entity.Property(e => e.Claimno).HasColumnName("CLAIMNO");
            entity.Property(e => e.Accidentaddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACCIDENTADDRESS");
            entity.Property(e => e.Accidentlocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ACCIDENTLOCATION");
            entity.Property(e => e.Accidentlocationcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ACCIDENTLOCATIONCODETYPE");
            entity.Property(e => e.Accidentpostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ACCIDENTPOSTCODE");
            entity.Property(e => e.Accidentstate)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ACCIDENTSTATE");
            entity.Property(e => e.Accidentsuburb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ACCIDENTSUBURB");
            entity.Property(e => e.Averageweeklyearnings)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("AVERAGEWEEKLYEARNINGS");
            entity.Property(e => e.Bodylocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODYLOCATION");
            entity.Property(e => e.Bodylocationcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODYLOCATIONCODETYPE");
            entity.Property(e => e.Breakdowninjuryagency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BREAKDOWNINJURYAGENCY");
            entity.Property(e => e.Breakdowninjuryagencycodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BREAKDOWNINJURYAGENCYCODETYPE");
            entity.Property(e => e.Claimclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMCLASSIFICATION");
            entity.Property(e => e.Claimclassificationcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMCLASSIFICATIONCODETYPE");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Claimstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMSTATUS");
            entity.Property(e => e.Claimstatuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMSTATUSCODETYPE");
            entity.Property(e => e.Claimtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMTYPE");
            entity.Property(e => e.Claimtypecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMTYPECODETYPE");
            entity.Property(e => e.Dateofbirth)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFBIRTH");
            entity.Property(e => e.Dateofrecurrence)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFRECURRENCE");
            entity.Property(e => e.Datereceivedemployer)
                .HasColumnType("datetime")
                .HasColumnName("DATERECEIVEDEMPLOYER");
            entity.Property(e => e.Datereceivedinsurer)
                .HasColumnType("datetime")
                .HasColumnName("DATERECEIVEDINSURER");
            entity.Property(e => e.Dateregistered)
                .HasColumnType("datetime")
                .HasColumnName("DATEREGISTERED");
            entity.Property(e => e.Descriptionofincident)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTIONOFINCIDENT");
            entity.Property(e => e.Descriptionofinjuryillness)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTIONOFINJURYILLNESS");
            entity.Property(e => e.Dutystatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DUTYSTATUS");
            entity.Property(e => e.Dutystatuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DUTYSTATUSCODETYPE");
            entity.Property(e => e.Employeegivennames)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEEGIVENNAMES");
            entity.Property(e => e.Employeenumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEENUMBER");
            entity.Property(e => e.Employeesurname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEESURNAME");
            entity.Property(e => e.Employername)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("EMPLOYERNAME");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Industry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INDUSTRY");
            entity.Property(e => e.Industrycodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INDUSTRYCODETYPE");
            entity.Property(e => e.Injuryagency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYAGENCY");
            entity.Property(e => e.Injuryagencycodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYAGENCYCODETYPE");
            entity.Property(e => e.Injurydate)
                .HasColumnType("datetime")
                .HasColumnName("INJURYDATE");
            entity.Property(e => e.Injurymechanism)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYMECHANISM");
            entity.Property(e => e.Injurymechanismcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYMECHANISMCODETYPE");
            entity.Property(e => e.Injurynature)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYNATURE");
            entity.Property(e => e.Injurynaturecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYNATURECODETYPE");
            entity.Property(e => e.Injurytime)
                .HasColumnType("datetime")
                .HasColumnName("INJURYTIME");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Liabilitystatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITYSTATUS");
            entity.Property(e => e.Liabilitystatuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITYSTATUSCODETYPE");
            entity.Property(e => e.Liabilitystatusdate)
                .HasColumnType("datetime")
                .HasColumnName("LIABILITYSTATUSDATE");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Occupation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Occupationcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OCCUPATIONCODETYPE");
            entity.Property(e => e.Previousclaimno)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PREVIOUSCLAIMNO");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Resultcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RESULTCODE");
            entity.Property(e => e.Resultcodecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RESULTCODECODETYPE");
            entity.Property(e => e.Sharedclaim).HasColumnName("SHAREDCLAIM");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Weekscount).HasColumnName("WEEKSCOUNT");
            entity.Property(e => e.Workcoverclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("WORKCOVERCLAIMNUMBER");

            entity.HasOne(d => d.Insurerload).WithMany(p => p.InsClaims)
                .HasForeignKey(d => d.Insurerloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_CLAIM_INSURERLOADID");
        });

        modelBuilder.Entity<InsClaimstaging>(entity =>
        {
            entity.HasKey(e => new { e.Stagingloadid, e.Claimstagingno });

            entity.ToTable("INS_CLAIMSTAGING", tb =>
                {
                    tb.HasTrigger("auddel_INS_CLAIMSTAGING");
                    tb.HasTrigger("audins_INS_CLAIMSTAGING");
                    tb.HasTrigger("audupd_INS_CLAIMSTAGING");
                });

            entity.Property(e => e.Stagingloadid).HasColumnName("STAGINGLOADID");
            entity.Property(e => e.Claimstagingno).HasColumnName("CLAIMSTAGINGNO");
            entity.Property(e => e.Accidentaddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACCIDENTADDRESS");
            entity.Property(e => e.Accidentlocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ACCIDENTLOCATION");
            entity.Property(e => e.Accidentlocationcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ACCIDENTLOCATIONCODETYPE");
            entity.Property(e => e.Accidentpostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ACCIDENTPOSTCODE");
            entity.Property(e => e.Accidentstate)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ACCIDENTSTATE");
            entity.Property(e => e.Accidentsuburb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ACCIDENTSUBURB");
            entity.Property(e => e.Averageweeklyearnings)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("AVERAGEWEEKLYEARNINGS");
            entity.Property(e => e.Bodylocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODYLOCATION");
            entity.Property(e => e.Bodylocationcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BODYLOCATIONCODETYPE");
            entity.Property(e => e.Breakdowninjuryagency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BREAKDOWNINJURYAGENCY");
            entity.Property(e => e.Breakdowninjuryagencycodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BREAKDOWNINJURYAGENCYCODETYPE");
            entity.Property(e => e.Claimclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMCLASSIFICATION");
            entity.Property(e => e.Claimclassificationcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMCLASSIFICATIONCODETYPE");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Claimstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMSTATUS");
            entity.Property(e => e.Claimstatuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMSTATUSCODETYPE");
            entity.Property(e => e.Claimtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMTYPE");
            entity.Property(e => e.Claimtypecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMTYPECODETYPE");
            entity.Property(e => e.Dateofbirth)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFBIRTH");
            entity.Property(e => e.Dateofrecurrence)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFRECURRENCE");
            entity.Property(e => e.Datereceivedemployer)
                .HasColumnType("datetime")
                .HasColumnName("DATERECEIVEDEMPLOYER");
            entity.Property(e => e.Datereceivedinsurer)
                .HasColumnType("datetime")
                .HasColumnName("DATERECEIVEDINSURER");
            entity.Property(e => e.Dateregistered)
                .HasColumnType("datetime")
                .HasColumnName("DATEREGISTERED");
            entity.Property(e => e.Descriptionofincident)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTIONOFINCIDENT");
            entity.Property(e => e.Descriptionofinjuryillness)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTIONOFINJURYILLNESS");
            entity.Property(e => e.Dutystatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DUTYSTATUS");
            entity.Property(e => e.Dutystatuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DUTYSTATUSCODETYPE");
            entity.Property(e => e.Employeegivennames)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEEGIVENNAMES");
            entity.Property(e => e.Employeenumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEENUMBER");
            entity.Property(e => e.Employeesurname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEESURNAME");
            entity.Property(e => e.Employername)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("EMPLOYERNAME");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Industry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INDUSTRY");
            entity.Property(e => e.Industrycodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INDUSTRYCODETYPE");
            entity.Property(e => e.Injuryagency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYAGENCY");
            entity.Property(e => e.Injuryagencycodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYAGENCYCODETYPE");
            entity.Property(e => e.Injurydate)
                .HasColumnType("datetime")
                .HasColumnName("INJURYDATE");
            entity.Property(e => e.Injurymechanism)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYMECHANISM");
            entity.Property(e => e.Injurymechanismcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYMECHANISMCODETYPE");
            entity.Property(e => e.Injurynature)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYNATURE");
            entity.Property(e => e.Injurynaturecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INJURYNATURECODETYPE");
            entity.Property(e => e.Injurytime)
                .HasColumnType("datetime")
                .HasColumnName("INJURYTIME");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Liabilitystatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITYSTATUS");
            entity.Property(e => e.Liabilitystatuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITYSTATUSCODETYPE");
            entity.Property(e => e.Liabilitystatusdate)
                .HasColumnType("datetime")
                .HasColumnName("LIABILITYSTATUSDATE");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Occupation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Occupationcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OCCUPATIONCODETYPE");
            entity.Property(e => e.Previousclaimno)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PREVIOUSCLAIMNO");
            entity.Property(e => e.Rawdata)
                .IsUnicode(false)
                .HasColumnName("RAWDATA");
            entity.Property(e => e.Resultcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RESULTCODE");
            entity.Property(e => e.Resultcodecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RESULTCODECODETYPE");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.Sharedclaim).HasColumnName("SHAREDCLAIM");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Weekscount).HasColumnName("WEEKSCOUNT");
            entity.Property(e => e.Workcoverclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("WORKCOVERCLAIMNUMBER");

            entity.HasOne(d => d.Stagingload).WithMany(p => p.InsClaimstagings)
                .HasForeignKey(d => d.Stagingloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_CLAIMSTAGING_STAGINGLOADID");
        });

        modelBuilder.Entity<InsEstimate>(entity =>
        {
            entity.HasKey(e => new { e.Insurerloadid, e.Insestimateno });

            entity.ToTable("INS_ESTIMATE", tb =>
                {
                    tb.HasTrigger("auddel_INS_ESTIMATE");
                    tb.HasTrigger("audins_INS_ESTIMATE");
                    tb.HasTrigger("audupd_INS_ESTIMATE");
                });

            entity.Property(e => e.Insurerloadid).HasColumnName("INSURERLOADID");
            entity.Property(e => e.Insestimateno).HasColumnName("INSESTIMATENO");
            entity.Property(e => e.Amount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("AMOUNT");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Estimatedate)
                .HasColumnType("datetime")
                .HasColumnName("ESTIMATEDATE");
            entity.Property(e => e.Estimatetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESTIMATETYPE");
            entity.Property(e => e.Estimatetypecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESTIMATETYPECODETYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Insurerload).WithMany(p => p.InsEstimates)
                .HasForeignKey(d => d.Insurerloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_ESTIMATE_INSURERLOADID");
        });

        modelBuilder.Entity<InsEstimatestaging>(entity =>
        {
            entity.HasKey(e => new { e.Stagingloadid, e.Estimatestagingno });

            entity.ToTable("INS_ESTIMATESTAGING", tb =>
                {
                    tb.HasTrigger("auddel_INS_ESTIMATESTAGING");
                    tb.HasTrigger("audins_INS_ESTIMATESTAGING");
                    tb.HasTrigger("audupd_INS_ESTIMATESTAGING");
                });

            entity.Property(e => e.Stagingloadid).HasColumnName("STAGINGLOADID");
            entity.Property(e => e.Estimatestagingno).HasColumnName("ESTIMATESTAGINGNO");
            entity.Property(e => e.Amount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("AMOUNT");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Estimatedate)
                .HasColumnType("datetime")
                .HasColumnName("ESTIMATEDATE");
            entity.Property(e => e.Estimatetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESTIMATETYPE");
            entity.Property(e => e.Estimatetypecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESTIMATETYPECODETYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Rawdata)
                .IsUnicode(false)
                .HasColumnName("RAWDATA");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Stagingload).WithMany(p => p.InsEstimatestagings)
                .HasForeignKey(d => d.Stagingloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_ESTIMATESTAGING_STAGINGLOADID");
        });

        modelBuilder.Entity<InsFilenote>(entity =>
        {
            entity.HasKey(e => new { e.Insurerloadid, e.Insfilenoteno });

            entity.ToTable("INS_FILENOTE", tb =>
                {
                    tb.HasTrigger("auddel_INS_FILENOTE");
                    tb.HasTrigger("audins_INS_FILENOTE");
                    tb.HasTrigger("audupd_INS_FILENOTE");
                });

            entity.Property(e => e.Insurerloadid).HasColumnName("INSURERLOADID");
            entity.Property(e => e.Insfilenoteno).HasColumnName("INSFILENOTENO");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("NOTE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Subject)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Insurerload).WithMany(p => p.InsFilenotes)
                .HasForeignKey(d => d.Insurerloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_FILENOTE_INSURERLOADID");
        });

        modelBuilder.Entity<InsFilenotestaging>(entity =>
        {
            entity.HasKey(e => new { e.Stagingloadid, e.Filenotestagingno });

            entity.ToTable("INS_FILENOTESTAGING", tb =>
                {
                    tb.HasTrigger("auddel_INS_FILENOTESTAGING");
                    tb.HasTrigger("audins_INS_FILENOTESTAGING");
                    tb.HasTrigger("audupd_INS_FILENOTESTAGING");
                });

            entity.Property(e => e.Stagingloadid).HasColumnName("STAGINGLOADID");
            entity.Property(e => e.Filenotestagingno).HasColumnName("FILENOTESTAGINGNO");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("NOTE");
            entity.Property(e => e.Rawdata)
                .IsUnicode(false)
                .HasColumnName("RAWDATA");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Subject)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Stagingload).WithMany(p => p.InsFilenotestagings)
                .HasForeignKey(d => d.Stagingloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_FILENOTESTAGING_STAGINGLOADID");
        });

        modelBuilder.Entity<InsInsurer>(entity =>
        {
            entity.HasKey(e => e.Insurerid);

            entity.ToTable("INS_INSURER", tb =>
                {
                    tb.HasTrigger("auddel_INS_INSURER");
                    tb.HasTrigger("audins_INS_INSURER");
                    tb.HasTrigger("audupd_INS_INSURER");
                });

            entity.Property(e => e.Insurerid)
                .ValueGeneratedOnAdd()
                .HasColumnName("INSURERID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurercode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INSURERCODE");
            entity.Property(e => e.Insurername)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("INSURERNAME");
            entity.Property(e => e.Insureruserid).HasColumnName("INSURERUSERID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Insurer).WithOne(p => p.InsInsurer)
                .HasForeignKey<InsInsurer>(d => d.Insurerid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_INSURER_USERID");
        });

        modelBuilder.Entity<InsInsurerload>(entity =>
        {
            entity.HasKey(e => e.Insurerloadid);

            entity.ToTable("INS_INSURERLOAD", tb =>
                {
                    tb.HasTrigger("auddel_INS_INSURERLOAD");
                    tb.HasTrigger("audins_INS_INSURERLOAD");
                    tb.HasTrigger("audupd_INS_INSURERLOAD");
                });

            entity.Property(e => e.Insurerloadid).HasColumnName("INSURERLOADID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<InsLiability>(entity =>
        {
            entity.HasKey(e => new { e.Insurerloadid, e.Insliabilityno });

            entity.ToTable("INS_LIABILITY", tb =>
                {
                    tb.HasTrigger("auddel_INS_LIABILITY");
                    tb.HasTrigger("audins_INS_LIABILITY");
                    tb.HasTrigger("audupd_INS_LIABILITY");
                });

            entity.Property(e => e.Insurerloadid).HasColumnName("INSURERLOADID");
            entity.Property(e => e.Insliabilityno).HasColumnName("INSLIABILITYNO");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Liabilitystatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITYSTATUS");
            entity.Property(e => e.Liabilitystatuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITYSTATUSCODETYPE");
            entity.Property(e => e.Liabilitystatusfromdate)
                .HasColumnType("datetime")
                .HasColumnName("LIABILITYSTATUSFROMDATE");
            entity.Property(e => e.Liabilitystatustodate)
                .HasColumnType("datetime")
                .HasColumnName("LIABILITYSTATUSTODATE");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Insurerload).WithMany(p => p.InsLiabilities)
                .HasForeignKey(d => d.Insurerloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_LIABILITY_INSURERLOADID");
        });

        modelBuilder.Entity<InsLiabilitystaging>(entity =>
        {
            entity.HasKey(e => new { e.Stagingloadid, e.Liabilitystagingno });

            entity.ToTable("INS_LIABILITYSTAGING", tb =>
                {
                    tb.HasTrigger("auddel_INS_LIABILITYSTAGING");
                    tb.HasTrigger("audins_INS_LIABILITYSTAGING");
                    tb.HasTrigger("audupd_INS_LIABILITYSTAGING");
                });

            entity.Property(e => e.Stagingloadid).HasColumnName("STAGINGLOADID");
            entity.Property(e => e.Liabilitystagingno).HasColumnName("LIABILITYSTAGINGNO");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Liabilitystatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITYSTATUS");
            entity.Property(e => e.Liabilitystatuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITYSTATUSCODETYPE");
            entity.Property(e => e.Liabilitystatusfromdate)
                .HasColumnType("datetime")
                .HasColumnName("LIABILITYSTATUSFROMDATE");
            entity.Property(e => e.Liabilitystatustodate)
                .HasColumnType("datetime")
                .HasColumnName("LIABILITYSTATUSTODATE");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Rawdata)
                .IsUnicode(false)
                .HasColumnName("RAWDATA");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Stagingload).WithMany(p => p.InsLiabilitystagings)
                .HasForeignKey(d => d.Stagingloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_LIABILITYSTAGING_STAGINGLOADID");
        });

        modelBuilder.Entity<InsMedcert>(entity =>
        {
            entity.HasKey(e => new { e.Insurerloadid, e.Insmedcertno });

            entity.ToTable("INS_MEDCERT", tb =>
                {
                    tb.HasTrigger("auddel_INS_MEDCERT");
                    tb.HasTrigger("audins_INS_MEDCERT");
                    tb.HasTrigger("audupd_INS_MEDCERT");
                });

            entity.Property(e => e.Insurerloadid).HasColumnName("INSURERLOADID");
            entity.Property(e => e.Insmedcertno).HasColumnName("INSMEDCERTNO");
            entity.Property(e => e.Capacitypreinjuryemployment).HasColumnName("CAPACITYPREINJURYEMPLOYMENT");
            entity.Property(e => e.Capacitypreinjuryfromdate)
                .HasColumnType("datetime")
                .HasColumnName("CAPACITYPREINJURYFROMDATE");
            entity.Property(e => e.Capacitysuitableemployment).HasColumnName("CAPACITYSUITABLEEMPLOYMENT");
            entity.Property(e => e.Capacitysuitablefromdate)
                .HasColumnType("datetime")
                .HasColumnName("CAPACITYSUITABLEFROMDATE");
            entity.Property(e => e.Capacitysuitabletodate)
                .HasColumnType("datetime")
                .HasColumnName("CAPACITYSUITABLETODATE");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Dateexamined)
                .HasColumnType("datetime")
                .HasColumnName("DATEEXAMINED");
            entity.Property(e => e.Diagnosis)
                .IsUnicode(false)
                .HasColumnName("DIAGNOSIS");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Nocapacity).HasColumnName("NOCAPACITY");
            entity.Property(e => e.Nocapacityfromdate)
                .HasColumnType("datetime")
                .HasColumnName("NOCAPACITYFROMDATE");
            entity.Property(e => e.Nocapacitytodate)
                .HasColumnType("datetime")
                .HasColumnName("NOCAPACITYTODATE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Treatmentplan)
                .IsUnicode(false)
                .HasColumnName("TREATMENTPLAN");

            entity.HasOne(d => d.Insurerload).WithMany(p => p.InsMedcerts)
                .HasForeignKey(d => d.Insurerloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_MEDCERT_INSURERLOADID");
        });

        modelBuilder.Entity<InsMedcertstaging>(entity =>
        {
            entity.HasKey(e => new { e.Stagingloadid, e.Medcertstagingno });

            entity.ToTable("INS_MEDCERTSTAGING", tb =>
                {
                    tb.HasTrigger("auddel_INS_MEDCERTSTAGING");
                    tb.HasTrigger("audins_INS_MEDCERTSTAGING");
                    tb.HasTrigger("audupd_INS_MEDCERTSTAGING");
                });

            entity.Property(e => e.Stagingloadid).HasColumnName("STAGINGLOADID");
            entity.Property(e => e.Medcertstagingno).HasColumnName("MEDCERTSTAGINGNO");
            entity.Property(e => e.Capacitypreinjuryemployment).HasColumnName("CAPACITYPREINJURYEMPLOYMENT");
            entity.Property(e => e.Capacitypreinjuryfromdate)
                .HasColumnType("datetime")
                .HasColumnName("CAPACITYPREINJURYFROMDATE");
            entity.Property(e => e.Capacitysuitableemployment).HasColumnName("CAPACITYSUITABLEEMPLOYMENT");
            entity.Property(e => e.Capacitysuitablefromdate)
                .HasColumnType("datetime")
                .HasColumnName("CAPACITYSUITABLEFROMDATE");
            entity.Property(e => e.Capacitysuitabletodate)
                .HasColumnType("datetime")
                .HasColumnName("CAPACITYSUITABLETODATE");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Dateexamined)
                .HasColumnType("datetime")
                .HasColumnName("DATEEXAMINED");
            entity.Property(e => e.Diagnosis)
                .IsUnicode(false)
                .HasColumnName("DIAGNOSIS");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Nocapacity).HasColumnName("NOCAPACITY");
            entity.Property(e => e.Nocapacityfromdate)
                .HasColumnType("datetime")
                .HasColumnName("NOCAPACITYFROMDATE");
            entity.Property(e => e.Nocapacitytodate)
                .HasColumnType("datetime")
                .HasColumnName("NOCAPACITYTODATE");
            entity.Property(e => e.Rawdata)
                .IsUnicode(false)
                .HasColumnName("RAWDATA");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Treatmentplan)
                .IsUnicode(false)
                .HasColumnName("TREATMENTPLAN");

            entity.HasOne(d => d.Stagingload).WithMany(p => p.InsMedcertstagings)
                .HasForeignKey(d => d.Stagingloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_MEDCERTSTAGING_STAGINGLOADID");
        });

        modelBuilder.Entity<InsPayment>(entity =>
        {
            entity.HasKey(e => new { e.Insurerloadid, e.Inspaymentno });

            entity.ToTable("INS_PAYMENT", tb =>
                {
                    tb.HasTrigger("auddel_INS_PAYMENT");
                    tb.HasTrigger("audins_INS_PAYMENT");
                    tb.HasTrigger("audupd_INS_PAYMENT");
                });

            entity.Property(e => e.Insurerloadid).HasColumnName("INSURERLOADID");
            entity.Property(e => e.Inspaymentno).HasColumnName("INSPAYMENTNO");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Dateauthorised)
                .HasColumnType("datetime")
                .HasColumnName("DATEAUTHORISED");
            entity.Property(e => e.Dateofservice)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFSERVICE");
            entity.Property(e => e.Datepaid)
                .HasColumnType("datetime")
                .HasColumnName("DATEPAID");
            entity.Property(e => e.Datereceived)
                .HasColumnType("datetime")
                .HasColumnName("DATERECEIVED");
            entity.Property(e => e.Dayslost).HasColumnName("DAYSLOST");
            entity.Property(e => e.Grossamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("GROSSAMOUNT");
            entity.Property(e => e.Gstamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("GSTAMOUNT");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hourslost).HasColumnName("HOURSLOST");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Invoicedate)
                .HasColumnType("datetime")
                .HasColumnName("INVOICEDATE");
            entity.Property(e => e.Invoicenumber)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("INVOICENUMBER");
            entity.Property(e => e.Itemnumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ITEMNUMBER");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Netamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("NETAMOUNT");
            entity.Property(e => e.Payee)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PAYEE");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORY");
            entity.Property(e => e.Paymentcategorycodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORYCODETYPE");
            entity.Property(e => e.Paymentenddate)
                .HasColumnType("datetime")
                .HasColumnName("PAYMENTENDDATE");
            entity.Property(e => e.Paymentstartdate)
                .HasColumnType("datetime")
                .HasColumnName("PAYMENTSTARTDATE");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPE");
            entity.Property(e => e.Paymenttypecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPECODETYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Transactiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRANSACTIONTYPE");

            entity.HasOne(d => d.Insurerload).WithMany(p => p.InsPayments)
                .HasForeignKey(d => d.Insurerloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_PAYMENT_INSURERLOADID");
        });

        modelBuilder.Entity<InsPaymentstaging>(entity =>
        {
            entity.HasKey(e => new { e.Stagingloadid, e.Paymentstagingno });

            entity.ToTable("INS_PAYMENTSTAGING", tb =>
                {
                    tb.HasTrigger("auddel_INS_PAYMENTSTAGING");
                    tb.HasTrigger("audins_INS_PAYMENTSTAGING");
                    tb.HasTrigger("audupd_INS_PAYMENTSTAGING");
                });

            entity.Property(e => e.Stagingloadid).HasColumnName("STAGINGLOADID");
            entity.Property(e => e.Paymentstagingno).HasColumnName("PAYMENTSTAGINGNO");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Dateauthorised)
                .HasColumnType("datetime")
                .HasColumnName("DATEAUTHORISED");
            entity.Property(e => e.Dateofservice)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFSERVICE");
            entity.Property(e => e.Datepaid)
                .HasColumnType("datetime")
                .HasColumnName("DATEPAID");
            entity.Property(e => e.Datereceived)
                .HasColumnType("datetime")
                .HasColumnName("DATERECEIVED");
            entity.Property(e => e.Dayslost).HasColumnName("DAYSLOST");
            entity.Property(e => e.Grossamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("GROSSAMOUNT");
            entity.Property(e => e.Gstamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("GSTAMOUNT");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hourslost).HasColumnName("HOURSLOST");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Invoicedate)
                .HasColumnType("datetime")
                .HasColumnName("INVOICEDATE");
            entity.Property(e => e.Invoicenumber)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("INVOICENUMBER");
            entity.Property(e => e.Itemnumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ITEMNUMBER");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Netamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("NETAMOUNT");
            entity.Property(e => e.Payee)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PAYEE");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORY");
            entity.Property(e => e.Paymentcategorycodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORYCODETYPE");
            entity.Property(e => e.Paymentenddate)
                .HasColumnType("datetime")
                .HasColumnName("PAYMENTENDDATE");
            entity.Property(e => e.Paymentstartdate)
                .HasColumnType("datetime")
                .HasColumnName("PAYMENTSTARTDATE");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPE");
            entity.Property(e => e.Paymenttypecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPECODETYPE");
            entity.Property(e => e.Rawdata)
                .IsUnicode(false)
                .HasColumnName("RAWDATA");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Transactiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRANSACTIONTYPE");

            entity.HasOne(d => d.Stagingload).WithMany(p => p.InsPaymentstagings)
                .HasForeignKey(d => d.Stagingloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_PAYMENTSTAGING_STAGINGLOADID");
        });

        modelBuilder.Entity<InsRecovery>(entity =>
        {
            entity.HasKey(e => new { e.Insurerloadid, e.Insrecoveryno });

            entity.ToTable("INS_RECOVERY", tb =>
                {
                    tb.HasTrigger("auddel_INS_RECOVERY");
                    tb.HasTrigger("audins_INS_RECOVERY");
                    tb.HasTrigger("audupd_INS_RECOVERY");
                });

            entity.Property(e => e.Insurerloadid).HasColumnName("INSURERLOADID");
            entity.Property(e => e.Insrecoveryno).HasColumnName("INSRECOVERYNO");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Recoveryamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("RECOVERYAMOUNT");
            entity.Property(e => e.Recoverydate)
                .HasColumnType("datetime")
                .HasColumnName("RECOVERYDATE");
            entity.Property(e => e.Recoverytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECOVERYTYPE");
            entity.Property(e => e.Recoverytypecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECOVERYTYPECODETYPE");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Insurerload).WithMany(p => p.InsRecoveries)
                .HasForeignKey(d => d.Insurerloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_RECOVERY_INSURERLOADID");
        });

        modelBuilder.Entity<InsRecoverystaging>(entity =>
        {
            entity.HasKey(e => new { e.Stagingloadid, e.Recoverystagingno });

            entity.ToTable("INS_RECOVERYSTAGING", tb =>
                {
                    tb.HasTrigger("auddel_INS_RECOVERYSTAGING");
                    tb.HasTrigger("audins_INS_RECOVERYSTAGING");
                    tb.HasTrigger("audupd_INS_RECOVERYSTAGING");
                });

            entity.Property(e => e.Stagingloadid).HasColumnName("STAGINGLOADID");
            entity.Property(e => e.Recoverystagingno).HasColumnName("RECOVERYSTAGINGNO");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Rawdata)
                .IsUnicode(false)
                .HasColumnName("RAWDATA");
            entity.Property(e => e.Recoveryamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("RECOVERYAMOUNT");
            entity.Property(e => e.Recoverydate)
                .HasColumnType("datetime")
                .HasColumnName("RECOVERYDATE");
            entity.Property(e => e.Recoverytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECOVERYTYPE");
            entity.Property(e => e.Recoverytypecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECOVERYTYPECODETYPE");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Stagingload).WithMany(p => p.InsRecoverystagings)
                .HasForeignKey(d => d.Stagingloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_RECOVERYSTAGING_STAGINGLOADID");
        });

        modelBuilder.Entity<InsStagingload>(entity =>
        {
            entity.HasKey(e => e.Stagingloadid);

            entity.ToTable("INS_STAGINGLOAD", tb =>
                {
                    tb.HasTrigger("auddel_INS_STAGINGLOAD");
                    tb.HasTrigger("audins_INS_STAGINGLOAD");
                    tb.HasTrigger("audupd_INS_STAGINGLOAD");
                });

            entity.Property(e => e.Stagingloadid).HasColumnName("STAGINGLOADID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<InsStatus>(entity =>
        {
            entity.HasKey(e => new { e.Insurerloadid, e.Insstatusno });

            entity.ToTable("INS_STATUS", tb =>
                {
                    tb.HasTrigger("auddel_INS_STATUS");
                    tb.HasTrigger("audins_INS_STATUS");
                    tb.HasTrigger("audupd_INS_STATUS");
                });

            entity.Property(e => e.Insurerloadid).HasColumnName("INSURERLOADID");
            entity.Property(e => e.Insstatusno).HasColumnName("INSSTATUSNO");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Claimstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMSTATUS");
            entity.Property(e => e.Claimstatuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMSTATUSCODETYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Statusfromdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSFROMDATE");
            entity.Property(e => e.Statustodate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSTODATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Insurerload).WithMany(p => p.InsStatuses)
                .HasForeignKey(d => d.Insurerloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_STATUS_INSURERLOADID");
        });

        modelBuilder.Entity<InsStatusstaging>(entity =>
        {
            entity.HasKey(e => new { e.Stagingloadid, e.Statusstagingno });

            entity.ToTable("INS_STATUSSTAGING", tb =>
                {
                    tb.HasTrigger("auddel_INS_STATUSSTAGING");
                    tb.HasTrigger("audins_INS_STATUSSTAGING");
                    tb.HasTrigger("audupd_INS_STATUSSTAGING");
                });

            entity.Property(e => e.Stagingloadid).HasColumnName("STAGINGLOADID");
            entity.Property(e => e.Statusstagingno).HasColumnName("STATUSSTAGINGNO");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Claimstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMSTATUS");
            entity.Property(e => e.Claimstatuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMSTATUSCODETYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Rawdata)
                .IsUnicode(false)
                .HasColumnName("RAWDATA");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Statusfromdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSFROMDATE");
            entity.Property(e => e.Statustodate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSTODATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Stagingload).WithMany(p => p.InsStatusstagings)
                .HasForeignKey(d => d.Stagingloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_STATUSSTAGING_STAGINGLOADID");
        });

        modelBuilder.Entity<InsTimeoffwork>(entity =>
        {
            entity.HasKey(e => new { e.Insurerloadid, e.Instimeoffworkno });

            entity.ToTable("INS_TIMEOFFWORK", tb =>
                {
                    tb.HasTrigger("auddel_INS_TIMEOFFWORK");
                    tb.HasTrigger("audins_INS_TIMEOFFWORK");
                    tb.HasTrigger("audupd_INS_TIMEOFFWORK");
                });

            entity.Property(e => e.Insurerloadid).HasColumnName("INSURERLOADID");
            entity.Property(e => e.Instimeoffworkno).HasColumnName("INSTIMEOFFWORKNO");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Dateceasedwork)
                .HasColumnType("datetime")
                .HasColumnName("DATECEASEDWORK");
            entity.Property(e => e.Estimatedreturndate)
                .HasColumnType("datetime")
                .HasColumnName("ESTIMATEDRETURNDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Returndate)
                .HasColumnType("datetime")
                .HasColumnName("RETURNDATE");
            entity.Property(e => e.Returntime)
                .HasColumnType("datetime")
                .HasColumnName("RETURNTIME");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Timeceasedwork)
                .HasColumnType("datetime")
                .HasColumnName("TIMECEASEDWORK");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Insurerload).WithMany(p => p.InsTimeoffworks)
                .HasForeignKey(d => d.Insurerloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_TIMEOFFWORK_INSURERLOADID");
        });

        modelBuilder.Entity<InsTimeoffworkstaging>(entity =>
        {
            entity.HasKey(e => new { e.Stagingloadid, e.Timeoffworkstagingno });

            entity.ToTable("INS_TIMEOFFWORKSTAGING", tb =>
                {
                    tb.HasTrigger("auddel_INS_TIMEOFFWORKSTAGING");
                    tb.HasTrigger("audins_INS_TIMEOFFWORKSTAGING");
                    tb.HasTrigger("audupd_INS_TIMEOFFWORKSTAGING");
                });

            entity.Property(e => e.Stagingloadid).HasColumnName("STAGINGLOADID");
            entity.Property(e => e.Timeoffworkstagingno).HasColumnName("TIMEOFFWORKSTAGINGNO");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Dateceasedwork)
                .HasColumnType("datetime")
                .HasColumnName("DATECEASEDWORK");
            entity.Property(e => e.Estimatedreturndate)
                .HasColumnType("datetime")
                .HasColumnName("ESTIMATEDRETURNDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Rawdata)
                .IsUnicode(false)
                .HasColumnName("RAWDATA");
            entity.Property(e => e.Returndate)
                .HasColumnType("datetime")
                .HasColumnName("RETURNDATE");
            entity.Property(e => e.Returntime)
                .HasColumnType("datetime")
                .HasColumnName("RETURNTIME");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Timeceasedwork)
                .HasColumnType("datetime")
                .HasColumnName("TIMECEASEDWORK");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Stagingload).WithMany(p => p.InsTimeoffworkstagings)
                .HasForeignKey(d => d.Stagingloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_TIMEOFFWORKSTAGING_STAGINGLOADID");
        });

        modelBuilder.Entity<InsWorkcapacity>(entity =>
        {
            entity.HasKey(e => new { e.Insurerloadid, e.Insworkcapacityno });

            entity.ToTable("INS_WORKCAPACITY", tb =>
                {
                    tb.HasTrigger("auddel_INS_WORKCAPACITY");
                    tb.HasTrigger("audins_INS_WORKCAPACITY");
                    tb.HasTrigger("audupd_INS_WORKCAPACITY");
                });

            entity.Property(e => e.Insurerloadid).HasColumnName("INSURERLOADID");
            entity.Property(e => e.Insworkcapacityno).HasColumnName("INSWORKCAPACITYNO");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Datetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DATETYPE");
            entity.Property(e => e.Datetypecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DATETYPECODETYPE");
            entity.Property(e => e.Decisiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DECISIONTYPE");
            entity.Property(e => e.Decisiontypecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DECISIONTYPECODETYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Originaldecisiondate)
                .HasColumnType("datetime")
                .HasColumnName("ORIGINALDECISIONDATE");
            entity.Property(e => e.Outcome)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OUTCOME");
            entity.Property(e => e.Outcomecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OUTCOMECODETYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reviewstage)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REVIEWSTAGE");
            entity.Property(e => e.Reviewstagecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REVIEWSTAGECODETYPE");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Transactiondate)
                .HasColumnType("datetime")
                .HasColumnName("TRANSACTIONDATE");

            entity.HasOne(d => d.Insurerload).WithMany(p => p.InsWorkcapacities)
                .HasForeignKey(d => d.Insurerloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_WORKCAPACITY_INSURERLOADID");
        });

        modelBuilder.Entity<InsWorkcapacitystaging>(entity =>
        {
            entity.HasKey(e => new { e.Stagingloadid, e.Workcapacitystagingno });

            entity.ToTable("INS_WORKCAPACITYSTAGING", tb =>
                {
                    tb.HasTrigger("auddel_INS_WORKCAPACITYSTAGING");
                    tb.HasTrigger("audins_INS_WORKCAPACITYSTAGING");
                    tb.HasTrigger("audupd_INS_WORKCAPACITYSTAGING");
                });

            entity.Property(e => e.Stagingloadid).HasColumnName("STAGINGLOADID");
            entity.Property(e => e.Workcapacitystagingno).HasColumnName("WORKCAPACITYSTAGINGNO");
            entity.Property(e => e.Claimpolicynumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLAIMPOLICYNUMBER");
            entity.Property(e => e.Datetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DATETYPE");
            entity.Property(e => e.Datetypecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DATETYPECODETYPE");
            entity.Property(e => e.Decisiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DECISIONTYPE");
            entity.Property(e => e.Decisiontypecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DECISIONTYPECODETYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Insurerclaimnumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INSURERCLAIMNUMBER");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Originaldecisiondate)
                .HasColumnType("datetime")
                .HasColumnName("ORIGINALDECISIONDATE");
            entity.Property(e => e.Outcome)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OUTCOME");
            entity.Property(e => e.Outcomecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OUTCOMECODETYPE");
            entity.Property(e => e.Rawdata)
                .IsUnicode(false)
                .HasColumnName("RAWDATA");
            entity.Property(e => e.Reviewstage)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REVIEWSTAGE");
            entity.Property(e => e.Reviewstagecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REVIEWSTAGECODETYPE");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Transactiondate)
                .HasColumnType("datetime")
                .HasColumnName("TRANSACTIONDATE");

            entity.HasOne(d => d.Stagingload).WithMany(p => p.InsWorkcapacitystagings)
                .HasForeignKey(d => d.Stagingloadid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INS_WORKCAPACITYSTAGING_STAGINGLOADID");
        });

        modelBuilder.Entity<JobJob>(entity =>
        {
            entity.HasKey(e => e.Jobid).HasName("PK_JOB_JOB_JOBID");

            entity.ToTable("JOB_JOB", tb =>
                {
                    tb.HasTrigger("auddel_JOB_JOB");
                    tb.HasTrigger("audins_JOB_JOB");
                    tb.HasTrigger("audupd_JOB_JOB");
                });

            entity.Property(e => e.Jobid).HasColumnName("JOBID");
            entity.Property(e => e.Dateownerchanged)
                .HasColumnType("datetime")
                .HasColumnName("DATEOWNERCHANGED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Jobdescription)
                .IsUnicode(false)
                .HasColumnName("JOBDESCRIPTION");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JOBTYPE");
            entity.Property(e => e.Ownerid).HasColumnName("OWNERID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Owner).WithMany(p => p.JobJobs)
                .HasForeignKey(d => d.Ownerid)
                .HasConstraintName("FK_JOB_JOB_OWNERID");
        });

        modelBuilder.Entity<JobQueue>(entity =>
        {
            entity.HasKey(e => e.Jobqueueid).HasName("PK_JOB_QUEUE_JOBQUEUEID");

            entity.ToTable("JOB_QUEUE", tb =>
                {
                    tb.HasTrigger("auddel_JOB_QUEUE");
                    tb.HasTrigger("audins_JOB_QUEUE");
                    tb.HasTrigger("audupd_JOB_QUEUE");
                });

            entity.Property(e => e.Jobqueueid).HasColumnName("JOBQUEUEID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Jobid).HasColumnName("JOBID");
            entity.Property(e => e.Queueddatetime)
                .HasColumnType("datetime")
                .HasColumnName("QUEUEDDATETIME");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdatetime)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATETIME");
            entity.Property(e => e.Statusdescription)
                .IsUnicode(false)
                .HasColumnName("STATUSDESCRIPTION");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Job).WithMany(p => p.JobQueues)
                .HasForeignKey(d => d.Jobid)
                .HasConstraintName("FK_JOB_QUEUE_JOBID");
        });

        modelBuilder.Entity<JobRecipient>(entity =>
        {
            entity.HasKey(e => new { e.Jobid, e.Recipientno }).HasName("PK_JOB_RECIPIENT_JOBID");

            entity.ToTable("JOB_RECIPIENT", tb =>
                {
                    tb.HasTrigger("auddel_JOB_RECIPIENT");
                    tb.HasTrigger("audins_JOB_RECIPIENT");
                    tb.HasTrigger("audupd_JOB_RECIPIENT");
                });

            entity.Property(e => e.Jobid).HasColumnName("JOBID");
            entity.Property(e => e.Recipientno).HasColumnName("RECIPIENTNO");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Deliverymethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DELIVERYMETHOD");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Otherrecipientemail)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OTHERRECIPIENTEMAIL");
            entity.Property(e => e.Recipienttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECIPIENTTYPE");
            entity.Property(e => e.Recipientuserid).HasColumnName("RECIPIENTUSERID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Securitytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SECURITYTYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Job).WithMany(p => p.JobRecipients)
                .HasForeignKey(d => d.Jobid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JOB_RECIPIENT_JOBID");
        });

        modelBuilder.Entity<LegLegalentity>(entity =>
        {
            entity.HasKey(e => e.Legalentityid);

            entity.ToTable("LEG_LEGALENTITY", tb =>
                {
                    tb.HasTrigger("auddel_LEG_LEGALENTITY");
                    tb.HasTrigger("audins_LEG_LEGALENTITY");
                    tb.HasTrigger("audupd_LEG_LEGALENTITY");
                });

            entity.Property(e => e.Legalentityid).HasColumnName("LEGALENTITYID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Employerabn)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("EMPLOYERABN");
            entity.Property(e => e.Employeracn)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("EMPLOYERACN");
            entity.Property(e => e.Employerlegalname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMPLOYERLEGALNAME");
            entity.Property(e => e.Employerothername)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEROTHERNAME");
            entity.Property(e => e.Employertradingname)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("EMPLOYERTRADINGNAME");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Mobilephone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("MOBILEPHONE");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Phone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.Postaladdressline1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTALADDRESSLINE1");
            entity.Property(e => e.Postaladdressline2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTALADDRESSLINE2");
            entity.Property(e => e.Postaladdressline3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTALADDRESSLINE3");
            entity.Property(e => e.Postalpostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("POSTALPOSTCODE");
            entity.Property(e => e.Postalsameasstreet).HasColumnName("POSTALSAMEASSTREET");
            entity.Property(e => e.Postalstate)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("POSTALSTATE");
            entity.Property(e => e.Postalsuburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("POSTALSUBURB");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Streetaddressline1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STREETADDRESSLINE1");
            entity.Property(e => e.Streetaddressline2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STREETADDRESSLINE2");
            entity.Property(e => e.Streetaddressline3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STREETADDRESSLINE3");
            entity.Property(e => e.Streetpostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("STREETPOSTCODE");
            entity.Property(e => e.Streetstate)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STREETSTATE");
            entity.Property(e => e.Streetsuburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("STREETSUBURB");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<LegLegalentityX>(entity =>
        {
            entity.HasKey(e => e.Legalentityid);

            entity.ToTable("LEG_LEGALENTITY_X", tb =>
                {
                    tb.HasTrigger("auddel_LEG_LEGALENTITY_X");
                    tb.HasTrigger("audins_LEG_LEGALENTITY_X");
                    tb.HasTrigger("audupd_LEG_LEGALENTITY_X");
                });

            entity.Property(e => e.Legalentityid)
                .ValueGeneratedNever()
                .HasColumnName("LEGALENTITYID");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Faxnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAXNUMBER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Websiteaddress)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("WEBSITEADDRESS");

            entity.HasOne(d => d.Document).WithMany(p => p.LegLegalentityXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_LEG_LEGALENTITY_X_DOCUMENTID");

            entity.HasOne(d => d.Legalentity).WithOne(p => p.LegLegalentityX)
                .HasForeignKey<LegLegalentityX>(d => d.Legalentityid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LEG_LEGALENTITY_X_LEGALENTITYID");
        });

        modelBuilder.Entity<LegOrgstructure>(entity =>
        {
            entity.HasKey(e => new { e.Legalentityid, e.Orgstructno });

            entity.ToTable("LEG_ORGSTRUCTURE", tb =>
                {
                    tb.HasTrigger("auddel_LEG_ORGSTRUCTURE");
                    tb.HasTrigger("audins_LEG_ORGSTRUCTURE");
                    tb.HasTrigger("audupd_LEG_ORGSTRUCTURE");
                });

            entity.Property(e => e.Legalentityid).HasColumnName("LEGALENTITYID");
            entity.Property(e => e.Orgstructno).HasColumnName("ORGSTRUCTNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Jurisdiction).HasColumnName("JURISDICTION");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Legalentity).WithMany(p => p.LegOrgstructures)
                .HasForeignKey(d => d.Legalentityid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LEG_ORGSTRUCTURE_LEGALENTITYID");

            entity.HasOne(d => d.Orgstruct).WithMany(p => p.LegOrgstructures)
                .HasForeignKey(d => d.Orgstructid)
                .HasConstraintName("FK_LEG_ORGSTRUCTURE_ORGSTRUCTID");
        });

        modelBuilder.Entity<LegPolicy>(entity =>
        {
            entity.HasKey(e => new { e.Legalentityid, e.Policyno });

            entity.ToTable("LEG_POLICY", tb =>
                {
                    tb.HasTrigger("auddel_LEG_POLICY");
                    tb.HasTrigger("audins_LEG_POLICY");
                    tb.HasTrigger("audupd_LEG_POLICY");
                });

            entity.Property(e => e.Legalentityid).HasColumnName("LEGALENTITYID");
            entity.Property(e => e.Policyno).HasColumnName("POLICYNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Policyid).HasColumnName("POLICYID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Legalentity).WithMany(p => p.LegPolicies)
                .HasForeignKey(d => d.Legalentityid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LEG_POLICY_LEGALENTITYID");

            entity.HasOne(d => d.Policy).WithMany(p => p.LegPolicies)
                .HasForeignKey(d => d.Policyid)
                .HasConstraintName("FK_LEG_POLICY_POLICYID");
        });

        modelBuilder.Entity<MapSbc00046210>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MAP_SBC00046210");

            entity.Property(e => e.Agency)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("agency");
            entity.Property(e => e.Agencycode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("agencycode");
            entity.Property(e => e.Costcentre)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("costcentre");
            entity.Property(e => e.Costcentrecode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("costcentrecode");
            entity.Property(e => e.Division)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("division");
            entity.Property(e => e.Divisioncode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("divisioncode");
            entity.Property(e => e.Newagency)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("newagency");
            entity.Property(e => e.Newagencycode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("newagencycode");
            entity.Property(e => e.Newcostcentre)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("newcostcentre");
            entity.Property(e => e.Newcostcentrecode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("newcostcentrecode");
            entity.Property(e => e.Newdivision)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("newdivision");
            entity.Property(e => e.Newdivisioncode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("newdivisioncode");
            entity.Property(e => e.Newportfolio)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("newportfolio");
            entity.Property(e => e.Newportfoliocode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("newportfoliocode");
            entity.Property(e => e.Newregion)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("newregion");
            entity.Property(e => e.Newregioncode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("newregioncode");
            entity.Property(e => e.Newservice)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("newservice");
            entity.Property(e => e.Newservicecode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("newservicecode");
            entity.Property(e => e.Portfolio)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("portfolio");
            entity.Property(e => e.Portfoliocode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("portfoliocode");
            entity.Property(e => e.Region)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("region");
            entity.Property(e => e.Regioncode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("regioncode");
            entity.Property(e => e.Service)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("service");
            entity.Property(e => e.Servicecode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("servicecode");
        });

        modelBuilder.Entity<MedCapacity>(entity =>
        {
            entity.HasKey(e => new { e.Medcertid, e.Capacityno });

            entity.ToTable("MED_CAPACITY", tb =>
                {
                    tb.HasTrigger("WF_MED_CAPACITY");
                    tb.HasTrigger("auddel_MED_CAPACITY");
                    tb.HasTrigger("audins_MED_CAPACITY");
                    tb.HasTrigger("audupd_MED_CAPACITY");
                });

            entity.HasIndex(e => e.Capacity, "IDX_MED_CAPACITY_CAPACITY");

            entity.HasIndex(e => new { e.Capacity, e.Medcertid }, "IX_MED_CAPACITY_WF");

            entity.HasIndex(e => new { e.Medcertid, e.Capacity }, "IX_MED_CAPACITY_WF2");

            entity.Property(e => e.Medcertid).HasColumnName("MEDCERTID");
            entity.Property(e => e.Capacityno).HasColumnName("CAPACITYNO");
            entity.Property(e => e.Applicable).HasColumnName("APPLICABLE");
            entity.Property(e => e.Capacity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAPACITY");
            entity.Property(e => e.Capacitycodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAPACITYCODETYPE");
            entity.Property(e => e.Datefrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEFROM");
            entity.Property(e => e.Dateto)
                .HasColumnType("datetime")
                .HasColumnName("DATETO");
            entity.Property(e => e.Daysperweek).HasColumnName("DAYSPERWEEK");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hoursperday)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("HOURSPERDAY");
            entity.Property(e => e.Normalhours).HasColumnName("NORMALHOURS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Medcert).WithMany(p => p.MedCapacities)
                .HasForeignKey(d => d.Medcertid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MED_CAPACITY_MEDCERTID");
        });

        modelBuilder.Entity<MedCapacitySa>(entity =>
        {
            entity.HasKey(e => new { e.Medcertid, e.Capacityno });

            entity.ToTable("MED_CAPACITY_SA", tb =>
                {
                    tb.HasTrigger("auddel_MED_CAPACITY_SA");
                    tb.HasTrigger("audins_MED_CAPACITY_SA");
                    tb.HasTrigger("audupd_MED_CAPACITY_SA");
                });

            entity.Property(e => e.Medcertid).HasColumnName("MEDCERTID");
            entity.Property(e => e.Capacityno).HasColumnName("CAPACITYNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Mayrequirefurthertreatment).HasColumnName("MAYREQUIREFURTHERTREATMENT");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.MedCapacity).WithOne(p => p.MedCapacitySa)
                .HasForeignKey<MedCapacitySa>(d => new { d.Medcertid, d.Capacityno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MED_CAPACITY_SA_CAPACITYNO");
        });

        modelBuilder.Entity<MedDocument>(entity =>
        {
            entity.HasKey(e => new { e.Medcertid, e.Documentno });

            entity.ToTable("MED_DOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_MED_DOCUMENT");
                    tb.HasTrigger("audins_MED_DOCUMENT");
                    tb.HasTrigger("audupd_MED_DOCUMENT");
                });

            entity.HasIndex(e => e.Documentid, "IDX_MED_DOCUMENT_DOCUMENTID");

            entity.Property(e => e.Medcertid).HasColumnName("MEDCERTID");
            entity.Property(e => e.Documentno).HasColumnName("DOCUMENTNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.MedDocuments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_MED_DOCUMENT_DOCUMENTID");

            entity.HasOne(d => d.Medcert).WithMany(p => p.MedDocuments)
                .HasForeignKey(d => d.Medcertid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MED_DOCUMENT_MEDCERTID");
        });

        modelBuilder.Entity<MedMedcert>(entity =>
        {
            entity.HasKey(e => e.Medcertid);

            entity.ToTable("MED_MEDCERT", tb =>
                {
                    tb.HasTrigger("auddel_MED_MEDCERT");
                    tb.HasTrigger("audins_MED_MEDCERT");
                    tb.HasTrigger("audupd_MED_MEDCERT");
                });

            entity.Property(e => e.Medcertid).HasColumnName("MEDCERTID");
            entity.Property(e => e.Certificatetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CERTIFICATETYPE");
            entity.Property(e => e.Certificatetypecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CERTIFICATETYPECODETYPE");
            entity.Property(e => e.Comments)
                .IsUnicode(false)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Consistantdescription).HasColumnName("CONSISTANTDESCRIPTION");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Dateexamined)
                .HasColumnType("datetime")
                .HasColumnName("DATEEXAMINED");
            entity.Property(e => e.Dateprovidersigned)
                .HasColumnType("datetime")
                .HasColumnName("DATEPROVIDERSIGNED");
            entity.Property(e => e.Datereceived)
                .HasColumnType("datetime")
                .HasColumnName("DATERECEIVED");
            entity.Property(e => e.Diagnosis)
                .IsUnicode(false)
                .HasColumnName("DIAGNOSIS");
            entity.Property(e => e.Enteredby).HasColumnName("ENTEREDBY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Manualprovidername)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MANUALPROVIDERNAME");
            entity.Property(e => e.Providercontactno).HasColumnName("PROVIDERCONTACTNO");
            entity.Property(e => e.Providerlocationno).HasColumnName("PROVIDERLOCATIONNO");
            entity.Property(e => e.Providerpartyid).HasColumnName("PROVIDERPARTYID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reviewdate)
                .HasColumnType("datetime")
                .HasColumnName("REVIEWDATE");
            entity.Property(e => e.Stage)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STAGE");
            entity.Property(e => e.Timeentered)
                .HasColumnType("datetime")
                .HasColumnName("TIMEENTERED");
            entity.Property(e => e.Timeexamined)
                .HasColumnType("datetime")
                .HasColumnName("TIMEEXAMINED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Providerparty).WithMany(p => p.MedMedcerts)
                .HasForeignKey(d => d.Providerpartyid)
                .HasConstraintName("FK_MED_MEDCERT_PROVIDERPARTYID");

            entity.HasOne(d => d.ParLocation).WithMany(p => p.MedMedcerts)
                .HasForeignKey(d => new { d.Providerpartyid, d.Providerlocationno })
                .HasConstraintName("FK_MED_MEDCERT_PROVIDERLOCATIONNO");

            entity.HasOne(d => d.ParContact).WithMany(p => p.MedMedcerts)
                .HasForeignKey(d => new { d.Providerpartyid, d.Providerlocationno, d.Providercontactno })
                .HasConstraintName("FK_MED_MEDCERT_PROVIDERCONTACTNO");
        });

        modelBuilder.Entity<MedMedcertSa>(entity =>
        {
            entity.HasKey(e => e.Medcertid);

            entity.ToTable("MED_MEDCERT_SA", tb =>
                {
                    tb.HasTrigger("auddel_MED_MEDCERT_SA");
                    tb.HasTrigger("audins_MED_MEDCERT_SA");
                    tb.HasTrigger("audupd_MED_MEDCERT_SA");
                });

            entity.Property(e => e.Medcertid)
                .ValueGeneratedNever()
                .HasColumnName("MEDCERTID");
            entity.Property(e => e.Additionalcomments)
                .IsUnicode(false)
                .HasColumnName("ADDITIONALCOMMENTS");
            entity.Property(e => e.Attentionconcentration)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ATTENTIONCONCENTRATION");
            entity.Property(e => e.Bending)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BENDING");
            entity.Property(e => e.Carryingholdinglifting)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CARRYINGHOLDINGLIFTING");
            entity.Property(e => e.Casemanagercontactrequired).HasColumnName("CASEMANAGERCONTACTREQUIRED");
            entity.Property(e => e.Certificatenumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CERTIFICATENUMBER");
            entity.Property(e => e.Certificationcomments)
                .IsUnicode(false)
                .HasColumnName("CERTIFICATIONCOMMENTS");
            entity.Property(e => e.Certificationreason)
                .IsUnicode(false)
                .HasColumnName("CERTIFICATIONREASON");
            entity.Property(e => e.Conditionoccurrence).HasColumnName("CONDITIONOCCURRENCE");
            entity.Property(e => e.Driving)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DRIVING");
            entity.Property(e => e.Employercontactrequired).HasColumnName("EMPLOYERCONTACTREQUIRED");
            entity.Property(e => e.Estimatedrtwdays).HasColumnName("ESTIMATEDRTWDAYS");
            entity.Property(e => e.Estimatedrtwuncertain).HasColumnName("ESTIMATEDRTWUNCERTAIN");
            entity.Property(e => e.Estimatedrtwweeks).HasColumnName("ESTIMATEDRTWWEEKS");
            entity.Property(e => e.Graduatedhoursadayfrom)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("GRADUATEDHOURSADAYFROM");
            entity.Property(e => e.Graduatedhoursadayto)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("GRADUATEDHOURSADAYTO");
            entity.Property(e => e.Graduatedincrease).HasColumnName("GRADUATEDINCREASE");
            entity.Property(e => e.Graduatedweeks).HasColumnName("GRADUATEDWEEKS");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Issuedby).HasColumnName("ISSUEDBY");
            entity.Property(e => e.Judgement)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JUDGEMENT");
            entity.Property(e => e.Kneelingsquating)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("KNEELINGSQUATING");
            entity.Property(e => e.Medicalspecialist).HasColumnName("MEDICALSPECIALIST");
            entity.Property(e => e.Medicalspecialistname)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("MEDICALSPECIALISTNAME");
            entity.Property(e => e.Medicationsprescribed)
                .IsUnicode(false)
                .HasColumnName("MEDICATIONSPRESCRIBED");
            entity.Property(e => e.Memory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MEMORY");
            entity.Property(e => e.Neckmovement)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NECKMOVEMENT");
            entity.Property(e => e.Nonconsecutivedays).HasColumnName("NONCONSECUTIVEDAYS");
            entity.Property(e => e.Nonconsecutiveperioddays).HasColumnName("NONCONSECUTIVEPERIODDAYS");
            entity.Property(e => e.Nonconsecutiveperiodweeks).HasColumnName("NONCONSECUTIVEPERIODWEEKS");
            entity.Property(e => e.Norestrictions).HasColumnName("NORESTRICTIONS");
            entity.Property(e => e.Otherfunctionalconsideration)
                .IsUnicode(false)
                .HasColumnName("OTHERFUNCTIONALCONSIDERATION");
            entity.Property(e => e.Otherspecialist).HasColumnName("OTHERSPECIALIST");
            entity.Property(e => e.Otherspecialistname)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OTHERSPECIALISTNAME");
            entity.Property(e => e.Physiotherapist).HasColumnName("PHYSIOTHERAPIST");
            entity.Property(e => e.Physiotherapistname)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PHYSIOTHERAPISTNAME");
            entity.Property(e => e.Preferredcontactmethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PREFERREDCONTACTMETHOD");
            entity.Property(e => e.Psychologist).HasColumnName("PSYCHOLOGIST");
            entity.Property(e => e.Psychologistname)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PSYCHOLOGISTNAME");
            entity.Property(e => e.Reachingaboveshoulder)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REACHINGABOVESHOULDER");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Requestedrtwoptions).HasColumnName("REQUESTEDRTWOPTIONS");
            entity.Property(e => e.Requestedrtwplancopy).HasColumnName("REQUESTEDRTWPLANCOPY");
            entity.Property(e => e.Reviewatnextconsult).HasColumnName("REVIEWATNEXTCONSULT");
            entity.Property(e => e.Sitting)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SITTING");
            entity.Property(e => e.Standingwalking)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STANDINGWALKING");
            entity.Property(e => e.Statedcauseofinjury)
                .IsUnicode(false)
                .HasColumnName("STATEDCAUSEOFINJURY");
            entity.Property(e => e.Stateddateofinjury)
                .HasColumnType("datetime")
                .HasColumnName("STATEDDATEOFINJURY");
            entity.Property(e => e.Stepsstairsladders)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STEPSSTAIRSLADDERS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Treatmentplan)
                .IsUnicode(false)
                .HasColumnName("TREATMENTPLAN");
            entity.Property(e => e.Useunaffectedbodypart)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USEUNAFFECTEDBODYPART");

            entity.HasOne(d => d.Medcert).WithOne(p => p.MedMedcertSa)
                .HasForeignKey<MedMedcertSa>(d => d.Medcertid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MED_MEDCERT_SA_MEDCERTID");
        });

        modelBuilder.Entity<MtpBatchnumberX>(entity =>
        {
            entity.HasKey(e => new { e.Masterpieceid, e.Filesuffixno });

            entity.ToTable("MTP_BATCHNUMBER_X", tb =>
                {
                    tb.HasTrigger("auddel_MTP_BATCHNUMBER_X");
                    tb.HasTrigger("audins_MTP_BATCHNUMBER_X");
                    tb.HasTrigger("audupd_MTP_BATCHNUMBER_X");
                });

            entity.Property(e => e.Masterpieceid).HasColumnName("MASTERPIECEID");
            entity.Property(e => e.Filesuffixno).HasColumnName("FILESUFFIXNO");
            entity.Property(e => e.Filesuffix)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILESUFFIX");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Lastbatchnumber).HasColumnName("LASTBATCHNUMBER");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Masterpiece).WithMany(p => p.MtpBatchnumberXes)
                .HasForeignKey(d => d.Masterpieceid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MTP_BATCHNUMBER_X_MASTERPIECEID");
        });

        modelBuilder.Entity<MtpFundaccountX>(entity =>
        {
            entity.HasKey(e => new { e.Fundprofileid, e.Fundaccountno });

            entity.ToTable("MTP_FUNDACCOUNT_X", tb =>
                {
                    tb.HasTrigger("auddel_MTP_FUNDACCOUNT_X");
                    tb.HasTrigger("audins_MTP_FUNDACCOUNT_X");
                    tb.HasTrigger("audupd_MTP_FUNDACCOUNT_X");
                });

            entity.Property(e => e.Fundprofileid).HasColumnName("FUNDPROFILEID");
            entity.Property(e => e.Fundaccountno).HasColumnName("FUNDACCOUNTNO");
            entity.Property(e => e.Accountnumber)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("ACCOUNTNUMBER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Notes)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORY");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Fundprofile).WithMany(p => p.MtpFundaccountXes)
                .HasForeignKey(d => d.Fundprofileid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MTP_FUNDACCOUNT_X_PROFILEID");
        });

        modelBuilder.Entity<MtpFundorgstructX>(entity =>
        {
            entity.HasKey(e => new { e.Fundprofileid, e.Fundorgstructno });

            entity.ToTable("MTP_FUNDORGSTRUCT_X", tb =>
                {
                    tb.HasTrigger("auddel_MTP_FUNDORGSTRUCT_X");
                    tb.HasTrigger("audins_MTP_FUNDORGSTRUCT_X");
                    tb.HasTrigger("audupd_MTP_FUNDORGSTRUCT_X");
                });

            entity.Property(e => e.Fundprofileid).HasColumnName("FUNDPROFILEID");
            entity.Property(e => e.Fundorgstructno).HasColumnName("FUNDORGSTRUCTNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Fundprofile).WithMany(p => p.MtpFundorgstructXes)
                .HasForeignKey(d => d.Fundprofileid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MTP_FUNDORGSTRUCT_X_FUNDPROFILEID");

            entity.HasOne(d => d.Orgstruct).WithMany(p => p.MtpFundorgstructXes)
                .HasForeignKey(d => d.Orgstructid)
                .HasConstraintName("FK_MTP_FUNDORGSTRUCT_X_ORGSTRUCTID");
        });

        modelBuilder.Entity<MtpFundorgstructXDeletedCv>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MTP_FUNDORGSTRUCT_X_DELETED_CV", tb =>
                {
                    tb.HasTrigger("auddel_MTP_FUNDORGSTRUCT_X_DEL");
                    tb.HasTrigger("audins_MTP_FUNDORGSTRUCT_X_DEL");
                });

            entity.Property(e => e.Fundorgstructno).HasColumnName("FUNDORGSTRUCTNO");
            entity.Property(e => e.Fundprofileid).HasColumnName("FUNDPROFILEID");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<MtpFundprofileX>(entity =>
        {
            entity.HasKey(e => e.Fundprofileid);

            entity.ToTable("MTP_FUNDPROFILE_X", tb =>
                {
                    tb.HasTrigger("auddel_MTP_FUNDPROFILE_X");
                    tb.HasTrigger("audins_MTP_FUNDPROFILE_X");
                    tb.HasTrigger("audupd_MTP_FUNDPROFILE_X");
                });

            entity.Property(e => e.Fundprofileid).HasColumnName("FUNDPROFILEID");
            entity.Property(e => e.Accountnumber)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("ACCOUNTNUMBER");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Claimtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMTYPE");
            entity.Property(e => e.Defaultprofile).HasColumnName("DEFAULTPROFILE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Profilename)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PROFILENAME");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<MtpMasterpieceX>(entity =>
        {
            entity.HasKey(e => e.Masterpieceid);

            entity.ToTable("MTP_MASTERPIECE_X", tb =>
                {
                    tb.HasTrigger("auddel_MTP_MASTERPIECE_X");
                    tb.HasTrigger("audins_MTP_MASTERPIECE_X");
                    tb.HasTrigger("audupd_MTP_MASTERPIECE_X");
                });

            entity.Property(e => e.Masterpieceid).HasColumnName("MASTERPIECEID");
            entity.Property(e => e.Filename)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("FILENAME");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Mastervendorfile).HasColumnName("MASTERVENDORFILE");
            entity.Property(e => e.Profilename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PROFILENAME");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<MtpOrgstructX>(entity =>
        {
            entity.HasKey(e => new { e.Masterpieceid, e.Orgstructno });

            entity.ToTable("MTP_ORGSTRUCT_X", tb =>
                {
                    tb.HasTrigger("auddel_MTP_ORGSTRUCT_X");
                    tb.HasTrigger("audins_MTP_ORGSTRUCT_X");
                    tb.HasTrigger("audupd_MTP_ORGSTRUCT_X");
                });

            entity.Property(e => e.Masterpieceid).HasColumnName("MASTERPIECEID");
            entity.Property(e => e.Orgstructno).HasColumnName("ORGSTRUCTNO");
            entity.Property(e => e.Filesuffix)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("FILESUFFIX");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Masterpiece).WithMany(p => p.MtpOrgstructXes)
                .HasForeignKey(d => d.Masterpieceid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MTP_ORGSTRUCT_X_MASTERPIECEID");

            entity.HasOne(d => d.Orgstruct).WithMany(p => p.MtpOrgstructXes)
                .HasForeignKey(d => d.Orgstructid)
                .HasConstraintName("FK_MTP_ORGSTRUCT_X_ORGSTRUCTID");
        });

        modelBuilder.Entity<MtpVariableX>(entity =>
        {
            entity.HasKey(e => new { e.Masterpieceid, e.Variableno });

            entity.ToTable("MTP_VARIABLE_X", tb =>
                {
                    tb.HasTrigger("auddel_MTP_VARIABLE_X");
                    tb.HasTrigger("audins_MTP_VARIABLE_X");
                    tb.HasTrigger("audupd_MTP_VARIABLE_X");
                });

            entity.Property(e => e.Masterpieceid).HasColumnName("MASTERPIECEID");
            entity.Property(e => e.Variableno).HasColumnName("VARIABLENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Subvariable)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUBVARIABLE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Value)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("VALUE");
            entity.Property(e => e.Variable)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VARIABLE");

            entity.HasOne(d => d.Masterpiece).WithMany(p => p.MtpVariableXes)
                .HasForeignKey(d => d.Masterpieceid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MTP_VARIABLE_X_MASTERPIECEID");
        });

        modelBuilder.Entity<NewFundingProfilesCv>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NEW_FUNDING_PROFILES_CV");

            entity.Property(e => e.Accountnumber)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("ACCOUNTNUMBER");
            entity.Property(e => e.Agency)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("AGENCY");
            entity.Property(e => e.Agencycode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCYCODE");
            entity.Property(e => e.Costcentre)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("COSTCENTRE");
            entity.Property(e => e.Costcentrecode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COSTCENTRECODE");
            entity.Property(e => e.Division)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DIVISION");
            entity.Property(e => e.Divisioncode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DIVISIONCODE");
            entity.Property(e => e.Newfundingprofilename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWFUNDINGPROFILENAME");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PAYMENTCATEGORY");
            entity.Property(e => e.Paymentcategorycode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORYCODE");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PAYMENTTYPE");
            entity.Property(e => e.Paymenttypecode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPECODE");
            entity.Property(e => e.Portfolio)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PORTFOLIO");
            entity.Property(e => e.Portfoliocode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PORTFOLIOCODE");
            entity.Property(e => e.Region)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("REGION");
            entity.Property(e => e.Regioncode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REGIONCODE");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.Service)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("SERVICE");
            entity.Property(e => e.Servicecode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SERVICECODE");
        });

        modelBuilder.Entity<NewFundingProfilesMappingCv>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NEW_FUNDING_PROFILES_MAPPING_CV");

            entity.Property(e => e.Fundprofileid).HasColumnName("FUNDPROFILEID");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
        });

        modelBuilder.Entity<NewFundingProfilesOrgstructCv>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NEW_FUNDING_PROFILES_ORGSTRUCT_CV");

            entity.Property(e => e.Fundprofileid).HasColumnName("FUNDPROFILEID");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
        });

        modelBuilder.Entity<NewFundingProfilesOrgstuctCv>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NEW_FUNDING_PROFILES_ORGSTUCT_CV");

            entity.Property(e => e.Fundprofileid).HasColumnName("FUNDPROFILEID");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
        });

        modelBuilder.Entity<OrgstructBatchX>(entity =>
        {
            entity.HasKey(e => e.Batchid);

            entity.ToTable("ORGSTRUCT_BATCH_X", tb =>
                {
                    tb.HasTrigger("auddel_ORGSTRUCT_BATCH_X");
                    tb.HasTrigger("audins_ORGSTRUCT_BATCH_X");
                    tb.HasTrigger("audupd_ORGSTRUCT_BATCH_X");
                });

            entity.Property(e => e.Batchid).HasColumnName("BATCHID");
            entity.Property(e => e.Datetimeentered)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMEENTERED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<OrgstructErrorsX>(entity =>
        {
            entity.HasKey(e => new { e.Batchid, e.Errorno });

            entity.ToTable("ORGSTRUCT_ERRORS_X", tb =>
                {
                    tb.HasTrigger("auddel_ORGSTRUCT_ERRORS_X");
                    tb.HasTrigger("audins_ORGSTRUCT_ERRORS_X");
                    tb.HasTrigger("audupd_ORGSTRUCT_ERRORS_X");
                });

            entity.Property(e => e.Batchid).HasColumnName("BATCHID");
            entity.Property(e => e.Errorno).HasColumnName("ERRORNO");
            entity.Property(e => e.Errordesc)
                .IsUnicode(false)
                .HasColumnName("ERRORDESC");
            entity.Property(e => e.Errortype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ERRORTYPE");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Batch).WithMany(p => p.OrgstructErrorsXes)
                .HasForeignKey(d => d.Batchid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ORGSTRUCT_ERRORS_X_BATCHID");
        });

        modelBuilder.Entity<OrgstructStagingX>(entity =>
        {
            entity.HasKey(e => new { e.Batchid, e.Rownumber });

            entity.ToTable("ORGSTRUCT_STAGING_X", tb =>
                {
                    tb.HasTrigger("auddel_ORGSTRUCT_STAGING_X");
                    tb.HasTrigger("audins_ORGSTRUCT_STAGING_X");
                    tb.HasTrigger("audupd_ORGSTRUCT_STAGING_X");
                });

            entity.Property(e => e.Batchid).HasColumnName("BATCHID");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.Active)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ACTIVE");
            entity.Property(e => e.AuditCreated)
                .HasColumnType("datetime")
                .HasColumnName("AUDIT_CREATED");
            entity.Property(e => e.AuditLastmodified)
                .HasColumnType("datetime")
                .HasColumnName("AUDIT_LASTMODIFIED");
            entity.Property(e => e.AuditRowversion).HasColumnName("AUDIT_ROWVERSION");
            entity.Property(e => e.Invalid).HasColumnName("INVALID");
            entity.Property(e => e.Orgcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ORGCODE");
            entity.Property(e => e.Orgdescription)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("ORGDESCRIPTION");
            entity.Property(e => e.Orghierarchyid)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("ORGHIERARCHYID");
            entity.Property(e => e.Orglevel).HasColumnName("ORGLEVEL");
            entity.Property(e => e.Orgparenthierarchyid)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("ORGPARENTHIERARCHYID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Validfrom)
                .HasColumnType("datetime")
                .HasColumnName("VALIDFROM");
            entity.Property(e => e.Validto)
                .HasColumnType("datetime")
                .HasColumnName("VALIDTO");

            entity.HasOne(d => d.Batch).WithMany(p => p.OrgstructStagingXes)
                .HasForeignKey(d => d.Batchid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ORGSTRUCT_STAGING_X_BATCHID");
        });

        modelBuilder.Entity<OsOrgstructure>(entity =>
        {
            entity.HasKey(e => e.Orgstructid);

            entity.ToTable("OS_ORGSTRUCTURE", tb =>
                {
                    tb.HasTrigger("auddel_OS_ORGSTRUCTURE");
                    tb.HasTrigger("audins_OS_ORGSTRUCTURE");
                    tb.HasTrigger("audupd_OS_ORGSTRUCTURE");
                });

            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<OsOrgstructureX>(entity =>
        {
            entity.HasKey(e => e.Orgstructid);

            entity.ToTable("OS_ORGSTRUCTURE_X", tb =>
                {
                    tb.HasTrigger("TRIG_OS_ORGSTRUCTURE_X_EVENT_SECURITY_X");
                    tb.HasTrigger("TRIG_OS_ORGSTRUCTURE_X_SECURITY");
                    tb.HasTrigger("auddel_OS_ORGSTRUCTURE_X");
                    tb.HasTrigger("audins_OS_ORGSTRUCTURE_X");
                    tb.HasTrigger("audupd_OS_ORGSTRUCTURE_X");
                });

            entity.HasIndex(e => new { e.Agency, e.Level1, e.Level2, e.Level3, e.Level4, e.Level5, e.Level6, e.Level7, e.Heirarchyid }, "IX_OS_ORGSTRUCTURE_X");

            entity.Property(e => e.Orgstructid)
                .ValueGeneratedNever()
                .HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Heirarchyid).HasColumnName("HEIRARCHYID");
            entity.Property(e => e.Level1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LEVEL1");
            entity.Property(e => e.Level2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LEVEL2");
            entity.Property(e => e.Level3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LEVEL3");
            entity.Property(e => e.Level4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LEVEL4");
            entity.Property(e => e.Level5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LEVEL5");
            entity.Property(e => e.Level6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LEVEL6");
            entity.Property(e => e.Level7)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LEVEL7");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Orgstruct).WithOne(p => p.OsOrgstructureX)
                .HasForeignKey<OsOrgstructureX>(d => d.Orgstructid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OS_ORGSTRUCTURE_X_ORGSTRUCTID");
        });

        modelBuilder.Entity<OsOrgstructureXBak>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OS_ORGSTRUCTURE_X_BAK", tb =>
                {
                    tb.HasTrigger("auddel_OS_ORGSTRUCTURE_X_BAK");
                    tb.HasTrigger("audins_OS_ORGSTRUCTURE_X_BAK");
                });

            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY");
            entity.Property(e => e.Costcentre)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COSTCENTRE");
            entity.Property(e => e.Division)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DIVISION");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Organisationunit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ORGANISATIONUNIT");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Portfolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PORTFOLIO");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Region)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REGION");
            entity.Property(e => e.Service)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SERVICE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<ParBank>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Locationno, e.Bankno });

            entity.ToTable("PAR_BANK", tb =>
                {
                    tb.HasTrigger("auddel_PAR_BANK");
                    tb.HasTrigger("audins_PAR_BANK");
                    tb.HasTrigger("audupd_PAR_BANK");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Locationno).HasColumnName("LOCATIONNO");
            entity.Property(e => e.Bankno).HasColumnName("BANKNO");
            entity.Property(e => e.Accountname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACCOUNTNAME");
            entity.Property(e => e.Accountnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACCOUNTNUMBER");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Bankbranch)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BANKBRANCH");
            entity.Property(e => e.Bankname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BANKNAME");
            entity.Property(e => e.Beneficiarycode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BENEFICIARYCODE");
            entity.Property(e => e.Bsb1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BSB1");
            entity.Property(e => e.Bsb2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BSB2");
            entity.Property(e => e.Country)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENCY");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datemodifed)
                .HasColumnType("datetime")
                .HasColumnName("DATEMODIFED");
            entity.Property(e => e.Enteredby).HasColumnName("ENTEREDBY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Intaccountname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INTACCOUNTNAME");
            entity.Property(e => e.Intaddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INTADDRESS");
            entity.Property(e => e.Intbankname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INTBANKNAME");
            entity.Property(e => e.Inttowncity)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INTTOWNCITY");
            entity.Property(e => e.Modifiedby).HasColumnName("MODIFIEDBY");
            entity.Property(e => e.Paymentmethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTMETHOD");
            entity.Property(e => e.Postcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Remittancemethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REMITTANCEMETHOD");
            entity.Property(e => e.Specialrequirements)
                .IsUnicode(false)
                .HasColumnName("SPECIALREQUIREMENTS");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Swiftbic)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SWIFTBIC");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.EnteredbyNavigation).WithMany(p => p.ParBankEnteredbyNavigations)
                .HasForeignKey(d => d.Enteredby)
                .HasConstraintName("FK_PAR_BANK_ENTEREDBY");

            entity.HasOne(d => d.ModifiedbyNavigation).WithMany(p => p.ParBankModifiedbyNavigations)
                .HasForeignKey(d => d.Modifiedby)
                .HasConstraintName("FK_PAR_BANK_MODIFIEDBY");

            entity.HasOne(d => d.Party).WithMany(p => p.ParBanks)
                .HasForeignKey(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_BANK_PARTYID");

            entity.HasOne(d => d.ParLocation).WithMany(p => p.ParBanks)
                .HasForeignKey(d => new { d.Partyid, d.Locationno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_BANK_PARTYID_LOCATIONNO");
        });

        modelBuilder.Entity<ParBusiness>(entity =>
        {
            entity.HasKey(e => e.Partyid);

            entity.ToTable("PAR_BUSINESS", tb =>
                {
                    tb.HasTrigger("auddel_PAR_BUSINESS");
                    tb.HasTrigger("audins_PAR_BUSINESS");
                    tb.HasTrigger("audupd_PAR_BUSINESS");
                });

            entity.Property(e => e.Partyid)
                .ValueGeneratedNever()
                .HasColumnName("PARTYID");
            entity.Property(e => e.Allowedtoviewclient).HasColumnName("ALLOWEDTOVIEWCLIENT");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Inviteaccepteddatetime)
                .HasColumnType("datetime")
                .HasColumnName("INVITEACCEPTEDDATETIME");
            entity.Property(e => e.Invitesentdatetime)
                .HasColumnType("datetime")
                .HasColumnName("INVITESENTDATETIME");
            entity.Property(e => e.Lastsynchroniseddatetime)
                .HasColumnType("datetime")
                .HasColumnName("LASTSYNCHRONISEDDATETIME");
            entity.Property(e => e.Portalguid).HasColumnName("PORTALGUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statuschangeddatetime)
                .HasColumnType("datetime")
                .HasColumnName("STATUSCHANGEDDATETIME");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Party).WithOne(p => p.ParBusiness)
                .HasForeignKey<ParBusiness>(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_BUSINESS_PARTYID");
        });

        modelBuilder.Entity<ParBusinessdocument>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Businessdocumentno });

            entity.ToTable("PAR_BUSINESSDOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_PAR_BUSINESSDOCUMENT");
                    tb.HasTrigger("audins_PAR_BUSINESSDOCUMENT");
                    tb.HasTrigger("audupd_PAR_BUSINESSDOCUMENT");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Businessdocumentno).HasColumnName("BUSINESSDOCUMENTNO");
            entity.Property(e => e.Correspondenceinid).HasColumnName("CORRESPONDENCEINID");
            entity.Property(e => e.Dateprocessed)
                .HasColumnType("datetime")
                .HasColumnName("DATEPROCESSED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Portalcorrooutguid).HasColumnName("PORTALCORROOUTGUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Correspondencein).WithMany(p => p.ParBusinessdocuments)
                .HasForeignKey(d => d.Correspondenceinid)
                .HasConstraintName("FK_PAR_BUSINESSDOCUMENT_CORRESPONDENCEINID");

            entity.HasOne(d => d.Party).WithMany(p => p.ParBusinessdocuments)
                .HasForeignKey(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_BUSINESSDOCUMENT_PARTYID");
        });

        modelBuilder.Entity<ParBusinesspermission>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Permissionno });

            entity.ToTable("PAR_BUSINESSPERMISSION", tb =>
                {
                    tb.HasTrigger("auddel_PAR_BUSINESSPERMISSION");
                    tb.HasTrigger("audins_PAR_BUSINESSPERMISSION");
                    tb.HasTrigger("audupd_PAR_BUSINESSPERMISSION");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Permissionno).HasColumnName("PERMISSIONNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Permissiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSIONTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Party).WithMany(p => p.ParBusinesspermissions)
                .HasForeignKey(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_BUSINESSPERMISSION_PARTYID");
        });

        modelBuilder.Entity<ParBusinessprovider>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Providerno });

            entity.ToTable("PAR_BUSINESSPROVIDER", tb =>
                {
                    tb.HasTrigger("auddel_PAR_BUSINESSPROVIDER");
                    tb.HasTrigger("audins_PAR_BUSINESSPROVIDER");
                    tb.HasTrigger("audupd_PAR_BUSINESSPROVIDER");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Providerno).HasColumnName("PROVIDERNO");
            entity.Property(e => e.Datetimelinked)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMELINKED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Providerid).HasColumnName("PROVIDERID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Party).WithMany(p => p.ParBusinessproviders)
                .HasForeignKey(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_BUSINESSPROVIDER_PARTYID");

            entity.HasOne(d => d.Provider).WithMany(p => p.ParBusinessproviders)
                .HasForeignKey(d => d.Providerid)
                .HasConstraintName("FK_PAR_BUSINESSPROVIDER_PROVIDERID");
        });

        modelBuilder.Entity<ParContact>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Locationno, e.Contactno });

            entity.ToTable("PAR_CONTACT", tb =>
                {
                    tb.HasTrigger("auddel_PAR_CONTACT");
                    tb.HasTrigger("audins_PAR_CONTACT");
                    tb.HasTrigger("audupd_PAR_CONTACT");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Locationno).HasColumnName("LOCATIONNO");
            entity.Property(e => e.Contactno).HasColumnName("CONTACTNO");
            entity.Property(e => e.Contactname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CONTACTNAME");
            entity.Property(e => e.Contacttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTACTTYPE");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Fax)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FAX");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Mobilephone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("MOBILEPHONE");
            entity.Property(e => e.Phone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.Primarycontact).HasColumnName("PRIMARYCONTACT");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Workphone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("WORKPHONE");

            entity.HasOne(d => d.Party).WithMany(p => p.ParContacts)
                .HasForeignKey(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_CONTACT_PARTYID");

            entity.HasOne(d => d.ParLocation).WithMany(p => p.ParContacts)
                .HasForeignKey(d => new { d.Partyid, d.Locationno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_CONTACT_LOCATIONNO");
        });

        modelBuilder.Entity<ParContacthistory>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Locationno, e.Contactno, e.Contacthistoryno });

            entity.ToTable("PAR_CONTACTHISTORY", tb =>
                {
                    tb.HasTrigger("auddel_PAR_CONTACTHISTORY");
                    tb.HasTrigger("audins_PAR_CONTACTHISTORY");
                    tb.HasTrigger("audupd_PAR_CONTACTHISTORY");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Locationno).HasColumnName("LOCATIONNO");
            entity.Property(e => e.Contactno).HasColumnName("CONTACTNO");
            entity.Property(e => e.Contacthistoryno).HasColumnName("CONTACTHISTORYNO");
            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Contactname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CONTACTNAME");
            entity.Property(e => e.Datechanged)
                .HasColumnType("datetime")
                .HasColumnName("DATECHANGED");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Mobilephone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("MOBILEPHONE");
            entity.Property(e => e.Phone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Workphone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("WORKPHONE");

            entity.HasOne(d => d.ChangedbyNavigation).WithMany(p => p.ParContacthistories)
                .HasForeignKey(d => d.Changedby)
                .HasConstraintName("FK_PAR_CONTACTHISTORY_CHANGEDBY");

            entity.HasOne(d => d.ParContact).WithMany(p => p.ParContacthistories)
                .HasForeignKey(d => new { d.Partyid, d.Locationno, d.Contactno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_CONTACTHISTORY_LOCATIONNO_CONTACTNO");
        });

        modelBuilder.Entity<ParCorrespondencein>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Correspondenceinno });

            entity.ToTable("PAR_CORRESPONDENCEIN", tb =>
                {
                    tb.HasTrigger("auddel_PAR_CORRESPONDENCEIN");
                    tb.HasTrigger("audins_PAR_CORRESPONDENCEIN");
                    tb.HasTrigger("audupd_PAR_CORRESPONDENCEIN");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Correspondenceinno).HasColumnName("CORRESPONDENCEINNO");
            entity.Property(e => e.Correspondenceinid).HasColumnName("CORRESPONDENCEINID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Correspondencein).WithMany(p => p.ParCorrespondenceins)
                .HasForeignKey(d => d.Correspondenceinid)
                .HasConstraintName("FK_PAR_CORRESPONDENCEIN_CORRESPONDENCEINID");

            entity.HasOne(d => d.Party).WithMany(p => p.ParCorrespondenceins)
                .HasForeignKey(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_CORRESPONDENCEIN_PARTYID");
        });

        modelBuilder.Entity<ParEmployee>(entity =>
        {
            entity.HasKey(e => e.Partyid);

            entity.ToTable("PAR_EMPLOYEE", tb =>
                {
                    tb.HasTrigger("auddel_PAR_EMPLOYEE");
                    tb.HasTrigger("audins_PAR_EMPLOYEE");
                    tb.HasTrigger("audupd_PAR_EMPLOYEE");
                });

            entity.HasIndex(e => e.Employeenumber, "IDX_PAR_EMPLOPYEE_EMPNUM");

            entity.Property(e => e.Partyid)
                .ValueGeneratedNever()
                .HasColumnName("PARTYID");
            entity.Property(e => e.Datedeceased)
                .HasColumnType("datetime")
                .HasColumnName("DATEDECEASED");
            entity.Property(e => e.Deceased).HasColumnName("DECEASED");
            entity.Property(e => e.Employeenumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEENUMBER");
            entity.Property(e => e.Employmentenddate)
                .HasColumnType("datetime")
                .HasColumnName("EMPLOYMENTENDDATE");
            entity.Property(e => e.Employmentendreason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EMPLOYMENTENDREASON");
            entity.Property(e => e.Employmentstartdate)
                .HasColumnType("datetime")
                .HasColumnName("EMPLOYMENTSTARTDATE");
            entity.Property(e => e.Exemployee).HasColumnName("EXEMPLOYEE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Overridehr).HasColumnName("OVERRIDEHR");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Party).WithOne(p => p.ParEmployee)
                .HasForeignKey<ParEmployee>(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_EMPLOYEE_PARTYID");
        });

        modelBuilder.Entity<ParEmployeeSa>(entity =>
        {
            entity.HasKey(e => e.Partyid);

            entity.ToTable("PAR_EMPLOYEE_SA", tb =>
                {
                    tb.HasTrigger("auddel_PAR_EMPLOYEE_SA");
                    tb.HasTrigger("audins_PAR_EMPLOYEE_SA");
                    tb.HasTrigger("audupd_PAR_EMPLOYEE_SA");
                });

            entity.Property(e => e.Partyid)
                .ValueGeneratedNever()
                .HasColumnName("PARTYID");
            entity.Property(e => e.Countryofbirth)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRYOFBIRTH");
            entity.Property(e => e.Countryofbirthcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRYOFBIRTHCODETYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Language)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LANGUAGE");
            entity.Property(e => e.Languagecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LANGUAGECODETYPE");
            entity.Property(e => e.Niismember)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIISMEMBER");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Party).WithOne(p => p.ParEmployeeSa)
                .HasForeignKey<ParEmployeeSa>(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_EMPLOYEE_SA_PARTYID");
        });

        modelBuilder.Entity<ParEmployeeX>(entity =>
        {
            entity.HasKey(e => e.Partyid);

            entity.ToTable("PAR_EMPLOYEE_X", tb =>
                {
                    tb.HasTrigger("auddel_PAR_EMPLOYEE_X");
                    tb.HasTrigger("audins_PAR_EMPLOYEE_X");
                    tb.HasTrigger("audupd_PAR_EMPLOYEE_X");
                });

            entity.Property(e => e.Partyid)
                .ValueGeneratedNever()
                .HasColumnName("PARTYID");
            entity.Property(e => e.Claimprefix)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("CLAIMPREFIX");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Lastclaimsuffix).HasColumnName("LASTCLAIMSUFFIX");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Superannuationnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUPERANNUATIONNUMBER");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Party).WithOne(p => p.ParEmployeeX)
                .HasForeignKey<ParEmployeeX>(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_EMPLOYEE_X_PAR_EMPLOYEE");
        });

        modelBuilder.Entity<ParEmployeenamehistory>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Employeenamehistoryno });

            entity.ToTable("PAR_EMPLOYEENAMEHISTORY", tb =>
                {
                    tb.HasTrigger("auddel_PAR_EMPLOYEENAMEHISTORY");
                    tb.HasTrigger("audins_PAR_EMPLOYEENAMEHISTORY");
                    tb.HasTrigger("audupd_PAR_EMPLOYEENAMEHISTORY");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Employeenamehistoryno).HasColumnName("EMPLOYEENAMEHISTORYNO");
            entity.Property(e => e.Datenamechanged)
                .HasColumnType("datetime")
                .HasColumnName("DATENAMECHANGED");
            entity.Property(e => e.Employeenumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEENUMBER");
            entity.Property(e => e.Familyname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAMILYNAME");
            entity.Property(e => e.Givennames)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GIVENNAMES");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Middlenames)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MIDDLENAMES");
            entity.Property(e => e.Namechangereason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NAMECHANGEREASON ");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Party).WithMany(p => p.ParEmployeenamehistories)
                .HasForeignKey(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_EMPLOYEENAMEHISTORY_PARTYID");
        });

        modelBuilder.Entity<ParEmployeenumberhistoryX>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Historyno });

            entity.ToTable("PAR_EMPLOYEENUMBERHISTORY_X", tb =>
                {
                    tb.HasTrigger("auddel_PAR_EMPLOYEENUMBERHISTO");
                    tb.HasTrigger("audins_PAR_EMPLOYEENUMBERHISTO");
                    tb.HasTrigger("audupd_PAR_EMPLOYEENUMBERHISTO");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Historyno).HasColumnName("HISTORYNO");
            entity.Property(e => e.Employeenumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEENUMBER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Numberchangereason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NUMBERCHANGEREASON ");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Party).WithMany(p => p.ParEmployeenumberhistoryXes)
                .HasForeignKey(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_EMPLOYEENUMBERHISTORY_X_PARTYID");
        });

        modelBuilder.Entity<ParFinance>(entity =>
        {
            entity.HasKey(e => e.Partyid);

            entity.ToTable("PAR_FINANCE", tb =>
                {
                    tb.HasTrigger("auddel_PAR_FINANCE");
                    tb.HasTrigger("audins_PAR_FINANCE");
                    tb.HasTrigger("audupd_PAR_FINANCE");
                });

            entity.Property(e => e.Partyid)
                .ValueGeneratedNever()
                .HasColumnName("PARTYID");
            entity.Property(e => e.Approvedvendor).HasColumnName("APPROVEDVENDOR");
            entity.Property(e => e.Australianresident).HasColumnName("AUSTRALIANRESIDENT");
            entity.Property(e => e.Authoriseduserid).HasColumnName("AUTHORISEDUSERID");
            entity.Property(e => e.Comprecipientpaygapplies).HasColumnName("COMPRECIPIENTPAYGAPPLIES");
            entity.Property(e => e.Dateauthorised)
                .HasColumnType("datetime")
                .HasColumnName("DATEAUTHORISED");
            entity.Property(e => e.Financialstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FINANCIALSTATUS");
            entity.Property(e => e.Fullmedicareexemption).HasColumnName("FULLMEDICAREEXEMPTION");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Noabnwithholdingexemption).HasColumnName("NOABNWITHHOLDINGEXEMPTION");
            entity.Property(e => e.Paygeffectivedate)
                .HasColumnType("datetime")
                .HasColumnName("PAYGEFFECTIVEDATE");
            entity.Property(e => e.Paygpayee).HasColumnName("PAYGPAYEE");
            entity.Property(e => e.Paygtaxscale)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYGTAXSCALE");
            entity.Property(e => e.Paygvariation).HasColumnName("PAYGVARIATION");
            entity.Property(e => e.Paygweeklyamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("PAYGWEEKLYAMOUNT");
            entity.Property(e => e.Paygweeklypercent)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("PAYGWEEKLYPERCENT");
            entity.Property(e => e.Paymentterms).HasColumnName("PAYMENTTERMS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Smallbusiness).HasColumnName("SMALLBUSINESS");
            entity.Property(e => e.Taxfilenumber)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("TAXFILENUMBER");
            entity.Property(e => e.Taxfreethreshold).HasColumnName("TAXFREETHRESHOLD");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Authoriseduser).WithMany(p => p.ParFinances)
                .HasForeignKey(d => d.Authoriseduserid)
                .HasConstraintName("FK_PAR_FINANCE_AUTHORISEDUSERID");

            entity.HasOne(d => d.Party).WithOne(p => p.ParFinance)
                .HasForeignKey<ParFinance>(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_FINANCE_PARTYID");
        });

        modelBuilder.Entity<ParFinstatushistory>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Finstatushistoryno });

            entity.ToTable("PAR_FINSTATUSHISTORY", tb =>
                {
                    tb.HasTrigger("auddel_PAR_FINSTATUSHISTORY");
                    tb.HasTrigger("audins_PAR_FINSTATUSHISTORY");
                    tb.HasTrigger("audupd_PAR_FINSTATUSHISTORY");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Finstatushistoryno).HasColumnName("FINSTATUSHISTORYNO");
            entity.Property(e => e.Financialstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FINANCIALSTATUS");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Userid).HasColumnName("USERID");

            entity.HasOne(d => d.Party).WithMany(p => p.ParFinstatushistories)
                .HasForeignKey(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_FINSTATUSHISTORY_PARTYID");

            entity.HasOne(d => d.User).WithMany(p => p.ParFinstatushistories)
                .HasForeignKey(d => d.Userid)
                .HasConstraintName("FK_PAR_FINSTATUSHISTORY_SEC_USER");
        });

        modelBuilder.Entity<ParLocation>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Locationno });

            entity.ToTable("PAR_LOCATION", tb =>
                {
                    tb.HasTrigger("auddel_PAR_LOCATION");
                    tb.HasTrigger("audins_PAR_LOCATION");
                    tb.HasTrigger("audupd_PAR_LOCATION");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Locationno).HasColumnName("LOCATIONNO");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Postaladdressline1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTALADDRESSLINE1");
            entity.Property(e => e.Postaladdressline2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTALADDRESSLINE2");
            entity.Property(e => e.Postaladdressline3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTALADDRESSLINE3");
            entity.Property(e => e.Postalcountry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("POSTALCOUNTRY");
            entity.Property(e => e.Postalinternational).HasColumnName("POSTALINTERNATIONAL");
            entity.Property(e => e.Postalpostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("POSTALPOSTCODE");
            entity.Property(e => e.Postalsameasstreet).HasColumnName("POSTALSAMEASSTREET");
            entity.Property(e => e.Postalstate)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("POSTALSTATE");
            entity.Property(e => e.Postalsuburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("POSTALSUBURB");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Streetaddressline1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STREETADDRESSLINE1");
            entity.Property(e => e.Streetaddressline2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STREETADDRESSLINE2");
            entity.Property(e => e.Streetaddressline3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STREETADDRESSLINE3");
            entity.Property(e => e.Streetcountry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STREETCOUNTRY");
            entity.Property(e => e.Streetinternational).HasColumnName("STREETINTERNATIONAL");
            entity.Property(e => e.Streetpostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("STREETPOSTCODE");
            entity.Property(e => e.Streetsameaspostal).HasColumnName("STREETSAMEASPOSTAL");
            entity.Property(e => e.Streetstate)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STREETSTATE");
            entity.Property(e => e.Streetsuburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("STREETSUBURB");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Party).WithMany(p => p.ParLocations)
                .HasForeignKey(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_LOCATION_PARTYID");
        });

        modelBuilder.Entity<ParLocationhistory>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Locationno, e.Locationhistoryno });

            entity.ToTable("PAR_LOCATIONHISTORY", tb =>
                {
                    tb.HasTrigger("auddel_PAR_LOCATIONHISTORY");
                    tb.HasTrigger("audins_PAR_LOCATIONHISTORY");
                    tb.HasTrigger("audupd_PAR_LOCATIONHISTORY");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Locationno).HasColumnName("LOCATIONNO");
            entity.Property(e => e.Locationhistoryno).HasColumnName("LOCATIONHISTORYNO");
            entity.Property(e => e.Addressline1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE1");
            entity.Property(e => e.Addressline2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE2");
            entity.Property(e => e.Addressline3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE3");
            entity.Property(e => e.Addresstype).HasColumnName("ADDRESSTYPE");
            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Country)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Datechanged)
                .HasColumnType("datetime")
                .HasColumnName("DATECHANGED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.International).HasColumnName("INTERNATIONAL");
            entity.Property(e => e.Postcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.ChangedbyNavigation).WithMany(p => p.ParLocationhistories)
                .HasForeignKey(d => d.Changedby)
                .HasConstraintName("FK_PAR_LOCATIONHISTORY_CHANGEDBY");

            entity.HasOne(d => d.ParLocation).WithMany(p => p.ParLocationhistories)
                .HasForeignKey(d => new { d.Partyid, d.Locationno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_LOCATIONHISTORY_LOCATIONNO");
        });

        modelBuilder.Entity<ParNumber>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Numberno }).HasName("PK_PAR_NUMBER_PARTYID");

            entity.ToTable("PAR_NUMBER", tb =>
                {
                    tb.HasTrigger("auddel_PAR_NUMBER");
                    tb.HasTrigger("audins_PAR_NUMBER");
                    tb.HasTrigger("audupd_PAR_NUMBER");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Numberno).HasColumnName("NUMBERNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Number)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUMBER");
            entity.Property(e => e.Numbertype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NUMBERTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Party).WithMany(p => p.ParNumbers)
                .HasForeignKey(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_NUMBER_PARTYID");
        });

        modelBuilder.Entity<ParParty>(entity =>
        {
            entity.HasKey(e => e.Partyid).HasName("PK_PAR_PARTY_PARTYID");

            entity.ToTable("PAR_PARTY", tb =>
                {
                    tb.HasTrigger("auddel_PAR_PARTY");
                    tb.HasTrigger("audins_PAR_PARTY");
                    tb.HasTrigger("audupd_PAR_PARTY");
                });

            entity.HasIndex(e => e.Dateofbirth, "IDX_PAR_PARTY_DOB");

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Abn)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ABN");
            entity.Property(e => e.Acn)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("ACN");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Allowemailcorrespondence).HasColumnName("ALLOWEMAILCORRESPONDENCE");
            entity.Property(e => e.Companyname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Countrycodetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRYCODETYPE");
            entity.Property(e => e.Countryofbirth)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRYOFBIRTH");
            entity.Property(e => e.Dateofbirth)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFBIRTH");
            entity.Property(e => e.Familyname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAMILYNAME");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GENDER");
            entity.Property(e => e.Givennames)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GIVENNAMES");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Identifiedasaboriginal).HasColumnName("IDENTIFIEDASABORIGINAL");
            entity.Property(e => e.Identifiedastsislander).HasColumnName("IDENTIFIEDASTSISLANDER");
            entity.Property(e => e.Interpreterrequired).HasColumnName("INTERPRETERREQUIRED");
            entity.Property(e => e.Language)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LANGUAGE");
            entity.Property(e => e.Languagecodetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LANGUAGECODETYPE");
            entity.Property(e => e.Maritalstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MARITALSTATUS");
            entity.Property(e => e.Middlenames)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MIDDLENAMES");
            entity.Property(e => e.Namechangereason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NAMECHANGEREASON");
            entity.Property(e => e.Numberofchilddependants).HasColumnName("NUMBEROFCHILDDEPENDANTS");
            entity.Property(e => e.Numberofotherdependants).HasColumnName("NUMBEROFOTHERDEPENDANTS");
            entity.Property(e => e.Otherpreviousnames)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OTHERPREVIOUSNAMES");
            entity.Property(e => e.Partytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PARTYTYPE");
            entity.Property(e => e.Preferredcontactmethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PREFERREDCONTACTMETHOD");
            entity.Property(e => e.Preferredname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PREFERREDNAME");
            entity.Property(e => e.Providername)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PROVIDERNAME");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Specialcommunicationneeds)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SPECIALCOMMUNICATIONNEEDS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Title)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TITLE");
        });

        modelBuilder.Entity<ParPartyX>(entity =>
        {
            entity.HasKey(e => e.Partyid);

            entity.ToTable("PAR_PARTY_X", tb =>
                {
                    tb.HasTrigger("auddel_PAR_PARTY_X");
                    tb.HasTrigger("audins_PAR_PARTY_X");
                    tb.HasTrigger("audupd_PAR_PARTY_X");
                });

            entity.Property(e => e.Partyid)
                .ValueGeneratedNever()
                .HasColumnName("PARTYID");
            entity.Property(e => e.Eftname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("EFTNAME");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Masterpiecevendortype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MASTERPIECEVENDORTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Party).WithOne(p => p.ParPartyX)
                .HasForeignKey<ParPartyX>(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_PARTY_X_PARTYID");
        });

        modelBuilder.Entity<ParProvider>(entity =>
        {
            entity.HasKey(e => e.Partyid).HasName("PK_PAR_PROVIDER_PARTYID");

            entity.ToTable("PAR_PROVIDER", tb =>
                {
                    tb.HasTrigger("auddel_PAR_PROVIDER");
                    tb.HasTrigger("audins_PAR_PROVIDER");
                    tb.HasTrigger("audupd_PAR_PROVIDER");
                });

            entity.Property(e => e.Partyid)
                .ValueGeneratedNever()
                .HasColumnName("PARTYID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Specialrequirements)
                .IsUnicode(false)
                .HasColumnName("SPECIALREQUIREMENTS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Vendornumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VENDORNUMBER");

            entity.HasOne(d => d.Party).WithOne(p => p.ParProvider)
                .HasForeignKey<ParProvider>(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_PROVIDER_PARTYID");
        });

        modelBuilder.Entity<ParProvidernumber>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Providernumberno });

            entity.ToTable("PAR_PROVIDERNUMBER", tb =>
                {
                    tb.HasTrigger("auddel_PAR_PROVIDERNUMBER");
                    tb.HasTrigger("audins_PAR_PROVIDERNUMBER");
                    tb.HasTrigger("audupd_PAR_PROVIDERNUMBER");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Providernumberno).HasColumnName("PROVIDERNUMBERNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Providernumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PROVIDERNUMBER");
            entity.Property(e => e.Providernumbertype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROVIDERNUMBERTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Party).WithMany(p => p.ParProvidernumbers)
                .HasForeignKey(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_PROVIDERNUMBER_PROVIDERID");
        });

        modelBuilder.Entity<ParProvidertype>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Providertypeno }).HasName("PK_PAR_PROVIDERTYPE_PARTYID");

            entity.ToTable("PAR_PROVIDERTYPE", tb =>
                {
                    tb.HasTrigger("auddel_PAR_PROVIDERTYPE");
                    tb.HasTrigger("audins_PAR_PROVIDERTYPE");
                    tb.HasTrigger("audupd_PAR_PROVIDERTYPE");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Providertypeno).HasColumnName("PROVIDERTYPENO");
            entity.Property(e => e.Dateeffectivefrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEEFFECTIVEFROM");
            entity.Property(e => e.Dateeffectiveto)
                .HasColumnType("datetime")
                .HasColumnName("DATEEFFECTIVETO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Primaryprovidertype).HasColumnName("PRIMARYPROVIDERTYPE");
            entity.Property(e => e.Providertype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROVIDERTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Party).WithMany(p => p.ParProvidertypes)
                .HasForeignKey(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_PROVIDERTYPE_PARTYID");
        });

        modelBuilder.Entity<ParProvidertypenumber>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Providertypeno, e.Providertypenumberno }).HasName("PK_PAR_PROVIDERTYPENUMBER_PARTYID");

            entity.ToTable("PAR_PROVIDERTYPENUMBER", tb =>
                {
                    tb.HasTrigger("auddel_PAR_PROVIDERTYPENUMBER");
                    tb.HasTrigger("audins_PAR_PROVIDERTYPENUMBER");
                    tb.HasTrigger("audupd_PAR_PROVIDERTYPENUMBER");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Providertypeno).HasColumnName("PROVIDERTYPENO");
            entity.Property(e => e.Providertypenumberno).HasColumnName("PROVIDERTYPENUMBERNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Number)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUMBER");
            entity.Property(e => e.Numbertype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NUMBERTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Party).WithMany(p => p.ParProvidertypenumbers)
                .HasForeignKey(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_PROVIDERTYPENUMBER_PARTYID");

            entity.HasOne(d => d.ParProvidertype).WithMany(p => p.ParProvidertypenumbers)
                .HasForeignKey(d => new { d.Partyid, d.Providertypeno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_PROVIDERTYPENUMBER_PROVIDERTYPENO");
        });

        modelBuilder.Entity<ParSpecialtyX>(entity =>
        {
            entity.HasKey(e => new { e.Partyid, e.Specialtyno });

            entity.ToTable("PAR_SPECIALTY_X", tb =>
                {
                    tb.HasTrigger("auddel_PAR_SPECIALTY_X");
                    tb.HasTrigger("audins_PAR_SPECIALTY_X");
                    tb.HasTrigger("audupd_PAR_SPECIALTY_X");
                });

            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Specialtyno).HasColumnName("SPECIALTYNO");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Specialty)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SPECIALTY");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Party).WithMany(p => p.ParSpecialtyXes)
                .HasForeignKey(d => d.Partyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAR_SPECIALTY_X_PARTYID");
        });

        modelBuilder.Entity<PayComp>(entity =>
        {
            entity.HasKey(e => e.Paymentid);

            entity.ToTable("PAY_COMP", tb =>
                {
                    tb.HasTrigger("auddel_PAY_COMP");
                    tb.HasTrigger("audins_PAY_COMP");
                    tb.HasTrigger("audupd_PAY_COMP");
                });

            entity.Property(e => e.Paymentid)
                .ValueGeneratedNever()
                .HasColumnName("PAYMENTID");
            entity.Property(e => e.Applysuitabledutieshours).HasColumnName("APPLYSUITABLEDUTIESHOURS");
            entity.Property(e => e.Calculatedcomppayable)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("CALCULATEDCOMPPAYABLE");
            entity.Property(e => e.Compensationdays).HasColumnName("COMPENSATIONDAYS");
            entity.Property(e => e.Compensationfromdate)
                .HasColumnType("datetime")
                .HasColumnName("COMPENSATIONFROMDATE");
            entity.Property(e => e.Compensationtodate)
                .HasColumnType("datetime")
                .HasColumnName("COMPENSATIONTODATE");
            entity.Property(e => e.Compensationtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMPENSATIONTYPE");
            entity.Property(e => e.Compensationweeks).HasColumnName("COMPENSATIONWEEKS");
            entity.Property(e => e.Datefinancialyearupdated)
                .HasColumnType("datetime")
                .HasColumnName("DATEFINANCIALYEARUPDATED");
            entity.Property(e => e.Daterecurrencescompleted)
                .HasColumnType("datetime")
                .HasColumnName("DATERECURRENCESCOMPLETED");
            entity.Property(e => e.Dayslost).HasColumnName("DAYSLOST");
            entity.Property(e => e.Financialyearending).HasColumnName("FINANCIALYEARENDING");
            entity.Property(e => e.Fullshiftslost).HasColumnName("FULLSHIFTSLOST");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hourslost)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("HOURSLOST");
            entity.Property(e => e.Normaldaysperweek).HasColumnName("NORMALDAYSPERWEEK");
            entity.Property(e => e.Normalhoursperweek)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("NORMALHOURSPERWEEK");
            entity.Property(e => e.Overridecalculation).HasColumnName("OVERRIDECALCULATION");
            entity.Property(e => e.Overridingamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OVERRIDINGAMOUNT");
            entity.Property(e => e.Paygwithheldamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("PAYGWITHHELDAMOUNT");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORY");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Recurrencecomplete).HasColumnName("RECURRENCECOMPLETE");
            entity.Property(e => e.Recurrentpaymentsterminatedbyid).HasColumnName("RECURRENTPAYMENTSTERMINATEDBYID");
            entity.Property(e => e.Recurringauthorised).HasColumnName("RECURRINGAUTHORISED");
            entity.Property(e => e.Recurringauthorisedbyid).HasColumnName("RECURRINGAUTHORISEDBYID");
            entity.Property(e => e.Recurringdateauthorised)
                .HasColumnType("datetime")
                .HasColumnName("RECURRINGDATEAUTHORISED");
            entity.Property(e => e.Recurringfromdate)
                .HasColumnType("datetime")
                .HasColumnName("RECURRINGFROMDATE");
            entity.Property(e => e.Recurringpayment).HasColumnName("RECURRINGPAYMENT");
            entity.Property(e => e.Recurringpaymentid).HasColumnName("RECURRINGPAYMENTID");
            entity.Property(e => e.Recurringpreauthorised).HasColumnName("RECURRINGPREAUTHORISED");
            entity.Property(e => e.Recurringweeks).HasColumnName("RECURRINGWEEKS");
            entity.Property(e => e.Rostereddaysinperiod).HasColumnName("ROSTEREDDAYSINPERIOD");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Totalamountpayable)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("TOTALAMOUNTPAYABLE");

            entity.HasOne(d => d.Payment).WithOne(p => p.PayComp)
                .HasForeignKey<PayComp>(d => d.Paymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_COMP_PAYMENTID");

            entity.HasOne(d => d.RecurringpaymentNavigation).WithMany(p => p.InverseRecurringpaymentNavigation)
                .HasForeignKey(d => d.Recurringpaymentid)
                .HasConstraintName("FK_PAY_COMP_RECURRINGPAYMENTID");
        });

        modelBuilder.Entity<PayCompSa>(entity =>
        {
            entity.HasKey(e => e.Paymentid);

            entity.ToTable("PAY_COMP_SA", tb =>
                {
                    tb.HasTrigger("WF_PAY_COMP_SA");
                    tb.HasTrigger("auddel_PAY_COMP_SA");
                    tb.HasTrigger("audins_PAY_COMP_SA");
                    tb.HasTrigger("audupd_PAY_COMP_SA");
                });

            entity.HasIndex(e => e.Guid, "IDX_PAY_COMP_SA_GUIDWEEK");

            entity.Property(e => e.Paymentid)
                .ValueGeneratedNever()
                .HasColumnName("PAYMENTID");
            entity.Property(e => e.Calculatedamountpayable)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("CALCULATEDAMOUNTPAYABLE");
            entity.Property(e => e.Calculatededidayslost)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("CALCULATEDEDIDAYSLOST");
            entity.Property(e => e.Cappednotionalweeklyearnings)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("CAPPEDNOTIONALWEEKLYEARNINGS");
            entity.Property(e => e.Compensationrate).HasColumnName("COMPENSATIONRATE");
            entity.Property(e => e.Designatedearnings)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("DESIGNATEDEARNINGS");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Impairmentpercentage).HasColumnName("IMPAIRMENTPERCENTAGE");
            entity.Property(e => e.Maxnweamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("MAXNWEAMOUNT");
            entity.Property(e => e.Maxnweapplied).HasColumnName("MAXNWEAPPLIED");
            entity.Property(e => e.Minimumwage)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("MINIMUMWAGE");
            entity.Property(e => e.Minimumwageapplied).HasColumnName("MINIMUMWAGEAPPLIED");
            entity.Property(e => e.Otherearnings)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHEREARNINGS");
            entity.Property(e => e.Otherhoursemployed)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHERHOURSEMPLOYED");
            entity.Property(e => e.Otherhourslost)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHERHOURSLOST");
            entity.Property(e => e.Othernormalhoursperweek)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHERNORMALHOURSPERWEEK");
            entity.Property(e => e.Parttimeratio)
                .HasColumnType("numeric(10, 5)")
                .HasColumnName("PARTTIMERATIO");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reductionofweeklypayment)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("REDUCTIONOFWEEKLYPAYMENT");
            entity.Property(e => e.Seriousinjury).HasColumnName("SERIOUSINJURY");
            entity.Property(e => e.Surgeryfromdate)
                .HasColumnType("datetime")
                .HasColumnName("SURGERYFROMDATE");
            entity.Property(e => e.Thisearnings)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("THISEARNINGS");
            entity.Property(e => e.Thishoursemployed)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("THISHOURSEMPLOYED");
            entity.Property(e => e.Thishourslost)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("THISHOURSLOST");
            entity.Property(e => e.Thisnormalhoursperweek)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("THISNORMALHOURSPERWEEK");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Topupamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("TOPUPAMOUNT");
            entity.Property(e => e.Topuprequired).HasColumnName("TOPUPREQUIRED");
            entity.Property(e => e.Uncappednotionalweeklyearnings)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("UNCAPPEDNOTIONALWEEKLYEARNINGS");
            entity.Property(e => e.Weeklyratio)
                .HasColumnType("numeric(10, 3)")
                .HasColumnName("WEEKLYRATIO");
            entity.Property(e => e.Weeknumber).HasColumnName("WEEKNUMBER");

            entity.HasOne(d => d.Payment).WithOne(p => p.PayCompSa)
                .HasForeignKey<PayCompSa>(d => d.Paymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_COMP_SA_PAYMENTID");
        });

        modelBuilder.Entity<PayCompensationrecipient>(entity =>
        {
            entity.HasKey(e => new { e.Paymentid, e.Compensationrecipientno });

            entity.ToTable("PAY_COMPENSATIONRECIPIENT", tb =>
                {
                    tb.HasTrigger("auddel_PAY_COMPENSATIONRECIPIE");
                    tb.HasTrigger("audins_PAY_COMPENSATIONRECIPIE");
                    tb.HasTrigger("audupd_PAY_COMPENSATIONRECIPIE");
                });

            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Compensationrecipientno).HasColumnName("COMPENSATIONRECIPIENTNO");
            entity.Property(e => e.Amountperpayment)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("AMOUNTPERPAYMENT");
            entity.Property(e => e.Contactno).HasColumnName("CONTACTNO");
            entity.Property(e => e.Datefrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEFROM");
            entity.Property(e => e.Dateto)
                .HasColumnType("datetime")
                .HasColumnName("DATETO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Locationno).HasColumnName("LOCATIONNO");
            entity.Property(e => e.Maxamountperclaim)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("MAXAMOUNTPERCLAIM");
            entity.Property(e => e.Maxamountperpayment)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("MAXAMOUNTPERPAYMENT");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Percentageperpayment)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("PERCENTAGEPERPAYMENT");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Recipientreference)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("RECIPIENTREFERENCE");
            entity.Property(e => e.Recipienttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECIPIENTTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Party).WithMany(p => p.PayCompensationrecipients)
                .HasForeignKey(d => d.Partyid)
                .HasConstraintName("FK_PAY_COMPENSATIONRECIPIENT_PARTYID");

            entity.HasOne(d => d.Payment).WithMany(p => p.PayCompensationrecipients)
                .HasForeignKey(d => d.Paymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_COMPENSATIONRECIPIENT_PAYMENTID");

            entity.HasOne(d => d.ParLocation).WithMany(p => p.PayCompensationrecipients)
                .HasForeignKey(d => new { d.Partyid, d.Locationno })
                .HasConstraintName("FK_PAY_COMPENSATIONRECIPIENT_PARTYLOCATIONNO");

            entity.HasOne(d => d.ParContact).WithMany(p => p.PayCompensationrecipients)
                .HasForeignKey(d => new { d.Partyid, d.Locationno, d.Contactno })
                .HasConstraintName("FK_PAY_COMPENSATIONRECIPIENT_PARTYCONTACTNO");
        });

        modelBuilder.Entity<PayCompitem>(entity =>
        {
            entity.HasKey(e => new { e.Paymentid, e.Itemno });

            entity.ToTable("PAY_COMPITEM", tb =>
                {
                    tb.HasTrigger("auddel_PAY_COMPITEM");
                    tb.HasTrigger("audins_PAY_COMPITEM");
                    tb.HasTrigger("audupd_PAY_COMPITEM");
                });

            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Itemno).HasColumnName("ITEMNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Payment).WithMany(p => p.PayCompitems)
                .HasForeignKey(d => d.Paymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_COMPITEM_PAYMENTID");

            entity.HasOne(d => d.PayItem).WithOne(p => p.PayCompitem)
                .HasForeignKey<PayCompitem>(d => new { d.Paymentid, d.Itemno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_COMPITEM_ITEMNO");
        });

        modelBuilder.Entity<PayCompsuitableduty>(entity =>
        {
            entity.HasKey(e => new { e.Paymentid, e.Compsuitabledutiesno });

            entity.ToTable("PAY_COMPSUITABLEDUTIES", tb =>
                {
                    tb.HasTrigger("auddel_PAY_COMPSUITABLEDUTIES");
                    tb.HasTrigger("audins_PAY_COMPSUITABLEDUTIES");
                    tb.HasTrigger("audupd_PAY_COMPSUITABLEDUTIES");
                });

            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Compsuitabledutiesno).HasColumnName("COMPSUITABLEDUTIESNO");
            entity.Property(e => e.Compensationdate)
                .HasColumnType("datetime")
                .HasColumnName("COMPENSATIONDATE");
            entity.Property(e => e.Earnings)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("EARNINGS");
            entity.Property(e => e.Fullshiftslost).HasColumnName("FULLSHIFTSLOST");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hoursemployed)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("HOURSEMPLOYED");
            entity.Property(e => e.Hourslost)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("HOURSLOST");
            entity.Property(e => e.Otherleavehours)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("OTHERLEAVEHOURS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Payment).WithMany(p => p.PayCompsuitableduties)
                .HasForeignKey(d => d.Paymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_COMPSUITABLEDUTIES_PAYMENTID");
        });

        modelBuilder.Entity<PayDraft>(entity =>
        {
            entity.HasKey(e => e.Paymentid);

            entity.ToTable("PAY_DRAFT", tb =>
                {
                    tb.HasTrigger("auddel_PAY_DRAFT");
                    tb.HasTrigger("audins_PAY_DRAFT");
                    tb.HasTrigger("audupd_PAY_DRAFT");
                });

            entity.Property(e => e.Paymentid)
                .ValueGeneratedNever()
                .HasColumnName("PAYMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hasinvoicetobescanned).HasColumnName("HASINVOICETOBESCANNED");
            entity.Property(e => e.Linked).HasColumnName("LINKED");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Portalentrymethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PORTALENTRYMETHOD");
            entity.Property(e => e.Portalguid).HasColumnName("PORTALGUID");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REASON");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Rejected).HasColumnName("REJECTED");
            entity.Property(e => e.Rejectedbyid).HasColumnName("REJECTEDBYID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Payment).WithOne(p => p.PayDraft)
                .HasForeignKey<PayDraft>(d => d.Paymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_DRAFT_PAYMENTID");

            entity.HasOne(d => d.Rejectedby).WithMany(p => p.PayDrafts)
                .HasForeignKey(d => d.Rejectedbyid)
                .HasConstraintName("FK_PAY_DRAFT_REJECTEDBY");
        });

        modelBuilder.Entity<PayDraftitem>(entity =>
        {
            entity.HasKey(e => new { e.Paymentid, e.Itemno });

            entity.ToTable("PAY_DRAFTITEM", tb =>
                {
                    tb.HasTrigger("auddel_PAY_DRAFTITEM");
                    tb.HasTrigger("audins_PAY_DRAFTITEM");
                    tb.HasTrigger("audupd_PAY_DRAFTITEM");
                });

            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Itemno).HasColumnName("ITEMNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Portalguid).HasColumnName("PORTALGUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Serviceproviderabn)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("SERVICEPROVIDERABN");
            entity.Property(e => e.Serviceprovidername)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SERVICEPROVIDERNAME");
            entity.Property(e => e.Serviceprovidervendornumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SERVICEPROVIDERVENDORNUMBER");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Payment).WithMany(p => p.PayDraftitems)
                .HasForeignKey(d => d.Paymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_DRAFTITEM_PAYMENTID");

            entity.HasOne(d => d.PayItem).WithOne(p => p.PayDraftitem)
                .HasForeignKey<PayDraftitem>(d => new { d.Paymentid, d.Itemno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_DRAFTITEM_ITEMNO");
        });

        modelBuilder.Entity<PayDraftpayee>(entity =>
        {
            entity.HasKey(e => new { e.Paymentid, e.Payeeno });

            entity.ToTable("PAY_DRAFTPAYEE", tb =>
                {
                    tb.HasTrigger("auddel_PAY_DRAFTPAYEE");
                    tb.HasTrigger("audins_PAY_DRAFTPAYEE");
                    tb.HasTrigger("audupd_PAY_DRAFTPAYEE");
                });

            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Payeeno).HasColumnName("PAYEENO");
            entity.Property(e => e.Accountnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACCOUNTNUMBER");
            entity.Property(e => e.Bsb1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BSB1");
            entity.Property(e => e.Bsb2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BSB2");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Portalbusinessguid).HasColumnName("PORTALBUSINESSGUID");
            entity.Property(e => e.Portalguid).HasColumnName("PORTALGUID");
            entity.Property(e => e.Providerabn)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("PROVIDERABN");
            entity.Property(e => e.Providername)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PROVIDERNAME");
            entity.Property(e => e.Providervendornumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PROVIDERVENDORNUMBER");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Payment).WithMany(p => p.PayDraftpayees)
                .HasForeignKey(d => d.Paymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_DRAFTPAYEE_PAYMENTID");

            entity.HasOne(d => d.PayPayee).WithOne(p => p.PayDraftpayee)
                .HasForeignKey<PayDraftpayee>(d => new { d.Paymentid, d.Payeeno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_DRAFTPAYEE_PAYEENO");
        });

        modelBuilder.Entity<PayInsurerreimbursementIn>(entity =>
        {
            entity.HasKey(e => e.Paymentid);

            entity.ToTable("PAY_INSURERREIMBURSEMENT_INS", tb =>
                {
                    tb.HasTrigger("auddel_PAY_INSURERREIMBURSEMEN");
                    tb.HasTrigger("audins_PAY_INSURERREIMBURSEMEN");
                    tb.HasTrigger("audupd_PAY_INSURERREIMBURSEMEN");
                });

            entity.Property(e => e.Paymentid)
                .ValueGeneratedNever()
                .HasColumnName("PAYMENTID");
            entity.Property(e => e.Amountreimbursed)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("AMOUNTREIMBURSED");
            entity.Property(e => e.Datereimbursed)
                .HasColumnType("datetime")
                .HasColumnName("DATEREIMBURSED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Notforreimbursement).HasColumnName("NOTFORREIMBURSEMENT");
            entity.Property(e => e.Paymentisreimbursed).HasColumnName("PAYMENTISREIMBURSED");
            entity.Property(e => e.Recieptnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RECIEPTNUMBER");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reimbursementpaidinfull).HasColumnName("REIMBURSEMENTPAIDINFULL");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Payment).WithOne(p => p.PayInsurerreimbursementIn)
                .HasForeignKey<PayInsurerreimbursementIn>(d => d.Paymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_INSURERREIMBURSEMENT_INS_PAYMENTID");
        });

        modelBuilder.Entity<PayInvoiceitem>(entity =>
        {
            entity.HasKey(e => new { e.Paymentid, e.Itemno });

            entity.ToTable("PAY_INVOICEITEM", tb =>
                {
                    tb.HasTrigger("auddel_PAY_INVOICEITEM");
                    tb.HasTrigger("audins_PAY_INVOICEITEM");
                    tb.HasTrigger("audupd_PAY_INVOICEITEM");
                });

            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Itemno).HasColumnName("ITEMNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Itemdescription)
                .IsUnicode(false)
                .HasColumnName("ITEMDESCRIPTION");
            entity.Property(e => e.Itemnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ITEMNUMBER");
            entity.Property(e => e.Itemnumbersource)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEMNUMBERSOURCE");
            entity.Property(e => e.Paidsurcharge)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PAIDSURCHARGE");
            entity.Property(e => e.Quantity)
                .HasColumnType("numeric(14, 5)")
                .HasColumnName("QUANTITY");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Scheduledamount)
                .HasColumnType("numeric(14, 5)")
                .HasColumnName("SCHEDULEDAMOUNT");
            entity.Property(e => e.Servicedate)
                .HasColumnType("datetime")
                .HasColumnName("SERVICEDATE");
            entity.Property(e => e.Serviceproviderpartyid).HasColumnName("SERVICEPROVIDERPARTYID");
            entity.Property(e => e.Supplierreference)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SUPPLIERREFERENCE");
            entity.Property(e => e.Surcharge)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("SURCHARGE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Variationreason)
                .IsUnicode(false)
                .HasColumnName("VARIATIONREASON");

            entity.HasOne(d => d.Payment).WithMany(p => p.PayInvoiceitems)
                .HasForeignKey(d => d.Paymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_INVOICEITEM_PAYMENTID");

            entity.HasOne(d => d.Serviceproviderparty).WithMany(p => p.PayInvoiceitems)
                .HasForeignKey(d => d.Serviceproviderpartyid)
                .HasConstraintName("FK_PAY_INVOICEITEM_SERVICEPROVIDERPARTYID");

            entity.HasOne(d => d.PayItem).WithOne(p => p.PayInvoiceitem)
                .HasForeignKey<PayInvoiceitem>(d => new { d.Paymentid, d.Itemno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_INVOICEITEM_ITEMNO");
        });

        modelBuilder.Entity<PayInvoiceitemX>(entity =>
        {
            entity.HasKey(e => new { e.Paymentid, e.Itemno });

            entity.ToTable("PAY_INVOICEITEM_X", tb =>
                {
                    tb.HasTrigger("auddel_PAY_INVOICEITEM_X");
                    tb.HasTrigger("audins_PAY_INVOICEITEM_X");
                    tb.HasTrigger("audupd_PAY_INVOICEITEM_X");
                });

            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Itemno).HasColumnName("ITEMNO");
            entity.Property(e => e.Accountnumber)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("ACCOUNTNUMBER");
            entity.Property(e => e.Fundprofileid).HasColumnName("FUNDPROFILEID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Specialty)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SPECIALTY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Fundprofile).WithMany(p => p.PayInvoiceitemXes)
                .HasForeignKey(d => d.Fundprofileid)
                .HasConstraintName("FK_PAY_INVOICEITEM_X_MTP_FUNDPROFILEID");

            entity.HasOne(d => d.PayInvoiceitem).WithOne(p => p.PayInvoiceitemX)
                .HasForeignKey<PayInvoiceitemX>(d => new { d.Paymentid, d.Itemno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_INVOICEITEM_X_INVOICEITEMNO");
        });

        modelBuilder.Entity<PayItem>(entity =>
        {
            entity.HasKey(e => new { e.Paymentid, e.Itemno });

            entity.ToTable("PAY_ITEM", tb =>
                {
                    tb.HasTrigger("auddel_PAY_ITEM");
                    tb.HasTrigger("audins_PAY_ITEM");
                    tb.HasTrigger("audupd_PAY_ITEM");
                });

            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Itemno).HasColumnName("ITEMNO");
            entity.Property(e => e.Accountid).HasColumnName("ACCOUNTID");
            entity.Property(e => e.Estimatecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESTIMATECATEGORY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Itemamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("ITEMAMOUNT");
            entity.Property(e => e.Itemgst)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("ITEMGST");
            entity.Property(e => e.Itemstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEMSTATUS");
            entity.Property(e => e.Itemtotal)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("ITEMTOTAL");
            entity.Property(e => e.Paiditemamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PAIDITEMAMOUNT");
            entity.Property(e => e.Paiditemgst)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PAIDITEMGST");
            entity.Property(e => e.Paiditemtotal)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PAIDITEMTOTAL");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORY");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Taxstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TAXSTATUS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Workcoverreportable).HasColumnName("WORKCOVERREPORTABLE");

            entity.HasOne(d => d.Account).WithMany(p => p.PayItems)
                .HasForeignKey(d => d.Accountid)
                .HasConstraintName("FK_PAY_ITEM_ACCOUNTID");

            entity.HasOne(d => d.Payment).WithMany(p => p.PayItems)
                .HasForeignKey(d => d.Paymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_ITEM_PAYMENTID");
        });

        modelBuilder.Entity<PayItemsubentry>(entity =>
        {
            entity.HasKey(e => new { e.Paymentid, e.Itemno, e.Itemsubentryno });

            entity.ToTable("PAY_ITEMSUBENTRY", tb =>
                {
                    tb.HasTrigger("auddel_PAY_ITEMSUBENTRY");
                    tb.HasTrigger("audins_PAY_ITEMSUBENTRY");
                    tb.HasTrigger("audupd_PAY_ITEMSUBENTRY");
                });

            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Itemno).HasColumnName("ITEMNO");
            entity.Property(e => e.Itemsubentryno).HasColumnName("ITEMSUBENTRYNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Subentryno).HasColumnName("SUBENTRYNO");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Transactionid).HasColumnName("TRANSACTIONID");

            entity.HasOne(d => d.PayItem).WithMany(p => p.PayItemsubentries)
                .HasForeignKey(d => new { d.Paymentid, d.Itemno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_ITEMSUBENTRY_ITEMNO");

            entity.HasOne(d => d.GlSubentry).WithMany(p => p.PayItemsubentries)
                .HasForeignKey(d => new { d.Transactionid, d.Subentryno })
                .HasConstraintName("FK_PAY_ITEMSUBENTRY_SUBENTRYNO");
        });

        modelBuilder.Entity<PayItemtransaction>(entity =>
        {
            entity.HasKey(e => new { e.Paymentid, e.Itemno, e.Transactionno });

            entity.ToTable("PAY_ITEMTRANSACTION", tb =>
                {
                    tb.HasTrigger("auddel_PAY_ITEMTRANSACTION");
                    tb.HasTrigger("audins_PAY_ITEMTRANSACTION");
                    tb.HasTrigger("audupd_PAY_ITEMTRANSACTION");
                });

            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Itemno).HasColumnName("ITEMNO");
            entity.Property(e => e.Transactionno).HasColumnName("TRANSACTIONNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Matchedamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("MATCHEDAMOUNT");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Transactionid).HasColumnName("TRANSACTIONID");

            entity.HasOne(d => d.Transaction).WithMany(p => p.PayItemtransactions)
                .HasForeignKey(d => d.Transactionid)
                .HasConstraintName("FK_PAY_ITEMTRANSACTION_TRANSACTIONID");

            entity.HasOne(d => d.PayItem).WithMany(p => p.PayItemtransactions)
                .HasForeignKey(d => new { d.Paymentid, d.Itemno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_ITEMTRANSACTION_ITEMNO");
        });

        modelBuilder.Entity<PayPayee>(entity =>
        {
            entity.HasKey(e => new { e.Paymentid, e.Payeeno });

            entity.ToTable("PAY_PAYEE", tb =>
                {
                    tb.HasTrigger("auddel_PAY_PAYEE");
                    tb.HasTrigger("audins_PAY_PAYEE");
                    tb.HasTrigger("audupd_PAY_PAYEE");
                });

            entity.HasIndex(e => e.Datetransferred, "IDX_PAY_PAYEE_DATETRANSFERRED");

            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Payeeno).HasColumnName("PAYEENO");
            entity.Property(e => e.Abn)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ABN");
            entity.Property(e => e.Addressline1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE1");
            entity.Property(e => e.Addressline2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE2");
            entity.Property(e => e.Addressline3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESSLINE3");
            entity.Property(e => e.Authorisedamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("AUTHORISEDAMOUNT");
            entity.Property(e => e.Authorisedgst)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("AUTHORISEDGST");
            entity.Property(e => e.Authorisedtotal)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("AUTHORISEDTOTAL");
            entity.Property(e => e.Chequeeftnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHEQUEEFTNUMBER");
            entity.Property(e => e.Country)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Datepaid)
                .HasColumnType("datetime")
                .HasColumnName("DATEPAID");
            entity.Property(e => e.Datepresented)
                .HasColumnType("datetime")
                .HasColumnName("DATEPRESENTED");
            entity.Property(e => e.Datetransferred)
                .HasColumnType("datetime")
                .HasColumnName("DATETRANSFERRED");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.International).HasColumnName("INTERNATIONAL");
            entity.Property(e => e.Invoiceamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("INVOICEAMOUNT");
            entity.Property(e => e.Invoicedate)
                .HasColumnType("datetime")
                .HasColumnName("INVOICEDATE");
            entity.Property(e => e.Invoicegst)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("INVOICEGST");
            entity.Property(e => e.Invoicenumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INVOICENUMBER");
            entity.Property(e => e.Invoicereceiveddate)
                .HasColumnType("datetime")
                .HasColumnName("INVOICERECEIVEDDATE");
            entity.Property(e => e.Invoicetotal)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("INVOICETOTAL");
            entity.Property(e => e.Manuallyprocessed).HasColumnName("MANUALLYPROCESSED");
            entity.Property(e => e.Paid).HasColumnName("PAID");
            entity.Property(e => e.Partybankno).HasColumnName("PARTYBANKNO");
            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Partylocationno).HasColumnName("PARTYLOCATIONNO");
            entity.Property(e => e.Payeerole)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYEEROLE");
            entity.Property(e => e.Paygapplies).HasColumnName("PAYGAPPLIES");
            entity.Property(e => e.Paygwithheldamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("PAYGWITHHELDAMOUNT");
            entity.Property(e => e.Postcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Presented).HasColumnName("PRESENTED");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reimbursement).HasColumnName("REIMBURSEMENT");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Transactionid).HasColumnName("TRANSACTIONID");
            entity.Property(e => e.Transactiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRANSACTIONTYPE");
            entity.Property(e => e.Transferred).HasColumnName("TRANSFERRED");

            entity.HasOne(d => d.Party).WithMany(p => p.PayPayees)
                .HasForeignKey(d => d.Partyid)
                .HasConstraintName("FK_PAY_PAYEE_PARTYID");

            entity.HasOne(d => d.Payment).WithMany(p => p.PayPayees)
                .HasForeignKey(d => d.Paymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_PAYEE_PAYMENTID");

            entity.HasOne(d => d.Transaction).WithMany(p => p.PayPayees)
                .HasForeignKey(d => d.Transactionid)
                .HasConstraintName("FK_PAY_PAYEE_TRANSACTIONID");

            entity.HasOne(d => d.ParLocation).WithMany(p => p.PayPayees)
                .HasForeignKey(d => new { d.Partyid, d.Partylocationno })
                .HasConstraintName("FK_PAY_PAYEE_PARTYLOCATIONNO");

            entity.HasOne(d => d.ParBank).WithMany(p => p.PayPayees)
                .HasForeignKey(d => new { d.Partyid, d.Partylocationno, d.Partybankno })
                .HasConstraintName("FK_PAY_PAYEE_BANKNO");
        });

        modelBuilder.Entity<PayPayeeX>(entity =>
        {
            entity.HasKey(e => new { e.Paymentid, e.Payeeno });

            entity.ToTable("PAY_PAYEE_X", tb =>
                {
                    tb.HasTrigger("auddel_PAY_PAYEE_X");
                    tb.HasTrigger("audins_PAY_PAYEE_X");
                    tb.HasTrigger("audupd_PAY_PAYEE_X");
                });

            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Payeeno).HasColumnName("PAYEENO");
            entity.Property(e => e.Batchnumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BATCHNUMBER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Holdcheque).HasColumnName("HOLDCHEQUE");
            entity.Property(e => e.Masterpieceid).HasColumnName("MASTERPIECEID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Masterpiece).WithMany(p => p.PayPayeeXes)
                .HasForeignKey(d => d.Masterpieceid)
                .HasConstraintName("FK_PAY_PAYEE_X_MASTERPIECEID");

            entity.HasOne(d => d.PayPayee).WithOne(p => p.PayPayeeX)
                .HasForeignKey<PayPayeeX>(d => new { d.Paymentid, d.Payeeno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_PAYEE_X_PAYEENO");
        });

        modelBuilder.Entity<PayPayment>(entity =>
        {
            entity.HasKey(e => e.Paymentid);

            entity.ToTable("PAY_PAYMENT", tb =>
                {
                    tb.HasTrigger("auddel_PAY_PAYMENT");
                    tb.HasTrigger("audins_PAY_PAYMENT");
                    tb.HasTrigger("audupd_PAY_PAYMENT");
                });

            entity.HasIndex(e => e.Dateentered, "IDX_PAYMENT_DATEENTERED_X");

            entity.HasIndex(e => e.Costcentreappliedtoid, "IDX_PAY_PAYMENT_COSTCENTREAPPLIEDTOID");

            entity.HasIndex(e => e.Dateauthorised, "IDX_PAY_PAYMENT_DATEAUTHORISED");

            entity.HasIndex(e => e.Documentid, "IDX_PAY_PAYMENT_DOCUMENTID");

            entity.HasIndex(e => e.Jurisdictionzone, "IDX_PAY_PAYMENT_JURISDICTIONZONE");

            entity.HasIndex(e => e.Createdfromdraftpaymentid, "idx_CREATEDFROMDRAFTPAYMENTID");

            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Authorised).HasColumnName("AUTHORISED");
            entity.Property(e => e.Authorisedamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("AUTHORISEDAMOUNT");
            entity.Property(e => e.Authorisedbyid).HasColumnName("AUTHORISEDBYID");
            entity.Property(e => e.Authorisedgst)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("AUTHORISEDGST");
            entity.Property(e => e.Authorisedtotal)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("AUTHORISEDTOTAL");
            entity.Property(e => e.Costcentreappliedtoid).HasColumnName("COSTCENTREAPPLIEDTOID");
            entity.Property(e => e.Createdfromdraftpaymentid).HasColumnName("CREATEDFROMDRAFTPAYMENTID");
            entity.Property(e => e.Dateauthorised)
                .HasColumnType("datetime")
                .HasColumnName("DATEAUTHORISED");
            entity.Property(e => e.Dateautocreated)
                .HasColumnType("datetime")
                .HasColumnName("DATEAUTOCREATED");
            entity.Property(e => e.Datedeclined)
                .HasColumnType("datetime")
                .HasColumnName("DATEDECLINED");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datetimedetermined)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMEDETERMINED");
            entity.Property(e => e.Declinedbyid).HasColumnName("DECLINEDBYID");
            entity.Property(e => e.Declinetotalpayment).HasColumnName("DECLINETOTALPAYMENT");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Enteredbyid).HasColumnName("ENTEREDBYID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Jurisdictionzone).HasColumnName("JURISDICTIONZONE");
            entity.Property(e => e.Particulars)
                .IsUnicode(false)
                .HasColumnName("PARTICULARS");
            entity.Property(e => e.Paymentstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTSTATUS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Transactiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRANSACTIONTYPE");

            entity.HasOne(d => d.Authorisedby).WithMany(p => p.PayPaymentAuthorisedbies)
                .HasForeignKey(d => d.Authorisedbyid)
                .HasConstraintName("FK_PAY_PAYMENT_AUTHORISEDBYID");

            entity.HasOne(d => d.Costcentreappliedto).WithMany(p => p.PayPayments)
                .HasForeignKey(d => d.Costcentreappliedtoid)
                .HasConstraintName("FK_PAY_PAYMENT_OS_ORGSTRUCTURE");

            entity.HasOne(d => d.Declinedby).WithMany(p => p.PayPaymentDeclinedbies)
                .HasForeignKey(d => d.Declinedbyid)
                .HasConstraintName("FK_PAY_PAYMENT_DECLINEDBY");

            entity.HasOne(d => d.Document).WithMany(p => p.PayPayments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_PAY_PAYMENT_DOCUMENTID");

            entity.HasOne(d => d.Enteredby).WithMany(p => p.PayPaymentEnteredbies)
                .HasForeignKey(d => d.Enteredbyid)
                .HasConstraintName("FK_PAY_PAYMENT_ENTEREDBYID");
        });

        modelBuilder.Entity<PayPaymentX>(entity =>
        {
            entity.HasKey(e => e.Paymentid);

            entity.ToTable("PAY_PAYMENT_X", tb =>
                {
                    tb.HasTrigger("auddel_PAY_PAYMENT_X");
                    tb.HasTrigger("audins_PAY_PAYMENT_X");
                    tb.HasTrigger("audupd_PAY_PAYMENT_X");
                });

            entity.Property(e => e.Paymentid)
                .ValueGeneratedNever()
                .HasColumnName("PAYMENTID");
            entity.Property(e => e.Agencyreference)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("AGENCYREFERENCE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Payment).WithOne(p => p.PayPaymentX)
                .HasForeignKey<PayPaymentX>(d => d.Paymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_PAYMENT_X_PAYMENTID");
        });

        modelBuilder.Entity<PayPaymentmodifyhistory>(entity =>
        {
            entity.HasKey(e => new { e.Paymentid, e.Modifyno });

            entity.ToTable("PAY_PAYMENTMODIFYHISTORY", tb =>
                {
                    tb.HasTrigger("auddel_PAY_PAYMENTMODIFYHISTOR");
                    tb.HasTrigger("audins_PAY_PAYMENTMODIFYHISTOR");
                    tb.HasTrigger("audupd_PAY_PAYMENTMODIFYHISTOR");
                });

            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Modifyno).HasColumnName("MODIFYNO");
            entity.Property(e => e.Datemodified)
                .HasColumnType("datetime")
                .HasColumnName("DATEMODIFIED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Modifiedby).HasColumnName("MODIFIEDBY");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.ModifiedbyNavigation).WithMany(p => p.PayPaymentmodifyhistories)
                .HasForeignKey(d => d.Modifiedby)
                .HasConstraintName("FK_PAY_PAYMENTMODIFYHISTORY_MODIFIEDBY");

            entity.HasOne(d => d.Payment).WithMany(p => p.PayPaymentmodifyhistories)
                .HasForeignKey(d => d.Paymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_PAYMENTMODIFYHISTORY_PAYMENTID");
        });

        modelBuilder.Entity<PayReversal>(entity =>
        {
            entity.HasKey(e => e.Paymentid);

            entity.ToTable("PAY_REVERSAL", tb =>
                {
                    tb.HasTrigger("auddel_PAY_REVERSAL");
                    tb.HasTrigger("audins_PAY_REVERSAL");
                    tb.HasTrigger("audupd_PAY_REVERSAL");
                });

            entity.Property(e => e.Paymentid)
                .ValueGeneratedNever()
                .HasColumnName("PAYMENTID");
            entity.Property(e => e.Chequeeftnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHEQUEEFTNUMBER");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Reason)
                .IsUnicode(false)
                .HasColumnName("REASON");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reversalmethod).HasColumnName("REVERSALMETHOD");
            entity.Property(e => e.Reversaltype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REVERSALTYPE");
            entity.Property(e => e.Reversespaymentid).HasColumnName("REVERSESPAYMENTID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Payment).WithOne(p => p.PayReversalPayment)
                .HasForeignKey<PayReversal>(d => d.Paymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_REVERSAL_PAYMENTID");

            entity.HasOne(d => d.Reversespayment).WithMany(p => p.PayReversalReversespayments)
                .HasForeignKey(d => d.Reversespaymentid)
                .HasConstraintName("FK_PAY_REVERSAL_REVERSESPAYMENTID");
        });

        modelBuilder.Entity<PayTransaction>(entity =>
        {
            entity.HasKey(e => new { e.Paymentid, e.Transactionno });

            entity.ToTable("PAY_TRANSACTIONS", tb =>
                {
                    tb.HasTrigger("auddel_PAY_TRANSACTIONS");
                    tb.HasTrigger("audins_PAY_TRANSACTIONS");
                    tb.HasTrigger("audupd_PAY_TRANSACTIONS");
                });

            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Transactionno).HasColumnName("TRANSACTIONNO");
            entity.Property(e => e.Accountid).HasColumnName("ACCOUNTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Matchedamount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("MATCHEDAMOUNT");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORY");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Selected).HasColumnName("SELECTED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Transactionid).HasColumnName("TRANSACTIONID");

            entity.HasOne(d => d.Account).WithMany(p => p.PayTransactions)
                .HasForeignKey(d => d.Accountid)
                .HasConstraintName("FK_PAY_TRANSACTIONS_ACCOUNTID");

            entity.HasOne(d => d.Payment).WithMany(p => p.PayTransactions)
                .HasForeignKey(d => d.Paymentid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAY_TRANSACTIONS_PAYMENTID");

            entity.HasOne(d => d.Transaction).WithMany(p => p.PayTransactions)
                .HasForeignKey(d => d.Transactionid)
                .HasConstraintName("FK_PAY_TRANSACTIONS_TRANSACTIONID");
        });

        modelBuilder.Entity<PolCoverage>(entity =>
        {
            entity.HasKey(e => new { e.Policyid, e.Coverageno });

            entity.ToTable("POL_COVERAGE", tb =>
                {
                    tb.HasTrigger("auddel_POL_COVERAGE");
                    tb.HasTrigger("audins_POL_COVERAGE");
                    tb.HasTrigger("audupd_POL_COVERAGE");
                });

            entity.Property(e => e.Policyid).HasColumnName("POLICYID");
            entity.Property(e => e.Coverageno).HasColumnName("COVERAGENO");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Actualfinalpremiumcharged)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("ACTUALFINALPREMIUMCHARGED");
            entity.Property(e => e.Actualnumberofworkers).HasColumnName("ACTUALNUMBEROFWORKERS");
            entity.Property(e => e.Actualwages)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("ACTUALWAGES");
            entity.Property(e => e.Anzsic1993industrycode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ANZSIC1993INDUSTRYCODE");
            entity.Property(e => e.Anzsic2006industrycode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ANZSIC2006INDUSTRYCODE");
            entity.Property(e => e.Coverageid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COVERAGEID");
            entity.Property(e => e.Coveragetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COVERAGETYPE");
            entity.Property(e => e.Currentadjusteddepositpremiumcharged)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("CURRENTADJUSTEDDEPOSITPREMIUMCHARGED");
            entity.Property(e => e.Datecoverageeffectivefrom)
                .HasColumnType("datetime")
                .HasColumnName("DATECOVERAGEEFFECTIVEFROM");
            entity.Property(e => e.Datecoverageeffectiveto)
                .HasColumnType("datetime")
                .HasColumnName("DATECOVERAGEEFFECTIVETO");
            entity.Property(e => e.Estimatednumberofworkers).HasColumnName("ESTIMATEDNUMBEROFWORKERS");
            entity.Property(e => e.Estimatedwages)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("ESTIMATEDWAGES");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Initialdepositpremiumcharged)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("INITIALDEPOSITPREMIUMCHARGED");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Premiumcollectiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PREMIUMCOLLECTIONTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Policy).WithMany(p => p.PolCoverages)
                .HasForeignKey(d => d.Policyid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_POL_COVERAGE_POLICYID");
        });

        modelBuilder.Entity<PolPolicy>(entity =>
        {
            entity.HasKey(e => e.Policyid);

            entity.ToTable("POL_POLICY", tb =>
                {
                    tb.HasTrigger("auddel_POL_POLICY");
                    tb.HasTrigger("audins_POL_POLICY");
                    tb.HasTrigger("audupd_POL_POLICY");
                });

            entity.Property(e => e.Policyid).HasColumnName("POLICYID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Brokerid)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BROKERID");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Injurymanagementprogram).HasColumnName("INJURYMANAGEMENTPROGRAM");
            entity.Property(e => e.Insurer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INSURER");
            entity.Property(e => e.Insurernumber)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("INSURERNUMBER");
            entity.Property(e => e.Jurisdictionzone).HasColumnName("JURISDICTIONZONE");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Policyname)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POLICYNAME");
            entity.Property(e => e.Policynumber)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POLICYNUMBER");
            entity.Property(e => e.Policytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("POLICYTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Teamnumber)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TEAMNUMBER");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Workcoveremployernumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("WORKCOVEREMPLOYERNUMBER");
        });

        modelBuilder.Entity<PorInjuredworkerX>(entity =>
        {
            entity.HasKey(e => e.Injuredworkerid);

            entity.ToTable("POR_INJUREDWORKER_X", tb =>
                {
                    tb.HasTrigger("auddel_POR_INJUREDWORKER_X");
                    tb.HasTrigger("audins_POR_INJUREDWORKER_X");
                    tb.HasTrigger("audupd_POR_INJUREDWORKER_X");
                });

            entity.Property(e => e.Injuredworkerid).HasColumnName("INJUREDWORKERID");
            entity.Property(e => e.Accountname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACCOUNTNAME");
            entity.Property(e => e.Accountnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACCOUNTNUMBER");
            entity.Property(e => e.Bankbranch)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BANKBRANCH");
            entity.Property(e => e.Bankname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BANKNAME");
            entity.Property(e => e.Bsb1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BSB1");
            entity.Property(e => e.Bsb2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BSB2");
            entity.Property(e => e.Datemanagerreviewed)
                .HasColumnType("datetime")
                .HasColumnName("DATEMANAGERREVIEWED");
            entity.Property(e => e.Dateofbirth)
                .HasColumnType("datetime")
                .HasColumnName("DATEOFBIRTH");
            entity.Property(e => e.Daterequested)
                .HasColumnType("datetime")
                .HasColumnName("DATEREQUESTED");
            entity.Property(e => e.Employeenumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMPLOYEENUMBER");
            entity.Property(e => e.Familyname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAMILYNAME");
            entity.Property(e => e.Givenname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GIVENNAME");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Managerapprovalaction).HasColumnName("MANAGERAPPROVALACTION");
            entity.Property(e => e.Managercomments)
                .IsUnicode(false)
                .HasColumnName("MANAGERCOMMENTS");
            entity.Property(e => e.Manageremail)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MANAGEREMAIL");
            entity.Property(e => e.Manageruserid).HasColumnName("MANAGERUSERID");
            entity.Property(e => e.Reasonforchange)
                .IsUnicode(false)
                .HasColumnName("REASONFORCHANGE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Requestedbyuserid).HasColumnName("REQUESTEDBYUSERID");
            entity.Property(e => e.Requeststatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REQUESTSTATUS");
            entity.Property(e => e.Requeststatusdatetime)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTSTATUSDATETIME");
            entity.Property(e => e.Reviewedbyuserid).HasColumnName("REVIEWEDBYUSERID");
            entity.Property(e => e.Simsbankno).HasColumnName("SIMSBANKNO");
            entity.Property(e => e.Simslocationno).HasColumnName("SIMSLOCATIONNO");
            entity.Property(e => e.Simspartyid).HasColumnName("SIMSPARTYID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Manageruser).WithMany(p => p.PorInjuredworkerXManagerusers)
                .HasForeignKey(d => d.Manageruserid)
                .HasConstraintName("FK_POR_INJUREDWORKER_X_MANAGERUSERID");

            entity.HasOne(d => d.Requestedbyuser).WithMany(p => p.PorInjuredworkerXRequestedbyusers)
                .HasForeignKey(d => d.Requestedbyuserid)
                .HasConstraintName("FK_POR_INJUREDWORKER_X_REQUESTEDBYUSERID");

            entity.HasOne(d => d.Reviewedbyuser).WithMany(p => p.PorInjuredworkerXReviewedbyusers)
                .HasForeignKey(d => d.Reviewedbyuserid)
                .HasConstraintName("FK_POR_INJUREDWORKER_X_REVIEWEDBYUSERID");
        });

        modelBuilder.Entity<PorInjuredworkerassociateddocumentX>(entity =>
        {
            entity.HasKey(e => new { e.Injuredworkerid, e.Injuredworkerassociateddocumentno }).HasName("PK_POR_INJUREDWORKERASSOCIATEDDOCUMENT_X_CLAIMID");

            entity.ToTable("POR_INJUREDWORKERASSOCIATEDDOCUMENT_X", tb =>
                {
                    tb.HasTrigger("auddel_POR_INJUREDWORKERASSOCI");
                    tb.HasTrigger("audins_POR_INJUREDWORKERASSOCI");
                    tb.HasTrigger("audupd_POR_INJUREDWORKERASSOCI");
                });

            entity.Property(e => e.Injuredworkerid).HasColumnName("INJUREDWORKERID");
            entity.Property(e => e.Injuredworkerassociateddocumentno).HasColumnName("INJUREDWORKERASSOCIATEDDOCUMENTNO");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Documentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTCATEGORY");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.PorInjuredworkerassociateddocumentXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_POR_INJUREDWORKERASSOCIATEDDOCUMENT_X_DOCUMENTID");

            entity.HasOne(d => d.Injuredworker).WithMany(p => p.PorInjuredworkerassociateddocumentXes)
                .HasForeignKey(d => d.Injuredworkerid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_POR_INJUREDWORKERASSOCIATEDDOCUMENT_X_PROVIDERID");
        });

        modelBuilder.Entity<PorProviderX>(entity =>
        {
            entity.HasKey(e => e.Providerid).HasName("PK_POR_PROVIDER_X_CLAIMID");

            entity.ToTable("POR_PROVIDER_X", tb =>
                {
                    tb.HasTrigger("auddel_POR_PROVIDER_X");
                    tb.HasTrigger("audins_POR_PROVIDER_X");
                    tb.HasTrigger("audupd_POR_PROVIDER_X");
                });

            entity.Property(e => e.Providerid).HasColumnName("PROVIDERID");
            entity.Property(e => e.Abn)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ABN");
            entity.Property(e => e.Accountname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACCOUNTNAME");
            entity.Property(e => e.Accountnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACCOUNTNUMBER");
            entity.Property(e => e.Bankbranch)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BANKBRANCH");
            entity.Property(e => e.Bankname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BANKNAME");
            entity.Property(e => e.Bsb1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BSB1");
            entity.Property(e => e.Bsb2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BSB2");
            entity.Property(e => e.Comments)
                .IsUnicode(false)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Companyname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Contactname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CONTACTNAME");
            entity.Property(e => e.Datemanagerreviewed)
                .HasColumnType("datetime")
                .HasColumnName("DATEMANAGERREVIEWED");
            entity.Property(e => e.Daterequested)
                .HasColumnType("datetime")
                .HasColumnName("DATEREQUESTED");
            entity.Property(e => e.Eftpayments).HasColumnName("EFTPAYMENTS");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Fax)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FAX");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Managerapprovalaction).HasColumnName("MANAGERAPPROVALACTION");
            entity.Property(e => e.Managercomments)
                .IsUnicode(false)
                .HasColumnName("MANAGERCOMMENTS");
            entity.Property(e => e.Manageremail)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MANAGEREMAIL");
            entity.Property(e => e.Manageruserid).HasColumnName("MANAGERUSERID");
            entity.Property(e => e.Medicalprovidernumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MEDICALPROVIDERNUMBER");
            entity.Property(e => e.Mobilephone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("MOBILEPHONE");
            entity.Property(e => e.Phone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.Postaladdressline1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTALADDRESSLINE1");
            entity.Property(e => e.Postaladdressline2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTALADDRESSLINE2");
            entity.Property(e => e.Postaladdressline3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSTALADDRESSLINE3");
            entity.Property(e => e.Postalcountry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("POSTALCOUNTRY");
            entity.Property(e => e.Postalinternational).HasColumnName("POSTALINTERNATIONAL");
            entity.Property(e => e.Postalpostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("POSTALPOSTCODE");
            entity.Property(e => e.Postalstate)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("POSTALSTATE");
            entity.Property(e => e.Postalsuburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("POSTALSUBURB");
            entity.Property(e => e.Providerformtype).HasColumnName("PROVIDERFORMTYPE");
            entity.Property(e => e.Providername)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PROVIDERNAME");
            entity.Property(e => e.Providertype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROVIDERTYPE");
            entity.Property(e => e.Providertypeeffectivefromdate)
                .HasColumnType("datetime")
                .HasColumnName("PROVIDERTYPEEFFECTIVEFROMDATE");
            entity.Property(e => e.Reasonforchange)
                .IsUnicode(false)
                .HasColumnName("REASONFORCHANGE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Requestedbyuserid).HasColumnName("REQUESTEDBYUSERID");
            entity.Property(e => e.Requeststatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REQUESTSTATUS");
            entity.Property(e => e.Requeststatusdatetime)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTSTATUSDATETIME");
            entity.Property(e => e.Reviewedbyuserid).HasColumnName("REVIEWEDBYUSERID");
            entity.Property(e => e.Sadpcvendornumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SADPCVENDORNUMBER");
            entity.Property(e => e.Simsbankno).HasColumnName("SIMSBANKNO");
            entity.Property(e => e.Simscontactno).HasColumnName("SIMSCONTACTNO");
            entity.Property(e => e.Simslocationno).HasColumnName("SIMSLOCATIONNO");
            entity.Property(e => e.Simsproviderid).HasColumnName("SIMSPROVIDERID");
            entity.Property(e => e.Streetaddressline1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STREETADDRESSLINE1");
            entity.Property(e => e.Streetaddressline2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STREETADDRESSLINE2");
            entity.Property(e => e.Streetaddressline3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STREETADDRESSLINE3");
            entity.Property(e => e.Streetcountry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STREETCOUNTRY");
            entity.Property(e => e.Streetinternational).HasColumnName("STREETINTERNATIONAL");
            entity.Property(e => e.Streetpostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("STREETPOSTCODE");
            entity.Property(e => e.Streetsameaspostal).HasColumnName("STREETSAMEASPOSTAL");
            entity.Property(e => e.Streetstate)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STREETSTATE");
            entity.Property(e => e.Streetsuburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("STREETSUBURB");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Workphone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("WORKPHONE");

            entity.HasOne(d => d.Manageruser).WithMany(p => p.PorProviderXManagerusers)
                .HasForeignKey(d => d.Manageruserid)
                .HasConstraintName("FK_POR_PROVIDER_X_MANAGERUSERID");

            entity.HasOne(d => d.Requestedbyuser).WithMany(p => p.PorProviderXRequestedbyusers)
                .HasForeignKey(d => d.Requestedbyuserid)
                .HasConstraintName("FK_POR_PROVIDER_X_REQUESTEDBYUSERID");

            entity.HasOne(d => d.Reviewedbyuser).WithMany(p => p.PorProviderXReviewedbyusers)
                .HasForeignKey(d => d.Reviewedbyuserid)
                .HasConstraintName("FK_POR_PROVIDER_X_REVIEWEDBYUSERID");
        });

        modelBuilder.Entity<PorProvideractionhistoryX>(entity =>
        {
            entity.HasKey(e => new { e.Providerid, e.Provideractionhistoryno });

            entity.ToTable("POR_PROVIDERACTIONHISTORY_X", tb =>
                {
                    tb.HasTrigger("auddel_POR_PROVIDERACTIONHISTO");
                    tb.HasTrigger("audins_POR_PROVIDERACTIONHISTO");
                    tb.HasTrigger("audupd_POR_PROVIDERACTIONHISTO");
                });

            entity.Property(e => e.Providerid).HasColumnName("PROVIDERID");
            entity.Property(e => e.Provideractionhistoryno).HasColumnName("PROVIDERACTIONHISTORYNO");
            entity.Property(e => e.Actionbyuserid).HasColumnName("ACTIONBYUSERID");
            entity.Property(e => e.Actioncomments)
                .IsUnicode(false)
                .HasColumnName("ACTIONCOMMENTS");
            entity.Property(e => e.Actiondate)
                .HasColumnType("datetime")
                .HasColumnName("ACTIONDATE");
            entity.Property(e => e.Actiontype).HasColumnName("ACTIONTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Requestedbyuserid).HasColumnName("REQUESTEDBYUSERID");
            entity.Property(e => e.Requestedcomments)
                .IsUnicode(false)
                .HasColumnName("REQUESTEDCOMMENTS");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Actionbyuser).WithMany(p => p.PorProvideractionhistoryXActionbyusers)
                .HasForeignKey(d => d.Actionbyuserid)
                .HasConstraintName("FK_POR_PROVIDERACTIONHISTORY_X_ACTIONBYUSERID");

            entity.HasOne(d => d.Provider).WithMany(p => p.PorProvideractionhistoryXes)
                .HasForeignKey(d => d.Providerid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_POR_PROVIDERACTIONHISTORY_X_PROVIDERID");

            entity.HasOne(d => d.Requestedbyuser).WithMany(p => p.PorProvideractionhistoryXRequestedbyusers)
                .HasForeignKey(d => d.Requestedbyuserid)
                .HasConstraintName("FK_POR_PROVIDERACTIONHISTORY_X_REQUESTEDBYUSERID");
        });

        modelBuilder.Entity<PorProviderassociateddocumentX>(entity =>
        {
            entity.HasKey(e => new { e.Providerid, e.Providerassociateddocumentno }).HasName("PK_POR_PROVIDERASSOCIATEDDOCUMENT_X_CLAIMID");

            entity.ToTable("POR_PROVIDERASSOCIATEDDOCUMENT_X", tb =>
                {
                    tb.HasTrigger("auddel_POR_PROVIDERASSOCIATEDD");
                    tb.HasTrigger("audins_POR_PROVIDERASSOCIATEDD");
                    tb.HasTrigger("audupd_POR_PROVIDERASSOCIATEDD");
                });

            entity.Property(e => e.Providerid).HasColumnName("PROVIDERID");
            entity.Property(e => e.Providerassociateddocumentno).HasColumnName("PROVIDERASSOCIATEDDOCUMENTNO");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Documentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTCATEGORY");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.PorProviderassociateddocumentXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_POR_PROVIDERASSOCIATEDDOCUMENT_X_DOCUMENTID");

            entity.HasOne(d => d.Provider).WithMany(p => p.PorProviderassociateddocumentXes)
                .HasForeignKey(d => d.Providerid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_POR_PROVIDERASSOCIATEDDOCUMENT_X_PROVIDERID");
        });

        modelBuilder.Entity<PorTicketX>(entity =>
        {
            entity.HasKey(e => e.Ticketid);

            entity.ToTable("POR_TICKET_X", tb =>
                {
                    tb.HasTrigger("auddel_POR_TICKET_X");
                    tb.HasTrigger("audins_POR_TICKET_X");
                    tb.HasTrigger("audupd_POR_TICKET_X");
                });

            entity.Property(e => e.Ticketid).HasColumnName("TICKETID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Targetdestination)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TARGETDESTINATION");
            entity.Property(e => e.Ticketdatetime)
                .HasColumnType("datetime")
                .HasColumnName("TICKETDATETIME");
            entity.Property(e => e.Ticketnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TICKETNUMBER");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Userid).HasColumnName("USERID");
        });

        modelBuilder.Entity<PorUserX>(entity =>
        {
            entity.HasKey(e => e.Userid).HasName("PK_POR_USER_X_CLAIMID");

            entity.ToTable("POR_USER_X", tb =>
                {
                    tb.HasTrigger("auddel_POR_USER_X");
                    tb.HasTrigger("audins_POR_USER_X");
                    tb.HasTrigger("audupd_POR_USER_X");
                });

            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Additionaldetails)
                .IsUnicode(false)
                .HasColumnName("ADDITIONALDETAILS");
            entity.Property(e => e.Datemanagerreviewed)
                .HasColumnType("datetime")
                .HasColumnName("DATEMANAGERREVIEWED");
            entity.Property(e => e.Daterequested)
                .HasColumnType("datetime")
                .HasColumnName("DATEREQUESTED");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Email)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Fax)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FAX");
            entity.Property(e => e.Firstname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Lastname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LASTNAME");
            entity.Property(e => e.Logonid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("LOGONID");
            entity.Property(e => e.Managerapprovalaction).HasColumnName("MANAGERAPPROVALACTION");
            entity.Property(e => e.Managercomments)
                .IsUnicode(false)
                .HasColumnName("MANAGERCOMMENTS");
            entity.Property(e => e.Manageremail)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MANAGEREMAIL");
            entity.Property(e => e.Manageruserid).HasColumnName("MANAGERUSERID");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.Reasonforchange)
                .IsUnicode(false)
                .HasColumnName("REASONFORCHANGE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Requestedbyuserid).HasColumnName("REQUESTEDBYUSERID");
            entity.Property(e => e.Requeststatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REQUESTSTATUS");
            entity.Property(e => e.Requeststatusdatetime)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTSTATUSDATETIME");
            entity.Property(e => e.Reviewedbyuserid).HasColumnName("REVIEWEDBYUSERID");
            entity.Property(e => e.Simsuserid).HasColumnName("SIMSUSERID");
            entity.Property(e => e.Supervisoruserid).HasColumnName("SUPERVISORUSERID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Userformtype).HasColumnName("USERFORMTYPE");

            entity.HasOne(d => d.Document).WithMany(p => p.PorUserXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_POR_USER_X_DMS_DOCUMENT");

            entity.HasOne(d => d.Manageruser).WithMany(p => p.PorUserXManagerusers)
                .HasForeignKey(d => d.Manageruserid)
                .HasConstraintName("FK_POR_USER_X_MANAGERUSERID");

            entity.HasOne(d => d.Orgstruct).WithMany(p => p.PorUserXes)
                .HasForeignKey(d => d.Orgstructid)
                .HasConstraintName("FK_POR_USER_X_OS_ORGSTRUCTURE");

            entity.HasOne(d => d.Requestedbyuser).WithMany(p => p.PorUserXRequestedbyusers)
                .HasForeignKey(d => d.Requestedbyuserid)
                .HasConstraintName("FK_POR_USER_X_REQUESTEDBYUSERID");

            entity.HasOne(d => d.Reviewedbyuser).WithMany(p => p.PorUserXReviewedbyusers)
                .HasForeignKey(d => d.Reviewedbyuserid)
                .HasConstraintName("FK_POR_USER_X_REVIEWEDBYUSERID");

            entity.HasOne(d => d.Supervisoruser).WithMany(p => p.PorUserXSupervisorusers)
                .HasForeignKey(d => d.Supervisoruserid)
                .HasConstraintName("FK_POR_USER_X_SUPERVISORUSERID");
        });

        modelBuilder.Entity<PorUserassociateddocumentX>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Userassociateddocumentno }).HasName("PK_POR_USERASSOCIATEDDOCUMENT_X_USERID");

            entity.ToTable("POR_USERASSOCIATEDDOCUMENT_X", tb =>
                {
                    tb.HasTrigger("auddel_POR_USERASSOCIATEDDOCUM");
                    tb.HasTrigger("audins_POR_USERASSOCIATEDDOCUM");
                    tb.HasTrigger("audupd_POR_USERASSOCIATEDDOCUM");
                });

            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Userassociateddocumentno).HasColumnName("USERASSOCIATEDDOCUMENTNO");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Documentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTCATEGORY");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.PorUserassociateddocumentXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_POR_USERASSOCIATEDDOCUMENT_X_DOCUMENTID");

            entity.HasOne(d => d.User).WithMany(p => p.PorUserassociateddocumentXes)
                .HasForeignKey(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_POR_USERASSOCIATEDDOCUMENT_X_USERID");
        });

        modelBuilder.Entity<PorUserpositionX>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Userpositionno }).HasName("PK_POR_USERPOSITION_X_CLAIMID");

            entity.ToTable("POR_USERPOSITION_X", tb =>
                {
                    tb.HasTrigger("auddel_POR_USERPOSITION_X");
                    tb.HasTrigger("audins_POR_USERPOSITION_X");
                    tb.HasTrigger("audupd_POR_USERPOSITION_X");
                });

            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Userpositionno).HasColumnName("USERPOSITIONNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Positionenddate)
                .HasColumnType("datetime")
                .HasColumnName("POSITIONENDDATE");
            entity.Property(e => e.Positionid).HasColumnName("POSITIONID");
            entity.Property(e => e.Positionongoing).HasColumnName("POSITIONONGOING");
            entity.Property(e => e.Positionstartdate)
                .HasColumnType("datetime")
                .HasColumnName("POSITIONSTARTDATE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Simspositionno).HasColumnName("SIMSPOSITIONNO");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Position).WithMany(p => p.PorUserpositionXes)
                .HasForeignKey(d => d.Positionid)
                .HasConstraintName("FK_POR_USERPOSITION_X_POSITIONID");

            entity.HasOne(d => d.User).WithMany(p => p.PorUserpositionXes)
                .HasForeignKey(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_POR_USERPOSITION_X_USERID");
        });

        modelBuilder.Entity<Postcode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("POSTCODES");

            entity.Property(e => e.Postcode1)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("POSTCODE");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUBURB");
        });

        modelBuilder.Entity<PqPortalqueue>(entity =>
        {
            entity.HasKey(e => e.Portalqueueid);

            entity.ToTable("PQ_PORTALQUEUE", tb =>
                {
                    tb.HasTrigger("auddel_PQ_PORTALQUEUE");
                    tb.HasTrigger("audins_PQ_PORTALQUEUE");
                    tb.HasTrigger("audupd_PQ_PORTALQUEUE");
                });

            entity.Property(e => e.Portalqueueid).HasColumnName("PORTALQUEUEID");
            entity.Property(e => e.Actiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ACTIONTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Objectguid).HasColumnName("OBJECTGUID");
            entity.Property(e => e.Objecttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OBJECTTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdatetime)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATETIME");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<PqPortalqueuearchive>(entity =>
        {
            entity.HasKey(e => e.Queuearchiveid);

            entity.ToTable("PQ_PORTALQUEUEARCHIVE", tb =>
                {
                    tb.HasTrigger("auddel_PQ_PORTALQUEUEARCHIVE");
                    tb.HasTrigger("audins_PQ_PORTALQUEUEARCHIVE");
                    tb.HasTrigger("audupd_PQ_PORTALQUEUEARCHIVE");
                });

            entity.Property(e => e.Queuearchiveid).HasColumnName("QUEUEARCHIVEID");
            entity.Property(e => e.Actiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ACTIONTYPE");
            entity.Property(e => e.Archivedatetime)
                .HasColumnType("datetime")
                .HasColumnName("ARCHIVEDATETIME");
            entity.Property(e => e.Objectguid).HasColumnName("OBJECTGUID");
            entity.Property(e => e.Objecttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OBJECTTYPE");
            entity.Property(e => e.Portalqueueid).HasColumnName("PORTALQUEUEID");
            entity.Property(e => e.Queuerecorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("QUEUERECORDDATEENTERED");
            entity.Property(e => e.Queuerecorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("QUEUERECORDDATEMODIFIED");
            entity.Property(e => e.Queuerecordenteredby).HasColumnName("QUEUERECORDENTEREDBY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdatetime)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATETIME");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<PredActiveuser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PRED_ACTIVEUSER");

            entity.Property(e => e.Userid).HasColumnName("USERID");
        });

        modelBuilder.Entity<PredOpenclaim>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PRED_OPENCLAIM");

            entity.Property(e => e.Claimclassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMCLASSIFICATION");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Claimnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CLAIMNUMBER");
            entity.Property(e => e.Claimtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMTYPE");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Jurisdictionzone).HasColumnName("JURISDICTIONZONE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statuscodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUSCODETYPE");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
        });

        modelBuilder.Entity<Pretransition>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PRETRANSITION");

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Claimnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CLAIMNUMBER");
            entity.Property(e => e.CurrentStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATUS");
            entity.Property(e => e.Datetransitioned).HasColumnName("DATETRANSITIONED");
            entity.Property(e => e.Transitioncategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRANSITIONCATEGORY");
            entity.Property(e => e.Transitiondesignateddate).HasColumnName("TRANSITIONDESIGNATEDDATE");
            entity.Property(e => e.Transitioned).HasColumnName("TRANSITIONED");
        });

        modelBuilder.Entity<RecRecovery>(entity =>
        {
            entity.HasKey(e => e.Recoveryid);

            entity.ToTable("REC_RECOVERY", tb =>
                {
                    tb.HasTrigger("auddel_REC_RECOVERY");
                    tb.HasTrigger("audins_REC_RECOVERY");
                    tb.HasTrigger("audupd_REC_RECOVERY");
                });

            entity.HasIndex(e => e.Datefinalised, "IDX_REC_RECOVERY_DATEFINALISED");

            entity.HasIndex(e => e.Documentid, "IDX_REC_RECOVERY_DOCUMENTID");

            entity.Property(e => e.Recoveryid).HasColumnName("RECOVERYID");
            entity.Property(e => e.Address1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Address3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS3");
            entity.Property(e => e.Chequeeftnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHEQUEEFTNUMBER");
            entity.Property(e => e.Country)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datefinalised)
                .HasColumnType("datetime")
                .HasColumnName("DATEFINALISED");
            entity.Property(e => e.Daterecoveryreceived)
                .HasColumnType("datetime")
                .HasColumnName("DATERECOVERYRECEIVED");
            entity.Property(e => e.Details)
                .IsUnicode(false)
                .HasColumnName("DETAILS");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Enteredbyuserid).HasColumnName("ENTEREDBYUSERID");
            entity.Property(e => e.Finalised).HasColumnName("FINALISED");
            entity.Property(e => e.Finalisedamount)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("FINALISEDAMOUNT");
            entity.Property(e => e.Finalisedbyuserid).HasColumnName("FINALISEDBYUSERID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.International).HasColumnName("INTERNATIONAL");
            entity.Property(e => e.Jurisdictionzone).HasColumnName("JURISDICTIONZONE");
            entity.Property(e => e.Locationno).HasColumnName("LOCATIONNO");
            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Partyname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PARTYNAME");
            entity.Property(e => e.Paymentmethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTMETHOD");
            entity.Property(e => e.Postcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Recoveryamount)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("RECOVERYAMOUNT");
            entity.Property(e => e.Recoverycategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECOVERYCATEGORY");
            entity.Property(e => e.Recoveryestimatecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECOVERYESTIMATECATEGORY");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Transactionid).HasColumnName("TRANSACTIONID");

            entity.HasOne(d => d.Document).WithMany(p => p.RecRecoveries)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_REC_RECOVERY_DOCUMENTID");

            entity.HasOne(d => d.Enteredbyuser).WithMany(p => p.RecRecoveryEnteredbyusers)
                .HasForeignKey(d => d.Enteredbyuserid)
                .HasConstraintName("FK_REC_RECOVERY_ENTEREDBY");

            entity.HasOne(d => d.Finalisedbyuser).WithMany(p => p.RecRecoveryFinalisedbyusers)
                .HasForeignKey(d => d.Finalisedbyuserid)
                .HasConstraintName("FK_REC_RECOVERY_FINALISEDBY");

            entity.HasOne(d => d.Transaction).WithMany(p => p.RecRecoveries)
                .HasForeignKey(d => d.Transactionid)
                .HasConstraintName("FK_REC_RECOVERY_TRANSACTIONID");

            entity.HasOne(d => d.ParLocation).WithMany(p => p.RecRecoveries)
                .HasForeignKey(d => new { d.Partyid, d.Locationno })
                .HasConstraintName("FK_REC_RECOVERY_LOCATIONNO");
        });

        modelBuilder.Entity<RecRecoveryWa>(entity =>
        {
            entity.HasKey(e => e.Recoveryid);

            entity.ToTable("REC_RECOVERY_WA");

            entity.Property(e => e.Recoveryid)
                .ValueGeneratedNever()
                .HasColumnName("RECOVERYID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Serviceprovidernumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SERVICEPROVIDERNUMBER");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Recovery).WithOne(p => p.RecRecoveryWa)
                .HasForeignKey<RecRecoveryWa>(d => d.Recoveryid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REC_RECOVERY_WA_RECOVERYID");
        });

        modelBuilder.Entity<RecRecoveryX>(entity =>
        {
            entity.HasKey(e => e.Recoveryid);

            entity.ToTable("REC_RECOVERY_X", tb =>
                {
                    tb.HasTrigger("auddel_REC_RECOVERY_X");
                    tb.HasTrigger("audins_REC_RECOVERY_X");
                    tb.HasTrigger("audupd_REC_RECOVERY_X");
                });

            entity.Property(e => e.Recoveryid)
                .ValueGeneratedNever()
                .HasColumnName("RECOVERYID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORY");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Recovery).WithOne(p => p.RecRecoveryX)
                .HasForeignKey<RecRecoveryX>(d => d.Recoveryid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REC_RECOVERY_X_RECOVERYID");
        });

        modelBuilder.Entity<RehActionX>(entity =>
        {
            entity.HasKey(e => new { e.Rehabid, e.Rehabactionno });

            entity.ToTable("REH_ACTION_X", tb =>
                {
                    tb.HasTrigger("auddel_REH_ACTION_X");
                    tb.HasTrigger("audins_REH_ACTION_X");
                    tb.HasTrigger("audupd_REH_ACTION_X");
                });

            entity.Property(e => e.Rehabid).HasColumnName("REHABID");
            entity.Property(e => e.Rehabactionno).HasColumnName("REHABACTIONNO");
            entity.Property(e => e.Actionsservices)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ACTIONSSERVICES");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("DUEDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Personresponsible)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PERSONRESPONSIBLE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Rehab).WithMany(p => p.RehActionXes)
                .HasForeignKey(d => d.Rehabid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REH_ACTION_X_REHABID");
        });

        modelBuilder.Entity<RehDocument>(entity =>
        {
            entity.HasKey(e => new { e.Rehabid, e.Documentno });

            entity.ToTable("REH_DOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_REH_DOCUMENT");
                    tb.HasTrigger("audins_REH_DOCUMENT");
                    tb.HasTrigger("audupd_REH_DOCUMENT");
                });

            entity.HasIndex(e => e.Documentid, "IDX_REH_DOCUMENT_DOCUMENTID");

            entity.Property(e => e.Rehabid).HasColumnName("REHABID");
            entity.Property(e => e.Documentno).HasColumnName("DOCUMENTNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.RehDocuments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_REH_DOCUMENT_DOCUMENTID");

            entity.HasOne(d => d.Rehab).WithMany(p => p.RehDocuments)
                .HasForeignKey(d => d.Rehabid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REH_DOCUMENT_REHABID");
        });

        modelBuilder.Entity<RehGoalX>(entity =>
        {
            entity.HasKey(e => new { e.Rehabid, e.Rehabgoalno });

            entity.ToTable("REH_GOAL_X", tb =>
                {
                    tb.HasTrigger("auddel_REH_GOAL_X");
                    tb.HasTrigger("audins_REH_GOAL_X");
                    tb.HasTrigger("audupd_REH_GOAL_X");
                });

            entity.Property(e => e.Rehabid).HasColumnName("REHABID");
            entity.Property(e => e.Rehabgoalno).HasColumnName("REHABGOALNO");
            entity.Property(e => e.Goal)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GOAL");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Rehab).WithMany(p => p.RehGoalXes)
                .HasForeignKey(d => d.Rehabid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REH_GOAL_X_REHABID");
        });

        modelBuilder.Entity<RehRehab>(entity =>
        {
            entity.HasKey(e => e.Rehabid);

            entity.ToTable("REH_REHAB", tb =>
                {
                    tb.HasTrigger("auddel_REH_REHAB");
                    tb.HasTrigger("audins_REH_REHAB");
                    tb.HasTrigger("audupd_REH_REHAB");
                });

            entity.Property(e => e.Rehabid).HasColumnName("REHABID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Rehabtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REHABTYPE");
            entity.Property(e => e.Rehabtypecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REHABTYPECODETYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<RehRehabX>(entity =>
        {
            entity.HasKey(e => e.Rehabid);

            entity.ToTable("REH_REHAB_X", tb =>
                {
                    tb.HasTrigger("auddel_REH_REHAB_X");
                    tb.HasTrigger("audins_REH_REHAB_X");
                    tb.HasTrigger("audupd_REH_REHAB_X");
                });

            entity.Property(e => e.Rehabid)
                .ValueGeneratedNever()
                .HasColumnName("REHABID");
            entity.Property(e => e.Additionalgoals)
                .IsUnicode(false)
                .HasColumnName("ADDITIONALGOALS");
            entity.Property(e => e.Consultationdate)
                .HasColumnType("datetime")
                .HasColumnName("CONSULTATIONDATE");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datefrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEFROM");
            entity.Property(e => e.Dateplanreceived)
                .HasColumnType("datetime")
                .HasColumnName("DATEPLANRECEIVED");
            entity.Property(e => e.Dateprepared)
                .HasColumnType("datetime")
                .HasColumnName("DATEPREPARED");
            entity.Property(e => e.Dateto)
                .HasColumnType("datetime")
                .HasColumnName("DATETO");
            entity.Property(e => e.Enteredby).HasColumnName("ENTEREDBY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Internalexternal).HasColumnName("INTERNALEXTERNAL");
            entity.Property(e => e.Nominatedtreatingdoctorid).HasColumnName("NOMINATEDTREATINGDOCTORID");
            entity.Property(e => e.Nosuitabledutiesavailable).HasColumnName("NOSUITABLEDUTIESAVAILABLE");
            entity.Property(e => e.Objective)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OBJECTIVE");
            entity.Property(e => e.Outcome)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OUTCOME");
            entity.Property(e => e.Outcomedate)
                .HasColumnType("datetime")
                .HasColumnName("OUTCOMEDATE");
            entity.Property(e => e.Positiondetails)
                .IsUnicode(false)
                .HasColumnName("POSITIONDETAILS");
            entity.Property(e => e.Positionsupervisor)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("POSITIONSUPERVISOR");
            entity.Property(e => e.Positiontype).HasColumnName("POSITIONTYPE");
            entity.Property(e => e.Preparedby)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("PREPAREDBY");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reviewdate)
                .HasColumnType("datetime")
                .HasColumnName("REVIEWDATE");
            entity.Property(e => e.Rtwconsultant)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RTWCONSULTANT");
            entity.Property(e => e.Rtwconsultantphone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("RTWCONSULTANTPHONE");
            entity.Property(e => e.Rtwplannumber).HasColumnName("RTWPLANNUMBER");
            entity.Property(e => e.Rtwproviderid).HasColumnName("RTWPROVIDERID");
            entity.Property(e => e.Signedbycasemanager).HasColumnName("SIGNEDBYCASEMANAGER");
            entity.Property(e => e.Signedbydoctor).HasColumnName("SIGNEDBYDOCTOR");
            entity.Property(e => e.Signedbyemployee).HasColumnName("SIGNEDBYEMPLOYEE");
            entity.Property(e => e.Signedbyrtwconsultant).HasColumnName("SIGNEDBYRTWCONSULTANT");
            entity.Property(e => e.Signedbyrtwprovider).HasColumnName("SIGNEDBYRTWPROVIDER");
            entity.Property(e => e.Signedbysupervisor).HasColumnName("SIGNEDBYSUPERVISOR");
            entity.Property(e => e.Supervisor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUPERVISOR");
            entity.Property(e => e.Supervisorphone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("SUPERVISORPHONE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Workconductedat).HasColumnName("WORKCONDUCTEDAT");
            entity.Property(e => e.Worksitedetails)
                .IsUnicode(false)
                .HasColumnName("WORKSITEDETAILS");

            entity.HasOne(d => d.EnteredbyNavigation).WithMany(p => p.RehRehabXes)
                .HasForeignKey(d => d.Enteredby)
                .HasConstraintName("FK_REH_REHAB_X_ENTEREDBY");

            entity.HasOne(d => d.Nominatedtreatingdoctor).WithMany(p => p.RehRehabXNominatedtreatingdoctors)
                .HasForeignKey(d => d.Nominatedtreatingdoctorid)
                .HasConstraintName("FK_REH_REHAB_X_NTDID");

            entity.HasOne(d => d.Rehab).WithOne(p => p.RehRehabX)
                .HasForeignKey<RehRehabX>(d => d.Rehabid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REH_REHAB_X_REHABID");

            entity.HasOne(d => d.Rtwprovider).WithMany(p => p.RehRehabXRtwproviders)
                .HasForeignKey(d => d.Rtwproviderid)
                .HasConstraintName("FK_REH_REHAB_X_REHABPROVID");
        });

        modelBuilder.Entity<RehSdrosterX>(entity =>
        {
            entity.HasKey(e => new { e.Rehabid, e.Sdrosterno });

            entity.ToTable("REH_SDROSTER_X", tb =>
                {
                    tb.HasTrigger("auddel_REH_SDROSTER_X");
                    tb.HasTrigger("audins_REH_SDROSTER_X");
                    tb.HasTrigger("audupd_REH_SDROSTER_X");
                });

            entity.Property(e => e.Rehabid).HasColumnName("REHABID");
            entity.Property(e => e.Sdrosterno).HasColumnName("SDROSTERNO");
            entity.Property(e => e.Datefrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEFROM");
            entity.Property(e => e.Dateto)
                .HasColumnType("datetime")
                .HasColumnName("DATETO");
            entity.Property(e => e.Days).HasColumnName("DAYS");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hours)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("HOURS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Restrictions)
                .IsUnicode(false)
                .HasColumnName("RESTRICTIONS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Weeknumber).HasColumnName("WEEKNUMBER");
            entity.Property(e => e.Workactivities)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("WORKACTIVITIES");

            entity.HasOne(d => d.Rehab).WithMany(p => p.RehSdrosterXes)
                .HasForeignKey(d => d.Rehabid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REH_SDROSTER_X_REHABID");
        });

        modelBuilder.Entity<RptDocument>(entity =>
        {
            entity.HasKey(e => new { e.Reportid, e.Documentno }).HasName("PK_RPT_DOCUMENT_REPORTID");

            entity.ToTable("RPT_DOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_RPT_DOCUMENT");
                    tb.HasTrigger("audins_RPT_DOCUMENT");
                    tb.HasTrigger("audupd_RPT_DOCUMENT");
                });

            entity.Property(e => e.Reportid).HasColumnName("REPORTID");
            entity.Property(e => e.Documentno).HasColumnName("DOCUMENTNO");
            entity.Property(e => e.Documentgenerateddatetime)
                .HasColumnType("datetime")
                .HasColumnName("DOCUMENTGENERATEDDATETIME");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Jobid).HasColumnName("JOBID");
            entity.Property(e => e.Jobqueueid).HasColumnName("JOBQUEUEID");
            entity.Property(e => e.Recipientno).HasColumnName("RECIPIENTNO");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.RptDocuments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_RPT_DOCUMENT_DOCUMENTID");

            entity.HasOne(d => d.Report).WithMany(p => p.RptDocuments)
                .HasForeignKey(d => d.Reportid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RPT_DOCUMENT_REPORTID");

            entity.HasOne(d => d.JobRecipient).WithMany(p => p.RptDocuments)
                .HasForeignKey(d => new { d.Jobid, d.Recipientno })
                .HasConstraintName("FK_RPT_DOCUMENT_RECIPIENTNO");
        });

        modelBuilder.Entity<RptDocumentX>(entity =>
        {
            entity.HasKey(e => new { e.Reportid, e.Documentno });

            entity.ToTable("RPT_DOCUMENT_X", tb =>
                {
                    tb.HasTrigger("auddel_RPT_DOCUMENT_X");
                    tb.HasTrigger("audins_RPT_DOCUMENT_X");
                    tb.HasTrigger("audupd_RPT_DOCUMENT_X");
                });

            entity.Property(e => e.Reportid).HasColumnName("REPORTID");
            entity.Property(e => e.Documentno).HasColumnName("DOCUMENTNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Serversavefilepath)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SERVERSAVEFILEPATH");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.RptDocument).WithOne(p => p.RptDocumentX)
                .HasForeignKey<RptDocumentX>(d => new { d.Reportid, d.Documentno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RPT_DOCUMENT_X_RPT_DOCUMENT");
        });

        modelBuilder.Entity<RptReport>(entity =>
        {
            entity.HasKey(e => e.Reportid).HasName("PK_RPT_REPORT_REPORTID");

            entity.ToTable("RPT_REPORT", tb =>
                {
                    tb.HasTrigger("auddel_RPT_REPORT");
                    tb.HasTrigger("audins_RPT_REPORT");
                    tb.HasTrigger("audupd_RPT_REPORT");
                });

            entity.Property(e => e.Reportid).HasColumnName("REPORTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reportcriteria)
                .IsUnicode(false)
                .HasColumnName("REPORTCRITERIA");
            entity.Property(e => e.Reportname)
                .IsUnicode(false)
                .HasColumnName("REPORTNAME");
            entity.Property(e => e.Reportreference)
                .IsUnicode(false)
                .HasColumnName("REPORTREFERENCE");
            entity.Property(e => e.Scheduleid).HasColumnName("SCHEDULEID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Schedule).WithMany(p => p.RptReports)
                .HasForeignKey(d => d.Scheduleid)
                .HasConstraintName("FK_RPT_REPORT_SCHEDULEID");
        });

        modelBuilder.Entity<RskLinkedeventX>(entity =>
        {
            entity.HasKey(e => new { e.Riskid, e.Linkedeventno });

            entity.ToTable("Rsk_LINKEDEVENT_X");

            entity.Property(e => e.Riskid).HasColumnName("riskid");
            entity.Property(e => e.Linkedeventno).HasColumnName("LINKEDEVENTNO");
            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.RskLinkedeventXes)
                .HasForeignKey(d => d.Eventid)
                .HasConstraintName("FK_RSK_LINKEDEVENT_X_LINKEDEVENTID");
        });

        modelBuilder.Entity<SaLicenceSa>(entity =>
        {
            entity.HasKey(e => e.Salicenceid);

            entity.ToTable("SA_LICENCE_SA", tb =>
                {
                    tb.HasTrigger("auddel_SA_LICENCE_SA");
                    tb.HasTrigger("audins_SA_LICENCE_SA");
                    tb.HasTrigger("audupd_SA_LICENCE_SA");
                });

            entity.Property(e => e.Salicenceid).HasColumnName("SALICENCEID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Entityname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ENTITYNAME");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Licencenumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LICENCENUMBER");
            entity.Property(e => e.Mailboxnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MAILBOXNUMBER");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<SaLicenceregistrationSa>(entity =>
        {
            entity.HasKey(e => new { e.Salicenceid, e.Saregistrationid });

            entity.ToTable("SA_LICENCEREGISTRATION_SA", tb =>
                {
                    tb.HasTrigger("auddel_SA_LICENCEREGISTRATION_");
                    tb.HasTrigger("audins_SA_LICENCEREGISTRATION_");
                    tb.HasTrigger("audupd_SA_LICENCEREGISTRATION_");
                });

            entity.Property(e => e.Salicenceid).HasColumnName("SALICENCEID");
            entity.Property(e => e.Saregistrationid).HasColumnName("SAREGISTRATIONID");
            entity.Property(e => e.Datelinked)
                .HasColumnType("datetime")
                .HasColumnName("DATELINKED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Salicence).WithMany(p => p.SaLicenceregistrationSas)
                .HasForeignKey(d => d.Salicenceid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SA_LICENCEREGISTRATION_SA_SALICENCEID");

            entity.HasOne(d => d.Saregistration).WithMany(p => p.SaLicenceregistrationSas)
                .HasForeignKey(d => d.Saregistrationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SA_LICENCEREGISTRATION_SA_SAREGISTRATIONID");
        });

        modelBuilder.Entity<SaRegistrationSa>(entity =>
        {
            entity.HasKey(e => e.Saregistrationid);

            entity.ToTable("SA_REGISTRATION_SA", tb =>
                {
                    tb.HasTrigger("auddel_SA_REGISTRATION_SA");
                    tb.HasTrigger("audins_SA_REGISTRATION_SA");
                    tb.HasTrigger("audupd_SA_REGISTRATION_SA");
                });

            entity.Property(e => e.Saregistrationid).HasColumnName("SAREGISTRATIONID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Address1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Address3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS3");
            entity.Property(e => e.Companyname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Contact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACT");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Fax)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FAX");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Phone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.Postcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Registrationnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGISTRATIONNUMBER");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<SaRegistrationSaX>(entity =>
        {
            entity.HasKey(e => new { e.Saregistrationid, e.Organisationno });

            entity.ToTable("SA_REGISTRATION_SA_X", tb =>
                {
                    tb.HasTrigger("auddel_SA_REGISTRATION_SA_X");
                    tb.HasTrigger("audins_SA_REGISTRATION_SA_X");
                    tb.HasTrigger("audupd_SA_REGISTRATION_SA_X");
                });

            entity.Property(e => e.Saregistrationid).HasColumnName("SAREGISTRATIONID");
            entity.Property(e => e.Organisationno).HasColumnName("ORGANISATIONNO");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGENCY");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Level1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LEVEL1");
            entity.Property(e => e.Level2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LEVEL2");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Saregistration).WithMany(p => p.SaRegistrationSaXes)
                .HasForeignKey(d => d.Saregistrationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SA_REGISTRATION_SA_X_SA_REGISTRATION_SA");
        });

        modelBuilder.Entity<SaRegistrationlocationSa>(entity =>
        {
            entity.HasKey(e => new { e.Saregistrationid, e.Saworkcoverlocationid });

            entity.ToTable("SA_REGISTRATIONLOCATION_SA", tb =>
                {
                    tb.HasTrigger("auddel_SA_REGISTRATIONLOCATION");
                    tb.HasTrigger("audins_SA_REGISTRATIONLOCATION");
                    tb.HasTrigger("audupd_SA_REGISTRATIONLOCATION");
                });

            entity.Property(e => e.Saregistrationid).HasColumnName("SAREGISTRATIONID");
            entity.Property(e => e.Saworkcoverlocationid).HasColumnName("SAWORKCOVERLOCATIONID");
            entity.Property(e => e.Datelinked)
                .HasColumnType("datetime")
                .HasColumnName("DATELINKED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Saregistration).WithMany(p => p.SaRegistrationlocationSas)
                .HasForeignKey(d => d.Saregistrationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SA_REGISTRATIONLOCATION_SA_SAREGISTRATIONID");

            entity.HasOne(d => d.Saworkcoverlocation).WithMany(p => p.SaRegistrationlocationSas)
                .HasForeignKey(d => d.Saworkcoverlocationid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SA_REGISTRATIONLOCATION_SA_SAWORKCOVERLOCATIONID");
        });

        modelBuilder.Entity<SaWorkcoverlocationSa>(entity =>
        {
            entity.HasKey(e => e.Saworkcoverlocationid);

            entity.ToTable("SA_WORKCOVERLOCATION_SA", tb =>
                {
                    tb.HasTrigger("auddel_SA_WORKCOVERLOCATION_SA");
                    tb.HasTrigger("audins_SA_WORKCOVERLOCATION_SA");
                    tb.HasTrigger("audupd_SA_WORKCOVERLOCATION_SA");
                });

            entity.Property(e => e.Saworkcoverlocationid).HasColumnName("SAWORKCOVERLOCATIONID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Locationname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("LOCATIONNAME");
            entity.Property(e => e.Locationnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LOCATIONNUMBER");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<Sbc00053784>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SBC00053784");

            entity.Property(e => e.Agency)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Costcentre)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("costcentre");
            entity.Property(e => e.Division)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("division");
            entity.Property(e => e.Fundingprofileid).HasColumnName("fundingprofileid");
            entity.Property(e => e.Glaccountnumber)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("glaccountnumber");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("paymentcategory");
            entity.Property(e => e.Paymentcategorycode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("paymentcategorycode");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("paymenttype");
            entity.Property(e => e.Paymenttypecode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("paymenttypecode");
            entity.Property(e => e.Porfolio)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("porfolio");
            entity.Property(e => e.Region)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("region");
            entity.Property(e => e.Service)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("service");
        });

        modelBuilder.Entity<Sbc00055453>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SBC00055453");

            entity.Property(e => e.Accountname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("accountname");
            entity.Property(e => e.Accountno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("accountno");
            entity.Property(e => e.Bank)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("bank");
            entity.Property(e => e.Bsb)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bsb");
            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Claimnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("claimnumber");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Iwworker)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("iwworker");
        });

        modelBuilder.Entity<Sbc00056028>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SBC00056028");

            entity.Property(e => e.Accountname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("accountname");
            entity.Property(e => e.Accountno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("accountno");
            entity.Property(e => e.Bank)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("bank");
            entity.Property(e => e.Bsb)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bsb");
            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Claimnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("claimnumber");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Iwworker)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("iwworker");
        });

        modelBuilder.Entity<SchDayofweek>(entity =>
        {
            entity.HasKey(e => new { e.Scheduleid, e.Dayofweekno }).HasName("PK_SCH_DAYOFWEEK_DAYOFWEEKNO");

            entity.ToTable("SCH_DAYOFWEEK", tb =>
                {
                    tb.HasTrigger("auddel_SCH_DAYOFWEEK");
                    tb.HasTrigger("audins_SCH_DAYOFWEEK");
                    tb.HasTrigger("audupd_SCH_DAYOFWEEK");
                });

            entity.Property(e => e.Scheduleid).HasColumnName("SCHEDULEID");
            entity.Property(e => e.Dayofweekno).HasColumnName("DAYOFWEEKNO");
            entity.Property(e => e.Dayofweek).HasColumnName("DAYOFWEEK");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Schedule).WithMany(p => p.SchDayofweeks)
                .HasForeignKey(d => d.Scheduleid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SCH_DAYOFWEEK_SCHEDULEID");
        });

        modelBuilder.Entity<SchMetadatum>(entity =>
        {
            entity.HasKey(e => e.Metadataid).HasName("PK_SCH_METADATA_METADATAID");

            entity.ToTable("SCH_METADATA", tb =>
                {
                    tb.HasTrigger("auddel_SCH_METADATA");
                    tb.HasTrigger("audins_SCH_METADATA");
                    tb.HasTrigger("audupd_SCH_METADATA");
                });

            entity.Property(e => e.Metadataid).HasColumnName("METADATAID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Schedulerrundatetime)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULERRUNDATETIME");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<SchSchedule>(entity =>
        {
            entity.HasKey(e => e.Scheduleid).HasName("PK_SCH_SCHEDULE_SCHEDULEID");

            entity.ToTable("SCH_SCHEDULE", tb =>
                {
                    tb.HasTrigger("auddel_SCH_SCHEDULE");
                    tb.HasTrigger("audins_SCH_SCHEDULE");
                    tb.HasTrigger("audupd_SCH_SCHEDULE");
                });

            entity.Property(e => e.Scheduleid).HasColumnName("SCHEDULEID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datemodified)
                .HasColumnType("datetime")
                .HasColumnName("DATEMODIFIED");
            entity.Property(e => e.Dayofmonth).HasColumnName("DAYOFMONTH");
            entity.Property(e => e.Enteredby).HasColumnName("ENTEREDBY");
            entity.Property(e => e.Frequency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FREQUENCY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Jobid).HasColumnName("JOBID");
            entity.Property(e => e.Modifiedby).HasColumnName("MODIFIEDBY");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timeofday)
                .HasColumnType("datetime")
                .HasColumnName("TIMEOFDAY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.EnteredbyNavigation).WithMany(p => p.SchScheduleEnteredbyNavigations)
                .HasForeignKey(d => d.Enteredby)
                .HasConstraintName("FK_SCH_SCHEDULE_ENTEREDBY");

            entity.HasOne(d => d.Job).WithMany(p => p.SchSchedules)
                .HasForeignKey(d => d.Jobid)
                .HasConstraintName("FK_SCH_SCHEDULE_JOBID");

            entity.HasOne(d => d.ModifiedbyNavigation).WithMany(p => p.SchScheduleModifiedbyNavigations)
                .HasForeignKey(d => d.Modifiedby)
                .HasConstraintName("FK_SCH_SCHEDULE_MODIFIEDBY");
        });

        modelBuilder.Entity<SchemaVersion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SchemaVersions_Id");

            entity.Property(e => e.Applied).HasColumnType("datetime");
            entity.Property(e => e.ScriptName).HasMaxLength(255);
        });

        modelBuilder.Entity<SecAudit>(entity =>
        {
            entity.HasKey(e => e.Attemptid);

            entity.ToTable("SEC_AUDIT", tb =>
                {
                    tb.HasTrigger("auddel_SEC_AUDIT");
                    tb.HasTrigger("audins_SEC_AUDIT");
                    tb.HasTrigger("audupd_SEC_AUDIT");
                });

            entity.Property(e => e.Attemptid).HasColumnName("ATTEMPTID");
            entity.Property(e => e.Datetimeoccurred)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMEOCCURRED");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IPADDRESS");
            entity.Property(e => e.Modulename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODULENAME");
            entity.Property(e => e.Successfullogin).HasColumnName("SUCCESSFULLOGIN");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("USERNAME");
            entity.Property(e => e.Validuser).HasColumnName("VALIDUSER");

            entity.HasOne(d => d.User).WithMany(p => p.SecAudits)
                .HasForeignKey(d => d.Userid)
                .HasConstraintName("FK_SEC_AUDIT_USERID");
        });

        modelBuilder.Entity<SecClaimexclusionsX>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Inclusionno });

            entity.ToTable("SEC_CLAIMEXCLUSIONS_X", tb =>
                {
                    tb.HasTrigger("auddel_SEC_CLAIMEXCLUSIONS_X");
                    tb.HasTrigger("audins_SEC_CLAIMEXCLUSIONS_X");
                    tb.HasTrigger("audupd_SEC_CLAIMEXCLUSIONS_X");
                });

            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Inclusionno).HasColumnName("INCLUSIONNO");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithMany(p => p.SecClaimexclusionsXes)
                .HasForeignKey(d => d.Claimid)
                .HasConstraintName("FK_SEC_CLAIMEXCLUSIONS_X_CLAIMID");

            entity.HasOne(d => d.User).WithMany(p => p.SecClaimexclusionsXes)
                .HasForeignKey(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEC_CLAIMEXCLUSIONS_X_USERID");
        });

        modelBuilder.Entity<SecClaiminclusionsX>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Inclusionno });

            entity.ToTable("SEC_CLAIMINCLUSIONS_X", tb =>
                {
                    tb.HasTrigger("auddel_SEC_CLAIMINCLUSIONS_X");
                    tb.HasTrigger("audins_SEC_CLAIMINCLUSIONS_X");
                    tb.HasTrigger("audupd_SEC_CLAIMINCLUSIONS_X");
                });

            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Inclusionno).HasColumnName("INCLUSIONNO");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithMany(p => p.SecClaiminclusionsXes)
                .HasForeignKey(d => d.Claimid)
                .HasConstraintName("FK_SEC_CLAIMINCLUSIONS_X_CLAIMID");

            entity.HasOne(d => d.User).WithMany(p => p.SecClaiminclusionsXes)
                .HasForeignKey(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEC_CLAIMINCLUSIONS_X_USERID");
        });

        modelBuilder.Entity<SecHistory>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Historyno });

            entity.ToTable("SEC_HISTORY", tb =>
                {
                    tb.HasTrigger("auddel_SEC_HISTORY");
                    tb.HasTrigger("audins_SEC_HISTORY");
                    tb.HasTrigger("audupd_SEC_HISTORY");
                });

            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Historyno).HasColumnName("HISTORYNO");
            entity.Property(e => e.Clustertype)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CLUSTERTYPE");
            entity.Property(e => e.Keyvalue).HasColumnName("KEYVALUE");
            entity.Property(e => e.Sortorder).HasColumnName("SORTORDER");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.User).WithMany(p => p.SecHistories)
                .HasForeignKey(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEC_HISTORY_USERID");
        });

        modelBuilder.Entity<SecObject>(entity =>
        {
            entity.HasKey(e => e.Objectid);

            entity.ToTable("SEC_OBJECT", tb =>
                {
                    tb.HasTrigger("auddel_SEC_OBJECT");
                    tb.HasTrigger("audins_SEC_OBJECT");
                    tb.HasTrigger("audupd_SEC_OBJECT");
                });

            entity.Property(e => e.Objectid).HasColumnName("OBJECTID");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Parent).HasColumnName("PARENT");
            entity.Property(e => e.Reference)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("REFERENCE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Type).HasColumnName("TYPE");

            entity.HasOne(d => d.ParentNavigation).WithMany(p => p.InverseParentNavigation)
                .HasForeignKey(d => d.Parent)
                .HasConstraintName("FK_SEC_OBJECT_PARENT");
        });

        modelBuilder.Entity<SecOrgstructX>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Orgstructno });

            entity.ToTable("SEC_ORGSTRUCT_X", tb =>
                {
                    tb.HasTrigger("auddel_SEC_ORGSTRUCT_X");
                    tb.HasTrigger("audins_SEC_ORGSTRUCT_X");
                    tb.HasTrigger("audupd_SEC_ORGSTRUCT_X");
                });

            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Orgstructno).HasColumnName("ORGSTRUCTNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Jurisdictionzone).HasColumnName("JURISDICTIONZONE");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.User).WithMany(p => p.SecOrgstructXes)
                .HasForeignKey(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEC_ORGSTRUCT_X_USERID");
        });

        modelBuilder.Entity<SecPassword>(entity =>
        {
            entity.HasKey(e => e.Userid);

            entity.ToTable("SEC_PASSWORD", tb =>
                {
                    tb.HasTrigger("auddel_SEC_PASSWORD");
                    tb.HasTrigger("audins_SEC_PASSWORD");
                    tb.HasTrigger("audupd_SEC_PASSWORD");
                });

            entity.Property(e => e.Userid)
                .ValueGeneratedNever()
                .HasColumnName("USERID");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMECHANGED");
            entity.Property(e => e.Hashedpassword)
                .HasMaxLength(256)
                .HasColumnName("HASHEDPASSWORD");
            entity.Property(e => e.Mustchange).HasColumnName("MUSTCHANGE");
            entity.Property(e => e.Salt)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("SALT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.User).WithOne(p => p.SecPassword)
                .HasForeignKey<SecPassword>(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEC_PASSWORD_USERID");
        });

        modelBuilder.Entity<SecPasswordhistory>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Passwordno });

            entity.ToTable("SEC_PASSWORDHISTORY", tb =>
                {
                    tb.HasTrigger("auddel_SEC_PASSWORDHISTORY");
                    tb.HasTrigger("audins_SEC_PASSWORDHISTORY");
                    tb.HasTrigger("audupd_SEC_PASSWORDHISTORY");
                });

            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Passwordno).HasColumnName("PASSWORDNO");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMECHANGED");
            entity.Property(e => e.Hashedpassword)
                .HasMaxLength(256)
                .HasColumnName("HASHEDPASSWORD");
            entity.Property(e => e.Mustchange).HasColumnName("MUSTCHANGE");
            entity.Property(e => e.Salt)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("SALT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.User).WithMany(p => p.SecPasswordhistories)
                .HasForeignKey(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEC_PASSWORDHISTORY_USERID");
        });

        modelBuilder.Entity<SecPermission>(entity =>
        {
            entity.HasKey(e => e.Permissionid);

            entity.ToTable("SEC_PERMISSIONS", tb =>
                {
                    tb.HasTrigger("TRIG_SEC_PERMISSIONS_EVENT_SECURITY_X");
                    tb.HasTrigger("auddel_SEC_PERMISSIONS");
                    tb.HasTrigger("audins_SEC_PERMISSIONS");
                    tb.HasTrigger("audupd_SEC_PERMISSIONS");
                });

            entity.HasIndex(e => new { e.Objectid, e.Profile }, "UQ__SEC_PROFILE__3A2CAD6C").IsUnique();

            entity.Property(e => e.Permissionid).HasColumnName("PERMISSIONID");
            entity.Property(e => e.Deleteaccess).HasColumnName("DELETEACCESS");
            entity.Property(e => e.Executeaccess).HasColumnName("EXECUTEACCESS");
            entity.Property(e => e.Insertaccess).HasColumnName("INSERTACCESS");
            entity.Property(e => e.Modifyaccess).HasColumnName("MODIFYACCESS");
            entity.Property(e => e.Objectid).HasColumnName("OBJECTID");
            entity.Property(e => e.Profile)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROFILE");
            entity.Property(e => e.Propagateaccess).HasColumnName("PROPAGATEACCESS");
            entity.Property(e => e.Readaccess).HasColumnName("READACCESS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Object).WithMany(p => p.SecPermissions)
                .HasForeignKey(d => d.Objectid)
                .HasConstraintName("FK_SEC_PROFILE_OBJECT");
        });

        modelBuilder.Entity<SecPosition>(entity =>
        {
            entity.HasKey(e => e.Positionid);

            entity.ToTable("SEC_POSITION", tb =>
                {
                    tb.HasTrigger("auddel_SEC_POSITION");
                    tb.HasTrigger("audins_SEC_POSITION");
                    tb.HasTrigger("audupd_SEC_POSITION");
                });

            entity.Property(e => e.Positionid).HasColumnName("POSITIONID");
            entity.Property(e => e.Positionname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("POSITIONNAME");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<SecPositionprofile>(entity =>
        {
            entity.HasKey(e => new { e.Positionid, e.Profile }).HasName("pk_SEC_POSITIONPROFILE");

            entity.ToTable("SEC_POSITIONPROFILE", tb =>
                {
                    tb.HasTrigger("TRIG_SEC_POSITIONPROFILE_EVENT_SECURITY_X");
                    tb.HasTrigger("auddel_SEC_POSITIONPROFILE");
                    tb.HasTrigger("audins_SEC_POSITIONPROFILE");
                    tb.HasTrigger("audupd_SEC_POSITIONPROFILE");
                });

            entity.Property(e => e.Positionid).HasColumnName("POSITIONID");
            entity.Property(e => e.Profile)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROFILE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Position).WithMany(p => p.SecPositionprofiles)
                .HasForeignKey(d => d.Positionid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEC_POSITIONPROFILE_POSITIONID");
        });

        modelBuilder.Entity<SecSession>(entity =>
        {
            entity.HasKey(e => e.Spid);

            entity.ToTable("SEC_SESSION");

            entity.Property(e => e.Spid)
                .ValueGeneratedNever()
                .HasColumnName("SPID");
            entity.Property(e => e.Starttime)
                .HasColumnType("datetime")
                .HasColumnName("starttime");
            entity.Property(e => e.Token)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("token");
            entity.Property(e => e.Userid).HasColumnName("userid");
        });

        modelBuilder.Entity<SecSession2>(entity =>
        {
            entity.HasKey(e => e.Spid);

            entity.ToTable("SEC_SESSION2");

            entity.Property(e => e.Spid)
                .ValueGeneratedNever()
                .HasColumnName("SPID");
            entity.Property(e => e.Starttime)
                .HasColumnType("datetime")
                .HasColumnName("starttime");
            entity.Property(e => e.Token)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("token");
            entity.Property(e => e.Userid).HasColumnName("userid");
            entity.Property(e => e.Xbypassclaimsecurity).HasColumnName("XBYPASSCLAIMSECURITY");
            entity.Property(e => e.Xbypassincidentsecurity).HasColumnName("XBYPASSINCIDENTSECURITY");
            entity.Property(e => e.Xcanviewconfidentialclaim).HasColumnName("XCANVIEWCONFIDENTIALCLAIM");
            entity.Property(e => e.Xcanviewebclaim).HasColumnName("XCANVIEWEBCLAIM");
            entity.Property(e => e.Xcanviewsiclaim).HasColumnName("XCANVIEWSICLAIM");
            entity.Property(e => e.Xsuspendsecurityupdates).HasColumnName("XSUSPENDSECURITYUPDATES");
        });

        modelBuilder.Entity<SecUser>(entity =>
        {
            entity.HasKey(e => e.Userid);

            entity.ToTable("SEC_USER", tb =>
                {
                    tb.HasTrigger("auddel_SEC_USER");
                    tb.HasTrigger("audins_SEC_USER");
                    tb.HasTrigger("audupd_SEC_USER");
                });

            entity.HasIndex(e => e.Email, "EmailUq")
                .IsUnique()
                .HasFilter("([EMAIL] IS NOT NULL)");

            entity.HasIndex(e => new { e.Firstandlastname, e.Userid }, "IX_SEC_USER_FIRSTANDLASTNAME");

            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Email)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Fax)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FAX");
            entity.Property(e => e.Firstandlastname)
                .HasMaxLength(81)
                .IsUnicode(false)
                .HasComputedColumnSql("(([firstname]+' ')+[lastname])", true)
                .HasColumnName("FIRSTANDLASTNAME");
            entity.Property(e => e.Firstname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Lastname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LASTNAME");
            entity.Property(e => e.Ldapname)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("LDAPNAME");
            entity.Property(e => e.Logonid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("LOGONID");
            entity.Property(e => e.Password)
                .HasMaxLength(256)
                .HasColumnName("PASSWORD");
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<SecUserCommon>(entity =>
        {
            entity.HasKey(e => e.Userid);

            entity.ToTable("SEC_USER_COMMON", tb =>
                {
                    tb.HasTrigger("auddel_SEC_USER_COMMON");
                    tb.HasTrigger("audins_SEC_USER_COMMON");
                    tb.HasTrigger("audupd_SEC_USER_COMMON");
                });

            entity.Property(e => e.Userid)
                .ValueGeneratedNever()
                .HasColumnName("USERID");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datemodified)
                .HasColumnType("datetime")
                .HasColumnName("DATEMODIFIED");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Enteredby).HasColumnName("ENTEREDBY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Modifiedby).HasColumnName("MODIFIEDBY");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Signature)
                .IsUnicode(false)
                .HasColumnName("SIGNATURE");
            entity.Property(e => e.Supervisoruserid).HasColumnName("SUPERVISORUSERID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Document).WithMany(p => p.SecUserCommons)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_SEC_USER_COMMON_DOCUMENTID");

            entity.HasOne(d => d.EnteredbyNavigation).WithMany(p => p.SecUserCommonEnteredbyNavigations)
                .HasForeignKey(d => d.Enteredby)
                .HasConstraintName("FK_SEC_USER_COMMON_ENTEREDBY");

            entity.HasOne(d => d.ModifiedbyNavigation).WithMany(p => p.SecUserCommonModifiedbyNavigations)
                .HasForeignKey(d => d.Modifiedby)
                .HasConstraintName("FK_SEC_USER_COMMON_SEC_USER");

            entity.HasOne(d => d.Supervisoruser).WithMany(p => p.SecUserCommonSupervisorusers)
                .HasForeignKey(d => d.Supervisoruserid)
                .HasConstraintName("FK_SEC_USER_COMMON_SUPERVISORUSERID");

            entity.HasOne(d => d.User).WithOne(p => p.SecUserCommonUser)
                .HasForeignKey<SecUserCommon>(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEC_USER_COMMON_USERID");
        });

        modelBuilder.Entity<SecUserEventtypeX>(entity =>
        {
            entity.HasKey(e => e.Userid);

            entity.ToTable("SEC_USER_EVENTTYPE_X");

            entity.Property(e => e.Userid)
                .ValueGeneratedNever()
                .HasColumnName("USERID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.User).WithOne(p => p.SecUserEventtypeX)
                .HasForeignKey<SecUserEventtypeX>(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEC_USER_EVENTTYPE_X_USERID");
        });

        modelBuilder.Entity<SecUserX>(entity =>
        {
            entity.HasKey(e => e.Userid);

            entity.ToTable("SEC_USER_X", tb =>
                {
                    tb.HasTrigger("TRIG_SEC_USER_X_EVENT_SECURITY_X");
                    tb.HasTrigger("TRIG_SEC_USER_X_SECURITY");
                    tb.HasTrigger("auddel_SEC_USER_X");
                    tb.HasTrigger("audins_SEC_USER_X");
                    tb.HasTrigger("audupd_SEC_USER_X");
                });

            entity.Property(e => e.Userid)
                .ValueGeneratedNever()
                .HasColumnName("USERID");
            entity.Property(e => e.Agency).HasColumnName("AGENCY");
            entity.Property(e => e.Approveddbyuserid).HasColumnName("APPROVEDDBYUSERID");
            entity.Property(e => e.Datemanagerapproved)
                .HasColumnType("datetime")
                .HasColumnName("DATEMANAGERAPPROVED");
            entity.Property(e => e.Datetermsandconditionsaccepted)
                .HasColumnType("datetime")
                .HasColumnName("DATETERMSANDCONDITIONSACCEPTED");
            entity.Property(e => e.Eventtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVENTTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Homeagencyidentifier)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HOMEAGENCYIDENTIFIER");
            entity.Property(e => e.Managerapprovalcomments)
                .IsUnicode(false)
                .HasColumnName("MANAGERAPPROVALCOMMENTS");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Remoteaccessenabled).HasColumnName("REMOTEACCESSENABLED");
            entity.Property(e => e.Remoteaccessmobile)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("REMOTEACCESSMOBILE");
            entity.Property(e => e.Requestedbyuserid).HasColumnName("REQUESTEDBYUSERID");
            entity.Property(e => e.Requestedcomments)
                .IsUnicode(false)
                .HasColumnName("REQUESTEDCOMMENTS");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Summaryscreen).HasColumnName("SUMMARYSCREEN");
            entity.Property(e => e.Termsandconditionsaccepted).HasColumnName("TERMSANDCONDITIONSACCEPTED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Versionnumber).HasColumnName("VERSIONNUMBER");
            entity.Property(e => e.Vpngrantremoteaccess).HasColumnName("VPNGRANTREMOTEACCESS");
            entity.Property(e => e.Vpnremoteaccessuserid).HasColumnName("VPNREMOTEACCESSUSERID");
            entity.Property(e => e.Vpnremoteaccessusername)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VPNREMOTEACCESSUSERNAME");

            entity.HasOne(d => d.User).WithOne(p => p.SecUserX)
                .HasForeignKey<SecUserX>(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEC_USER_X_USERID");
        });

        modelBuilder.Entity<SecUserXBak>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SEC_USER_X_BAK", tb =>
                {
                    tb.HasTrigger("auddel_SEC_USER_X_BAK");
                    tb.HasTrigger("audins_SEC_USER_X_BAK");
                });

            entity.Property(e => e.Approveddbyuserid).HasColumnName("APPROVEDDBYUSERID");
            entity.Property(e => e.Datemanagerapproved)
                .HasColumnType("datetime")
                .HasColumnName("DATEMANAGERAPPROVED");
            entity.Property(e => e.Datetermsandconditionsaccepted)
                .HasColumnType("datetime")
                .HasColumnName("DATETERMSANDCONDITIONSACCEPTED");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Managerapprovalcomments)
                .IsUnicode(false)
                .HasColumnName("MANAGERAPPROVALCOMMENTS");
            entity.Property(e => e.Portfolio).HasColumnName("PORTFOLIO");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Remoteaccessenabled).HasColumnName("REMOTEACCESSENABLED");
            entity.Property(e => e.Remoteaccessmobile)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("REMOTEACCESSMOBILE");
            entity.Property(e => e.Requestedbyuserid).HasColumnName("REQUESTEDBYUSERID");
            entity.Property(e => e.Requestedcomments)
                .IsUnicode(false)
                .HasColumnName("REQUESTEDCOMMENTS");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Summaryscreen).HasColumnName("SUMMARYSCREEN");
            entity.Property(e => e.Termsandconditionsaccepted).HasColumnName("TERMSANDCONDITIONSACCEPTED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Userid).HasColumnName("USERID");
        });

        modelBuilder.Entity<SecUserdocumentX>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Userdocumentno });

            entity.ToTable("SEC_USERDOCUMENT_X", tb =>
                {
                    tb.HasTrigger("auddel_SEC_USERDOCUMENT_X");
                    tb.HasTrigger("audins_SEC_USERDOCUMENT_X");
                    tb.HasTrigger("audupd_SEC_USERDOCUMENT_X");
                });

            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Userdocumentno).HasColumnName("USERDOCUMENTNO");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Documentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTCATEGORY");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Document).WithMany(p => p.SecUserdocumentXes)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_SEC_USERDOCUMENT_X_DOCUMENTID");

            entity.HasOne(d => d.User).WithMany(p => p.SecUserdocumentXes)
                .HasForeignKey(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEC_USERDOCUMENT_X_USERID");
        });

        modelBuilder.Entity<SecUserposition>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Positionno }).HasName("PK_SEC_USERPOSITION_1");

            entity.ToTable("SEC_USERPOSITION", tb =>
                {
                    tb.HasTrigger("auddel_SEC_USERPOSITION");
                    tb.HasTrigger("audins_SEC_USERPOSITION");
                    tb.HasTrigger("audupd_SEC_USERPOSITION");
                });

            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Positionno).HasColumnName("POSITIONNO");
            entity.Property(e => e.Positionend)
                .HasColumnType("datetime")
                .HasColumnName("POSITIONEND");
            entity.Property(e => e.Positionid).HasColumnName("POSITIONID");
            entity.Property(e => e.Positionstart)
                .HasColumnType("datetime")
                .HasColumnName("POSITIONSTART");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Position).WithMany(p => p.SecUserpositions)
                .HasForeignKey(d => d.Positionid)
                .HasConstraintName("FK_SEC_USERPOSITION_POSITIONID");

            entity.HasOne(d => d.User).WithMany(p => p.SecUserpositions)
                .HasForeignKey(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEC_USERPOSITION_USERID");
        });

        modelBuilder.Entity<SecUserpositionClaim>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Positionno });

            entity.ToTable("SEC_USERPOSITION_CLAIM", tb =>
                {
                    tb.HasTrigger("auddel_SEC_USERPOSITION_CLAIM");
                    tb.HasTrigger("audins_SEC_USERPOSITION_CLAIM");
                    tb.HasTrigger("audupd_SEC_USERPOSITION_CLAIM");
                });

            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Positionno).HasColumnName("POSITIONNO");
            entity.Property(e => e.Claimtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.SecUserposition).WithOne(p => p.SecUserpositionClaim)
                .HasForeignKey<SecUserpositionClaim>(d => new { d.Userid, d.Positionno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEC_USERPOSITION_CLAIM_USERID_POSITIONNO");
        });

        modelBuilder.Entity<SecUserpositionCommon>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Positionno });

            entity.ToTable("SEC_USERPOSITION_COMMON", tb =>
                {
                    tb.HasTrigger("auddel_SEC_USERPOSITION_COMMON");
                    tb.HasTrigger("audins_SEC_USERPOSITION_COMMON");
                    tb.HasTrigger("audupd_SEC_USERPOSITION_COMMON");
                });

            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Positionno).HasColumnName("POSITIONNO");
            entity.Property(e => e.Dateentered)
                .HasColumnType("datetime")
                .HasColumnName("DATEENTERED");
            entity.Property(e => e.Datemodified)
                .HasColumnType("datetime")
                .HasColumnName("DATEMODIFIED");
            entity.Property(e => e.Enteredby).HasColumnName("ENTEREDBY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Modifiedby).HasColumnName("MODIFIEDBY");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.EnteredbyNavigation).WithMany(p => p.SecUserpositionCommonEnteredbyNavigations)
                .HasForeignKey(d => d.Enteredby)
                .HasConstraintName("FK_SEC_USERPOSITION_COMMON_ENTEREDBY");

            entity.HasOne(d => d.ModifiedbyNavigation).WithMany(p => p.SecUserpositionCommonModifiedbyNavigations)
                .HasForeignKey(d => d.Modifiedby)
                .HasConstraintName("FK_SEC_USERPOSITION_COMMON_MODIFIEDBY");

            entity.HasOne(d => d.SecUserposition).WithOne(p => p.SecUserpositionCommon)
                .HasForeignKey<SecUserpositionCommon>(d => new { d.Userid, d.Positionno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEC_USERPOSITION_COMMON_USERID_POSNO");
        });

        modelBuilder.Entity<SerAma>(entity =>
        {
            entity.HasKey(e => e.Amaserviceid);

            entity.ToTable("SER_AMA", tb =>
                {
                    tb.HasTrigger("auddel_SER_AMA");
                    tb.HasTrigger("audins_SER_AMA");
                    tb.HasTrigger("audupd_SER_AMA");
                });

            entity.HasIndex(e => e.Item, "UNQ_SER_AMA_ITEM").IsUnique();

            entity.Property(e => e.Amaserviceid).HasColumnName("AMASERVICEID");
            entity.Property(e => e.Datediscontinued)
                .HasColumnType("datetime")
                .HasColumnName("DATEDISCONTINUED");
            entity.Property(e => e.Item)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ITEM");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<SerAmadescription>(entity =>
        {
            entity.HasKey(e => new { e.Amaserviceid, e.Amadescriptionid });

            entity.ToTable("SER_AMADESCRIPTION", tb =>
                {
                    tb.HasTrigger("auddel_SER_AMADESCRIPTION");
                    tb.HasTrigger("audins_SER_AMADESCRIPTION");
                    tb.HasTrigger("audupd_SER_AMADESCRIPTION");
                });

            entity.HasIndex(e => new { e.Amaserviceid, e.Dateeffective }, "UNQ_SER_AMADESCRIPTION_DATEEFFECTIVE").IsUnique();

            entity.Property(e => e.Amaserviceid).HasColumnName("AMASERVICEID");
            entity.Property(e => e.Amadescriptionid)
                .ValueGeneratedOnAdd()
                .HasColumnName("AMADESCRIPTIONID");
            entity.Property(e => e.Bv).HasColumnName("BV");
            entity.Property(e => e.Dateeffective)
                .HasColumnType("datetime")
                .HasColumnName("DATEEFFECTIVE");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Mbs1number)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MBS1NUMBER");
            entity.Property(e => e.Mbs2number)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MBS2NUMBER");
            entity.Property(e => e.Mod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MOD");
            entity.Property(e => e.Other)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OTHER");
            entity.Property(e => e.Tim)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TIM");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Amaservice).WithMany(p => p.SerAmadescriptions)
                .HasForeignKey(d => d.Amaserviceid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SER_AMADESCRIPTION_AMASERVICEID");
        });

        modelBuilder.Entity<SerAmarate>(entity =>
        {
            entity.HasKey(e => new { e.Amaserviceid, e.Amarateid });

            entity.ToTable("SER_AMARATE", tb =>
                {
                    tb.HasTrigger("auddel_SER_AMARATE");
                    tb.HasTrigger("audins_SER_AMARATE");
                    tb.HasTrigger("audupd_SER_AMARATE");
                });

            entity.HasIndex(e => new { e.Amaserviceid, e.Dateeffective }, "UNQ_SER_AMARATE_DATEEFFECTIVE").IsUnique();

            entity.Property(e => e.Amaserviceid).HasColumnName("AMASERVICEID");
            entity.Property(e => e.Amarateid)
                .ValueGeneratedOnAdd()
                .HasColumnName("AMARATEID");
            entity.Property(e => e.Amount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("AMOUNT");
            entity.Property(e => e.Dateeffective)
                .HasColumnType("datetime")
                .HasColumnName("DATEEFFECTIVE");
            entity.Property(e => e.Mbs1rate)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("MBS1RATE");
            entity.Property(e => e.Mbs2rate)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("MBS2RATE");
            entity.Property(e => e.Servicerateid).HasColumnName("SERVICERATEID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Amaservice).WithMany(p => p.SerAmarates)
                .HasForeignKey(d => d.Amaserviceid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SER_AMARATE_AMASERVICEID");

            entity.HasOne(d => d.Servicerate).WithMany(p => p.SerAmarates)
                .HasForeignKey(d => d.Servicerateid)
                .HasConstraintName("FK_SER_AMARATE_SERVICERATEID");
        });

        modelBuilder.Entity<SerCustom>(entity =>
        {
            entity.HasKey(e => e.Customserviceid);

            entity.ToTable("SER_CUSTOM", tb =>
                {
                    tb.HasTrigger("auddel_SER_CUSTOM");
                    tb.HasTrigger("audins_SER_CUSTOM");
                    tb.HasTrigger("audupd_SER_CUSTOM");
                });

            entity.HasIndex(e => new { e.Item, e.Source }, "UNQ_SER_CUSTOM_ITEM").IsUnique();

            entity.Property(e => e.Customserviceid).HasColumnName("CUSTOMSERVICEID");
            entity.Property(e => e.Datediscontinued)
                .HasColumnType("datetime")
                .HasColumnName("DATEDISCONTINUED");
            entity.Property(e => e.Item)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ITEM");
            entity.Property(e => e.Source)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<SerCustomdescription>(entity =>
        {
            entity.HasKey(e => new { e.Customserviceid, e.Customservicedescriptionid });

            entity.ToTable("SER_CUSTOMDESCRIPTION", tb =>
                {
                    tb.HasTrigger("auddel_SER_CUSTOMDESCRIPTION");
                    tb.HasTrigger("audins_SER_CUSTOMDESCRIPTION");
                    tb.HasTrigger("audupd_SER_CUSTOMDESCRIPTION");
                });

            entity.HasIndex(e => new { e.Customserviceid, e.Dateeffective }, "UNQ_SER_CUSTOMDESCRIPTION_DATEEFFECTIVE").IsUnique();

            entity.Property(e => e.Customserviceid).HasColumnName("CUSTOMSERVICEID");
            entity.Property(e => e.Customservicedescriptionid)
                .ValueGeneratedOnAdd()
                .HasColumnName("CUSTOMSERVICEDESCRIPTIONID");
            entity.Property(e => e.Dateeffective)
                .HasColumnType("datetime")
                .HasColumnName("DATEEFFECTIVE");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Customservice).WithMany(p => p.SerCustomdescriptions)
                .HasForeignKey(d => d.Customserviceid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SER_CUSTOMDESCRIPTIONSCHEDULEID");
        });

        modelBuilder.Entity<SerCustomrate>(entity =>
        {
            entity.HasKey(e => new { e.Customserviceid, e.Customservicerateid });

            entity.ToTable("SER_CUSTOMRATE", tb =>
                {
                    tb.HasTrigger("auddel_SER_CUSTOMRATE");
                    tb.HasTrigger("audins_SER_CUSTOMRATE");
                    tb.HasTrigger("audupd_SER_CUSTOMRATE");
                });

            entity.HasIndex(e => new { e.Customserviceid, e.Dateeffective }, "UNQ_SER_CUSTOMRATE_DATEEFFECTIVE").IsUnique();

            entity.Property(e => e.Customserviceid).HasColumnName("CUSTOMSERVICEID");
            entity.Property(e => e.Customservicerateid)
                .ValueGeneratedOnAdd()
                .HasColumnName("CUSTOMSERVICERATEID");
            entity.Property(e => e.Amount)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("AMOUNT");
            entity.Property(e => e.Dateeffective)
                .HasColumnType("datetime")
                .HasColumnName("DATEEFFECTIVE");
            entity.Property(e => e.Servicerateid).HasColumnName("SERVICERATEID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Customservice).WithMany(p => p.SerCustomrates)
                .HasForeignKey(d => d.Customserviceid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SER_CUSTOMRATESCHEDULEID");

            entity.HasOne(d => d.Servicerate).WithMany(p => p.SerCustomrates)
                .HasForeignKey(d => d.Servicerateid)
                .HasConstraintName("FK_SER_CUSTOMRATE_SERVICERATEID");
        });

        modelBuilder.Entity<SerPrivatehospSa>(entity =>
        {
            entity.HasKey(e => e.Saprivatehospitalid);

            entity.ToTable("SER_PRIVATEHOSP_SA", tb =>
                {
                    tb.HasTrigger("auddel_SER_PRIVATEHOSP_SA");
                    tb.HasTrigger("audins_SER_PRIVATEHOSP_SA");
                    tb.HasTrigger("audupd_SER_PRIVATEHOSP_SA");
                });

            entity.HasIndex(e => e.Item, "UNQ_SER_PRIVATEHOSP_SA_ITEM").IsUnique();

            entity.Property(e => e.Saprivatehospitalid).HasColumnName("SAPRIVATEHOSPITALID");
            entity.Property(e => e.Datediscontinued)
                .HasColumnType("datetime")
                .HasColumnName("DATEDISCONTINUED");
            entity.Property(e => e.Item)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ITEM");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<SerPrivatehospdescriptionSa>(entity =>
        {
            entity.HasKey(e => new { e.Saprivatehospitalid, e.Saprivatehospitaldescriptionid });

            entity.ToTable("SER_PRIVATEHOSPDESCRIPTION_SA", tb =>
                {
                    tb.HasTrigger("auddel_SER_PRIVATEHOSPDESCRIPT");
                    tb.HasTrigger("audins_SER_PRIVATEHOSPDESCRIPT");
                    tb.HasTrigger("audupd_SER_PRIVATEHOSPDESCRIPT");
                });

            entity.HasIndex(e => new { e.Saprivatehospitalid, e.Dateeffective }, "UNQ_SER_PRIVATEHOSPDESCRIPTION_SA_DATEEFFECTIVE").IsUnique();

            entity.Property(e => e.Saprivatehospitalid).HasColumnName("SAPRIVATEHOSPITALID");
            entity.Property(e => e.Saprivatehospitaldescriptionid)
                .ValueGeneratedOnAdd()
                .HasColumnName("SAPRIVATEHOSPITALDESCRIPTIONID");
            entity.Property(e => e.Dateeffective)
                .HasColumnType("datetime")
                .HasColumnName("DATEEFFECTIVE");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Saprivatehospital).WithMany(p => p.SerPrivatehospdescriptionSas)
                .HasForeignKey(d => d.Saprivatehospitalid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SER_PRIVATEHOSPDESCRIPTION_SA_SAPRIVATEHOSPITALID");
        });

        modelBuilder.Entity<SerPrivatehosprateSa>(entity =>
        {
            entity.HasKey(e => new { e.Saprivatehospitalid, e.Saprivatehospitalrateid });

            entity.ToTable("SER_PRIVATEHOSPRATE_SA", tb =>
                {
                    tb.HasTrigger("auddel_SER_PRIVATEHOSPRATE_SA");
                    tb.HasTrigger("audins_SER_PRIVATEHOSPRATE_SA");
                    tb.HasTrigger("audupd_SER_PRIVATEHOSPRATE_SA");
                });

            entity.HasIndex(e => new { e.Saprivatehospitalid, e.Dateeffective }, "UNQ_SER_PRIVATEHOSPRATE_SA_DATEEFFECTIVE").IsUnique();

            entity.Property(e => e.Saprivatehospitalid).HasColumnName("SAPRIVATEHOSPITALID");
            entity.Property(e => e.Saprivatehospitalrateid)
                .ValueGeneratedOnAdd()
                .HasColumnName("SAPRIVATEHOSPITALRATEID");
            entity.Property(e => e.Dateeffective)
                .HasColumnType("datetime")
                .HasColumnName("DATEEFFECTIVE");
            entity.Property(e => e.Lowertrimpointdays).HasColumnName("LOWERTRIMPOINTDAYS");
            entity.Property(e => e.Maxfee)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("MAXFEE");
            entity.Property(e => e.Maxperdayrate)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("MAXPERDAYRATE");
            entity.Property(e => e.Servicerateid).HasColumnName("SERVICERATEID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TYPE");
            entity.Property(e => e.Uppertrimpointdays).HasColumnName("UPPERTRIMPOINTDAYS");

            entity.HasOne(d => d.Saprivatehospital).WithMany(p => p.SerPrivatehosprateSas)
                .HasForeignKey(d => d.Saprivatehospitalid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SER_PRIVATEHOSPRATE_SA_SASCHEDULEID");

            entity.HasOne(d => d.Servicerate).WithMany(p => p.SerPrivatehosprateSas)
                .HasForeignKey(d => d.Servicerateid)
                .HasConstraintName("FK_SER_PRIVATEHOSPRATE_SA_SERVICERATEID");
        });

        modelBuilder.Entity<SerRate>(entity =>
        {
            entity.HasKey(e => e.Servicerateid).HasName("PK_RATE_RATE");

            entity.ToTable("SER_RATE", tb =>
                {
                    tb.HasTrigger("auddel_SER_RATE");
                    tb.HasTrigger("audins_SER_RATE");
                    tb.HasTrigger("audupd_SER_RATE");
                });

            entity.Property(e => e.Servicerateid)
                .ValueGeneratedNever()
                .HasColumnName("SERVICERATEID");
            entity.Property(e => e.Taxstatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TAXSTATUS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<SerSascheduleSa>(entity =>
        {
            entity.HasKey(e => e.Sascheduleid);

            entity.ToTable("SER_SASCHEDULE_SA", tb =>
                {
                    tb.HasTrigger("auddel_SER_SASCHEDULE_SA");
                    tb.HasTrigger("audins_SER_SASCHEDULE_SA");
                    tb.HasTrigger("audupd_SER_SASCHEDULE_SA");
                });

            entity.Property(e => e.Sascheduleid).HasColumnName("SASCHEDULEID");
            entity.Property(e => e.Datediscontinued)
                .HasColumnType("datetime")
                .HasColumnName("DATEDISCONTINUED");
            entity.Property(e => e.Item)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ITEM");
            entity.Property(e => e.Source)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<SerSascheduledescriptionSa>(entity =>
        {
            entity.HasKey(e => new { e.Sascheduleid, e.Sascheduledescriptionid });

            entity.ToTable("SER_SASCHEDULEDESCRIPTION_SA", tb =>
                {
                    tb.HasTrigger("auddel_SER_SASCHEDULEDESCRIPTI");
                    tb.HasTrigger("audins_SER_SASCHEDULEDESCRIPTI");
                    tb.HasTrigger("audupd_SER_SASCHEDULEDESCRIPTI");
                });

            entity.HasIndex(e => new { e.Sascheduleid, e.Dateeffective }, "UNQ_SER_SASCHEDULEDESCRIPTION_SA_DATEEFFECTIVE").IsUnique();

            entity.Property(e => e.Sascheduleid).HasColumnName("SASCHEDULEID");
            entity.Property(e => e.Sascheduledescriptionid)
                .ValueGeneratedOnAdd()
                .HasColumnName("SASCHEDULEDESCRIPTIONID");
            entity.Property(e => e.Dateeffective)
                .HasColumnType("datetime")
                .HasColumnName("DATEEFFECTIVE");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Saschedule).WithMany(p => p.SerSascheduledescriptionSas)
                .HasForeignKey(d => d.Sascheduleid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SER_SASCHEDULEDESCRIPTION_SA_SASCHEDULEID");
        });

        modelBuilder.Entity<SerSaschedulerateSa>(entity =>
        {
            entity.HasKey(e => new { e.Sascheduleid, e.Saschedulerateid });

            entity.ToTable("SER_SASCHEDULERATE_SA", tb =>
                {
                    tb.HasTrigger("auddel_SER_SASCHEDULERATE_SA");
                    tb.HasTrigger("audins_SER_SASCHEDULERATE_SA");
                    tb.HasTrigger("audupd_SER_SASCHEDULERATE_SA");
                });

            entity.HasIndex(e => new { e.Sascheduleid, e.Dateeffective }, "UNQ_SER_SASCHEDULERATE_SA_DATEEFFECTIVE").IsUnique();

            entity.Property(e => e.Sascheduleid).HasColumnName("SASCHEDULEID");
            entity.Property(e => e.Saschedulerateid)
                .ValueGeneratedOnAdd()
                .HasColumnName("SASCHEDULERATEID");
            entity.Property(e => e.Amount)
                .HasColumnType("numeric(14, 5)")
                .HasColumnName("AMOUNT");
            entity.Property(e => e.Dateeffective)
                .HasColumnType("datetime")
                .HasColumnName("DATEEFFECTIVE");
            entity.Property(e => e.Servicerateid).HasColumnName("SERVICERATEID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Saschedule).WithMany(p => p.SerSaschedulerateSas)
                .HasForeignKey(d => d.Sascheduleid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SER_SASCHEDULERATE_SA_SASCHEDULEID");

            entity.HasOne(d => d.Servicerate).WithMany(p => p.SerSaschedulerateSas)
                .HasForeignKey(d => d.Servicerateid)
                .HasConstraintName("FK_SER_SASCHEDULERATE_SA_SERVICERATEID");
        });

        modelBuilder.Entity<SerSpecialtyX>(entity =>
        {
            entity.HasKey(e => e.Servicespecialtyid);

            entity.ToTable("SER_SPECIALTY_X", tb =>
                {
                    tb.HasTrigger("auddel_SER_SPECIALTY_X");
                    tb.HasTrigger("audins_SER_SPECIALTY_X");
                    tb.HasTrigger("audupd_SER_SPECIALTY_X");
                });

            entity.HasIndex(e => new { e.Source, e.Item }, "IDX_SER_SPECIALTY_X_SOURCEITEM");

            entity.Property(e => e.Servicespecialtyid).HasColumnName("SERVICESPECIALTYID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Item)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ITEM");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Source)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE");
            entity.Property(e => e.Specialty)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SPECIALTY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<SiteLicenceSa>(entity =>
        {
            entity.HasKey(e => new { e.Siteid, e.Licenceno });

            entity.ToTable("SITE_LICENCE_SA", tb =>
                {
                    tb.HasTrigger("auddel_SITE_LICENCE_SA");
                    tb.HasTrigger("audins_SITE_LICENCE_SA");
                    tb.HasTrigger("audupd_SITE_LICENCE_SA");
                });

            entity.Property(e => e.Siteid).HasColumnName("SITEID");
            entity.Property(e => e.Licenceno).HasColumnName("LICENCENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Salicenceid).HasColumnName("SALICENCEID");
            entity.Property(e => e.Saregistrationid).HasColumnName("SAREGISTRATIONID");
            entity.Property(e => e.Saworkcoverlocationid).HasColumnName("SAWORKCOVERLOCATIONID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Salicence).WithMany(p => p.SiteLicenceSas)
                .HasForeignKey(d => d.Salicenceid)
                .HasConstraintName("FK_SITE_LICENCE_SA_SALICENCEID");

            entity.HasOne(d => d.Saregistration).WithMany(p => p.SiteLicenceSas)
                .HasForeignKey(d => d.Saregistrationid)
                .HasConstraintName("FK_SITE_LICENCE_SA_SAREGISTRATIONID");

            entity.HasOne(d => d.Saworkcoverlocation).WithMany(p => p.SiteLicenceSas)
                .HasForeignKey(d => d.Saworkcoverlocationid)
                .HasConstraintName("FK_SITE_LICENCE_SA_SAWORKCOVERLOCATIONID");

            entity.HasOne(d => d.Site).WithMany(p => p.SiteLicenceSas)
                .HasForeignKey(d => d.Siteid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SITE_LICENCE_SA_SITEID");
        });

        modelBuilder.Entity<SiteSite>(entity =>
        {
            entity.HasKey(e => e.Siteid);

            entity.ToTable("SITE_SITE", tb =>
                {
                    tb.HasTrigger("auddel_SITE_SITE");
                    tb.HasTrigger("audins_SITE_SITE");
                    tb.HasTrigger("audupd_SITE_SITE");
                });

            entity.Property(e => e.Siteid).HasColumnName("SITEID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Address1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Address3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ADDRESS3");
            entity.Property(e => e.Contactname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACTNAME");
            entity.Property(e => e.Country)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.International).HasColumnName("INTERNATIONAL");
            entity.Property(e => e.Phone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.Postcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Sitename)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SITENAME");
            entity.Property(e => e.Sitenumber)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("SITENUMBER");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Suburb)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUBURB");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<SiteSiteSa>(entity =>
        {
            entity.HasKey(e => e.Siteid);

            entity.ToTable("SITE_SITE_SA", tb =>
                {
                    tb.HasTrigger("auddel_SITE_SITE_SA");
                    tb.HasTrigger("audins_SITE_SITE_SA");
                    tb.HasTrigger("audupd_SITE_SITE_SA");
                });

            entity.Property(e => e.Siteid)
                .ValueGeneratedNever()
                .HasColumnName("SITEID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Saicindustry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SAICINDUSTRY");
            entity.Property(e => e.Sawicindustry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SAWICINDUSTRY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Site).WithOne(p => p.SiteSiteSa)
                .HasForeignKey<SiteSiteSa>(d => d.Siteid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SITE_SITE_SA_SITEID");
        });

        modelBuilder.Entity<SubDocument>(entity =>
        {
            entity.HasKey(e => new { e.Submissionid, e.Documentno });

            entity.ToTable("SUB_DOCUMENT", tb =>
                {
                    tb.HasTrigger("auddel_SUB_DOCUMENT");
                    tb.HasTrigger("audins_SUB_DOCUMENT");
                    tb.HasTrigger("audupd_SUB_DOCUMENT");
                });

            entity.Property(e => e.Submissionid).HasColumnName("SUBMISSIONID");
            entity.Property(e => e.Documentno).HasColumnName("DOCUMENTNO");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.SubDocuments)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_SUB_DOCUMENT_DOCUMENTID");

            entity.HasOne(d => d.Submission).WithMany(p => p.SubDocuments)
                .HasForeignKey(d => d.Submissionid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUB_DOCUMENT_SUBMISSIONID");
        });

        modelBuilder.Entity<SubExclusionX>(entity =>
        {
            entity.HasKey(e => e.Exclusionid);

            entity.ToTable("SUB_EXCLUSION_X", tb =>
                {
                    tb.HasTrigger("auddel_SUB_EXCLUSION_X");
                    tb.HasTrigger("audins_SUB_EXCLUSION_X");
                    tb.HasTrigger("audupd_SUB_EXCLUSION_X");
                });

            entity.Property(e => e.Exclusionid).HasColumnName("EXCLUSIONID");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<SubReportable>(entity =>
        {
            entity.HasKey(e => e.Reportableid);

            entity.ToTable("SUB_REPORTABLE", tb =>
                {
                    tb.HasTrigger("auddel_SUB_REPORTABLE");
                    tb.HasTrigger("audins_SUB_REPORTABLE");
                    tb.HasTrigger("audupd_SUB_REPORTABLE");
                });

            entity.Property(e => e.Reportableid).HasColumnName("REPORTABLEID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reportabletype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPORTABLETYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<SubReportabledate>(entity =>
        {
            entity.HasKey(e => new { e.Reportableid, e.Reportabledateno });

            entity.ToTable("SUB_REPORTABLEDATE", tb =>
                {
                    tb.HasTrigger("auddel_SUB_REPORTABLEDATE");
                    tb.HasTrigger("audins_SUB_REPORTABLEDATE");
                    tb.HasTrigger("audupd_SUB_REPORTABLEDATE");
                });

            entity.Property(e => e.Reportableid).HasColumnName("REPORTABLEID");
            entity.Property(e => e.Reportabledateno).HasColumnName("REPORTABLEDATENO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Reportabledate)
                .HasColumnType("datetime")
                .HasColumnName("REPORTABLEDATE");
            entity.Property(e => e.Reportabledatetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPORTABLEDATETYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Reportable).WithMany(p => p.SubReportabledates)
                .HasForeignKey(d => d.Reportableid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUB_REPORTABLEDATE_REPORTABLEID");
        });

        modelBuilder.Entity<SubReturnSa>(entity =>
        {
            entity.HasKey(e => e.Returnid);

            entity.ToTable("SUB_RETURN_SA", tb =>
                {
                    tb.HasTrigger("auddel_SUB_RETURN_SA");
                    tb.HasTrigger("audins_SUB_RETURN_SA");
                    tb.HasTrigger("audupd_SUB_RETURN_SA");
                });

            entity.Property(e => e.Returnid).HasColumnName("RETURNID");
            entity.Property(e => e.Datereturnfileloaded)
                .HasColumnType("datetime")
                .HasColumnName("DATERETURNFILELOADED");
            entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");
            entity.Property(e => e.Errorsconfirmed).HasColumnName("ERRORSCONFIRMED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Licenceid).HasColumnName("LICENCEID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Returnfileapplied).HasColumnName("RETURNFILEAPPLIED");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Document).WithMany(p => p.SubReturnSas)
                .HasForeignKey(d => d.Documentid)
                .HasConstraintName("FK_SUB_RETURN_SA_DOCUMENTID");

            entity.HasOne(d => d.Licence).WithMany(p => p.SubReturnSas)
                .HasForeignKey(d => d.Licenceid)
                .HasConstraintName("FK_SUB_RETURN_SA_LICENCEID");
        });

        modelBuilder.Entity<SubReturnerrorSa>(entity =>
        {
            entity.HasKey(e => new { e.Returnid, e.Returnerrorno });

            entity.ToTable("SUB_RETURNERROR_SA", tb =>
                {
                    tb.HasTrigger("auddel_SUB_RETURNERROR_SA");
                    tb.HasTrigger("audins_SUB_RETURNERROR_SA");
                    tb.HasTrigger("audupd_SUB_RETURNERROR_SA");
                });

            entity.Property(e => e.Returnid).HasColumnName("RETURNID");
            entity.Property(e => e.Returnerrorno).HasColumnName("RETURNERRORNO");
            entity.Property(e => e.Claimnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLAIMNUMBER");
            entity.Property(e => e.Errormessage)
                .IsUnicode(false)
                .HasColumnName("ERRORMESSAGE");
            entity.Property(e => e.Errortype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ERRORTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Return).WithMany(p => p.SubReturnerrorSas)
                .HasForeignKey(d => d.Returnid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUB_RETURNERROR_SA_RETURNID");
        });

        modelBuilder.Entity<SubSubmission>(entity =>
        {
            entity.HasKey(e => e.Submissionid);

            entity.ToTable("SUB_SUBMISSION", tb =>
                {
                    tb.HasTrigger("auddel_SUB_SUBMISSION");
                    tb.HasTrigger("audins_SUB_SUBMISSION");
                    tb.HasTrigger("audupd_SUB_SUBMISSION");
                });

            entity.Property(e => e.Submissionid).HasColumnName("SUBMISSIONID");
            entity.Property(e => e.Generatedbyuserid).HasColumnName("GENERATEDBYUSERID");
            entity.Property(e => e.Generatedondate)
                .HasColumnType("datetime")
                .HasColumnName("GENERATEDONDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Jurisdictionzone).HasColumnName("JURISDICTIONZONE");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Submissionperiodfrom)
                .HasColumnType("datetime")
                .HasColumnName("SUBMISSIONPERIODFROM");
            entity.Property(e => e.Submissionperiodto)
                .HasColumnType("datetime")
                .HasColumnName("SUBMISSIONPERIODTO");
            entity.Property(e => e.Submissiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUBMISSIONTYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<SubSubmissionSa>(entity =>
        {
            entity.HasKey(e => e.Submissionid);

            entity.ToTable("SUB_SUBMISSION_SA", tb =>
                {
                    tb.HasTrigger("auddel_SUB_SUBMISSION_SA");
                    tb.HasTrigger("audins_SUB_SUBMISSION_SA");
                    tb.HasTrigger("audupd_SUB_SUBMISSION_SA");
                });

            entity.Property(e => e.Submissionid)
                .ValueGeneratedNever()
                .HasColumnName("SUBMISSIONID");
            entity.Property(e => e.Firstbatchidused).HasColumnName("FIRSTBATCHIDUSED");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Lastbatchidused).HasColumnName("LASTBATCHIDUSED");
            entity.Property(e => e.Licenceid).HasColumnName("LICENCEID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Submission).WithOne(p => p.SubSubmissionSa)
                .HasForeignKey<SubSubmissionSa>(d => d.Submissionid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUB_SUBMISSION_SA_SUBMISSIONID");
        });

        modelBuilder.Entity<Systemnumber>(entity =>
        {
            entity.HasKey(e => new { e.Numbertype, e.Identifier }).HasName("pk_SYSTEMNUMBERS");

            entity.ToTable("SYSTEMNUMBERS", tb =>
                {
                    tb.HasTrigger("auddel_SYSTEMNUMBERS");
                    tb.HasTrigger("audins_SYSTEMNUMBERS");
                    tb.HasTrigger("audupd_SYSTEMNUMBERS");
                });

            entity.Property(e => e.Numbertype)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NUMBERTYPE");
            entity.Property(e => e.Identifier)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IDENTIFIER");
            entity.Property(e => e.Systemnumber1).HasColumnName("SYSTEMNUMBER");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<TeamExclusionsX>(entity =>
        {
            entity.HasKey(e => new { e.Teamid, e.Teamexclusionno });

            entity.ToTable("TEAM_EXCLUSIONS_X", tb =>
                {
                    tb.HasTrigger("auddel_TEAM_EXCLUSIONS_X");
                    tb.HasTrigger("audins_TEAM_EXCLUSIONS_X");
                    tb.HasTrigger("audupd_TEAM_EXCLUSIONS_X");
                });

            entity.Property(e => e.Teamid).HasColumnName("TEAMID");
            entity.Property(e => e.Teamexclusionno).HasColumnName("TEAMEXCLUSIONNO");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithMany(p => p.TeamExclusionsXes)
                .HasForeignKey(d => d.Claimid)
                .HasConstraintName("FK_TEAM_EXCLUSIONS_X_CLAIMID");

            entity.HasOne(d => d.Team).WithMany(p => p.TeamExclusionsXes)
                .HasForeignKey(d => d.Teamid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TEAM_EXCLUSIONS_X_TEAMID");
        });

        modelBuilder.Entity<TeamInclusionsX>(entity =>
        {
            entity.HasKey(e => new { e.Teamid, e.Teaminclusionno });

            entity.ToTable("TEAM_INCLUSIONS_X", tb =>
                {
                    tb.HasTrigger("auddel_TEAM_INCLUSIONS_X");
                    tb.HasTrigger("audins_TEAM_INCLUSIONS_X");
                    tb.HasTrigger("audupd_TEAM_INCLUSIONS_X");
                });

            entity.Property(e => e.Teamid).HasColumnName("TEAMID");
            entity.Property(e => e.Teaminclusionno).HasColumnName("TEAMINCLUSIONNO");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Claim).WithMany(p => p.TeamInclusionsXes)
                .HasForeignKey(d => d.Claimid)
                .HasConstraintName("FK_TEAM_INCLUSIONS_X_CLAIMID");

            entity.HasOne(d => d.Team).WithMany(p => p.TeamInclusionsXes)
                .HasForeignKey(d => d.Teamid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TEAM_INCLUSIONS_X_TEAMID");
        });

        modelBuilder.Entity<TeamOrgstructX>(entity =>
        {
            entity.HasKey(e => new { e.Teamid, e.Teamorgstructno });

            entity.ToTable("TEAM_ORGSTRUCT_X", tb =>
                {
                    tb.HasTrigger("auddel_TEAM_ORGSTRUCT_X");
                    tb.HasTrigger("audins_TEAM_ORGSTRUCT_X");
                    tb.HasTrigger("audupd_TEAM_ORGSTRUCT_X");
                });

            entity.Property(e => e.Teamid).HasColumnName("TEAMID");
            entity.Property(e => e.Teamorgstructno).HasColumnName("TEAMORGSTRUCTNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Orgstruct).WithMany(p => p.TeamOrgstructXes)
                .HasForeignKey(d => d.Orgstructid)
                .HasConstraintName("FK_TEAM_ORGSTRUCT_X_ORGSTRUCTID");

            entity.HasOne(d => d.Team).WithMany(p => p.TeamOrgstructXes)
                .HasForeignKey(d => d.Teamid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TEAM_ORGSTRUCT_X_TEAMID");
        });

        modelBuilder.Entity<TeamTeamX>(entity =>
        {
            entity.HasKey(e => e.Teamid);

            entity.ToTable("TEAM_TEAM_X", tb =>
                {
                    tb.HasTrigger("TRIG_TEAM_TEAM_X_SECURITY");
                    tb.HasTrigger("auddel_TEAM_TEAM_X");
                    tb.HasTrigger("audins_TEAM_TEAM_X");
                    tb.HasTrigger("audupd_TEAM_TEAM_X");
                });

            entity.Property(e => e.Teamid).HasColumnName("TEAMID");
            entity.Property(e => e.Claimrole)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMROLE");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Teamname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TEAMNAME");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Versionnumber).HasColumnName("VERSIONNUMBER");
        });

        modelBuilder.Entity<TeamUsersX>(entity =>
        {
            entity.HasKey(e => new { e.Teamid, e.Teamuserno });

            entity.ToTable("TEAM_USERS_X", tb =>
                {
                    tb.HasTrigger("auddel_TEAM_USERS_X");
                    tb.HasTrigger("audins_TEAM_USERS_X");
                    tb.HasTrigger("audupd_TEAM_USERS_X");
                });

            entity.HasIndex(e => new { e.Userid, e.Teamid }, "IX_TEAM_USERS_X");

            entity.Property(e => e.Teamid).HasColumnName("TEAMID");
            entity.Property(e => e.Teamuserno).HasColumnName("TEAMUSERNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Userid).HasColumnName("USERID");

            entity.HasOne(d => d.Team).WithMany(p => p.TeamUsersXes)
                .HasForeignKey(d => d.Teamid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TEAM_USERS_X_TEAMID");

            entity.HasOne(d => d.User).WithMany(p => p.TeamUsersXes)
                .HasForeignKey(d => d.Userid)
                .HasConstraintName("FK_TEAM_USERS_X_USERID");
        });

        modelBuilder.Entity<TempHrdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_HRDATA");

            entity.Property(e => e.Active).IsUnicode(false);
            entity.Property(e => e.AddressLine1).IsUnicode(false);
            entity.Property(e => e.AddressLine2).IsUnicode(false);
            entity.Property(e => e.Anzsco)
                .IsUnicode(false)
                .HasColumnName("ANZSCO");
            entity.Property(e => e.Atsi)
                .IsUnicode(false)
                .HasColumnName("ATSI");
            entity.Property(e => e.CountryOfBirth).IsUnicode(false);
            entity.Property(e => e.DateOfBirth).IsUnicode(false);
            entity.Property(e => e.DisplayName).IsUnicode(false);
            entity.Property(e => e.EmailAddress).IsUnicode(false);
            entity.Property(e => e.EmailAddressPersonal).IsUnicode(false);
            entity.Property(e => e.EmployeeId).IsUnicode(false);
            entity.Property(e => e.EmployeeNumber).IsUnicode(false);
            entity.Property(e => e.EmployeeStartDate).IsUnicode(false);
            entity.Property(e => e.EmploymentClassification).IsUnicode(false);
            entity.Property(e => e.EmploymentStatus).IsUnicode(false);
            entity.Property(e => e.EmploymentType).IsUnicode(false);
            entity.Property(e => e.FamilyName).IsUnicode(false);
            entity.Property(e => e.Gender).IsUnicode(false);
            entity.Property(e => e.GivenName).IsUnicode(false);
            entity.Property(e => e.HomePhone).IsUnicode(false);
            entity.Property(e => e.ImmediateSupervisorEmployeeId).IsUnicode(false);
            entity.Property(e => e.JobTitle).IsUnicode(false);
            entity.Property(e => e.Language).IsUnicode(false);
            entity.Property(e => e.MiddleName).IsUnicode(false);
            entity.Property(e => e.MobilePhone).IsUnicode(false);
            entity.Property(e => e.OrgHierarchyId).IsUnicode(false);
            entity.Property(e => e.PersonId).IsUnicode(false);
            entity.Property(e => e.PostCode).IsUnicode(false);
            entity.Property(e => e.PreferredName).IsUnicode(false);
            entity.Property(e => e.State).IsUnicode(false);
            entity.Property(e => e.Suburb).IsUnicode(false);
            entity.Property(e => e.SuperAnnuationNumber).IsUnicode(false);
            entity.Property(e => e.TerminationResignationDate).IsUnicode(false);
            entity.Property(e => e.Title).IsUnicode(false);
            entity.Property(e => e.ValidFrom).IsUnicode(false);
            entity.Property(e => e.ValidTo).IsUnicode(false);
            entity.Property(e => e.WorkPhone).IsUnicode(false);
        });

        modelBuilder.Entity<TempOrgstruct>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_ORGSTRUCT");

            entity.Property(e => e.Active)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.AuditLastModified)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Audit_LastModified");
            entity.Property(e => e.OrgCode)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrgDescription)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrgId)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrgLevel)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ParentOrgId)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempOrgstructCv>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_ORGSTRUCT_CV");

            entity.Property(e => e.Active)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.AuditCreated)
                .HasColumnType("datetime")
                .HasColumnName("Audit_Created");
            entity.Property(e => e.AuditLastModified)
                .HasColumnType("datetime")
                .HasColumnName("Audit_LastModified");
            entity.Property(e => e.OrgCode)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.OrgDescription)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.OrgHierarchyId)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.OrgParentHierarchyId)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<TempOrgstructTj>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_ORGSTRUCT_TJ");

            entity.Property(e => e.Active)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.AuditCreated)
                .HasColumnType("datetime")
                .HasColumnName("Audit_Created");
            entity.Property(e => e.AuditLastModified)
                .HasColumnType("datetime")
                .HasColumnName("Audit_LastModified");
            entity.Property(e => e.OrgCode)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.OrgDescription)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.OrgHierarchyId)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.OrgParentHierarchyId)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<TskInjuredworkerrequestX>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TSK_INJUREDWORKERREQUEST_X");

            entity.Property(e => e.Clusterid).HasColumnName("CLUSTERID");
            entity.Property(e => e.Clustertype)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("CLUSTERTYPE");
            entity.Property(e => e.Completable).HasColumnName("COMPLETABLE");
            entity.Property(e => e.Compositeid)
                .HasMaxLength(112)
                .HasColumnName("COMPOSITEID");
            entity.Property(e => e.Datecompleted).HasColumnName("DATECOMPLETED");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("DUEDATE");
            entity.Property(e => e.Extrainfo).HasColumnName("EXTRAINFO");
            entity.Property(e => e.Iconname).HasColumnName("ICONNAME");
            entity.Property(e => e.Recordguid).HasColumnName("RECORDGUID");
            entity.Property(e => e.Recordid).HasColumnName("RECORDID");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Taskdescription)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("TASKDESCRIPTION");
            entity.Property(e => e.Taskstatus).HasColumnName("TASKSTATUS");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Userid).HasColumnName("USERID");
        });

        modelBuilder.Entity<TskProviderbankrequestX>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TSK_PROVIDERBANKREQUEST_X");

            entity.Property(e => e.Clusterid).HasColumnName("CLUSTERID");
            entity.Property(e => e.Clustertype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CLUSTERTYPE");
            entity.Property(e => e.Completable).HasColumnName("COMPLETABLE");
            entity.Property(e => e.Compositeid)
                .HasMaxLength(112)
                .HasColumnName("COMPOSITEID");
            entity.Property(e => e.Datecompleted).HasColumnName("DATECOMPLETED");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("DUEDATE");
            entity.Property(e => e.Extrainfo).HasColumnName("EXTRAINFO");
            entity.Property(e => e.Iconname).HasColumnName("ICONNAME");
            entity.Property(e => e.Recordguid).HasColumnName("RECORDGUID");
            entity.Property(e => e.Recordid).HasColumnName("RECORDID");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Taskdescription)
                .HasMaxLength(247)
                .IsUnicode(false)
                .HasColumnName("TASKDESCRIPTION");
            entity.Property(e => e.Taskstatus).HasColumnName("TASKSTATUS");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Userid).HasColumnName("USERID");
        });

        modelBuilder.Entity<TskProviderrequestX>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TSK_PROVIDERREQUEST_X");

            entity.Property(e => e.Clusterid).HasColumnName("CLUSTERID");
            entity.Property(e => e.Clustertype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CLUSTERTYPE");
            entity.Property(e => e.Completable).HasColumnName("COMPLETABLE");
            entity.Property(e => e.Compositeid)
                .HasMaxLength(112)
                .HasColumnName("COMPOSITEID");
            entity.Property(e => e.Datecompleted).HasColumnName("DATECOMPLETED");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("DUEDATE");
            entity.Property(e => e.Extrainfo).HasColumnName("EXTRAINFO");
            entity.Property(e => e.Iconname).HasColumnName("ICONNAME");
            entity.Property(e => e.Recordguid).HasColumnName("RECORDGUID");
            entity.Property(e => e.Recordid).HasColumnName("RECORDID");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Taskdescription)
                .HasMaxLength(247)
                .IsUnicode(false)
                .HasColumnName("TASKDESCRIPTION");
            entity.Property(e => e.Taskstatus).HasColumnName("TASKSTATUS");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Userid).HasColumnName("USERID");
        });

        modelBuilder.Entity<TskTask>(entity =>
        {
            entity.HasKey(e => e.Taskid).IsClustered(false);

            entity.ToTable("TSK_TASK", tb =>
                {
                    tb.HasTrigger("auddel_TSK_TASK");
                    tb.HasTrigger("audins_TSK_TASK");
                    tb.HasTrigger("audupd_TSK_TASK");
                });

            entity.HasIndex(e => new { e.Tasktype, e.Compositeid }, "IDX_TSK_TASK_COMPOSITEID");

            entity.HasIndex(e => new { e.Clustertype, e.Clusterid, e.Tasktype, e.Compositeid }, "IDX_TSK_TASK_COMPOSITEIDBYCLUSTER").IsClustered();

            entity.HasIndex(e => new { e.Userid, e.Duedate, e.Clustertype, e.Clusterid }, "IDX_TSK_TASK_INCOMPLETE").HasFilter("([TASKSTATUS]=(1))");

            entity.Property(e => e.Taskid).HasColumnName("TASKID");
            entity.Property(e => e.Clusterid).HasColumnName("CLUSTERID");
            entity.Property(e => e.Clustertype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLUSTERTYPE");
            entity.Property(e => e.Completable).HasColumnName("COMPLETABLE");
            entity.Property(e => e.Compositeid)
                .HasMaxLength(240)
                .HasColumnName("COMPOSITEID");
            entity.Property(e => e.Datecompleted)
                .HasColumnType("datetime")
                .HasColumnName("DATECOMPLETED");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("DUEDATE");
            entity.Property(e => e.Extrainfo)
                .IsUnicode(false)
                .HasColumnName("EXTRAINFO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Iconname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ICONNAME");
            entity.Property(e => e.Recordguid).HasColumnName("RECORDGUID");
            entity.Property(e => e.Recordid).HasColumnName("RECORDID");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Taskdescription)
                .IsUnicode(false)
                .HasColumnName("TASKDESCRIPTION");
            entity.Property(e => e.Taskstatus).HasColumnName("TASKSTATUS");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Userid).HasColumnName("USERID");
        });

        modelBuilder.Entity<TskUserrequestX>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TSK_USERREQUEST_X");

            entity.Property(e => e.Clusterid).HasColumnName("CLUSTERID");
            entity.Property(e => e.Clustertype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("CLUSTERTYPE");
            entity.Property(e => e.Completable).HasColumnName("COMPLETABLE");
            entity.Property(e => e.Compositeid)
                .HasMaxLength(112)
                .HasColumnName("COMPOSITEID");
            entity.Property(e => e.Datecompleted).HasColumnName("DATECOMPLETED");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("DUEDATE");
            entity.Property(e => e.Extrainfo).HasColumnName("EXTRAINFO");
            entity.Property(e => e.Iconname).HasColumnName("ICONNAME");
            entity.Property(e => e.Recordguid).HasColumnName("RECORDGUID");
            entity.Property(e => e.Recordid).HasColumnName("RECORDID");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Taskdescription)
                .HasMaxLength(111)
                .IsUnicode(false)
                .HasColumnName("TASKDESCRIPTION");
            entity.Property(e => e.Taskstatus).HasColumnName("TASKSTATUS");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Userid).HasColumnName("USERID");
        });

        modelBuilder.Entity<UtilClaimcount>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("UTIL_CLAIMCOUNT");

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Currentcount).HasColumnName("CURRENTCOUNT");
            entity.Property(e => e.Totalcount).HasColumnName("TOTALCOUNT");
        });

        modelBuilder.Entity<UtilClmProvider>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("UTIL_CLM_PROVIDERS");

            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Partyid).HasColumnName("partyid");
        });

        modelBuilder.Entity<UtilMedDate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("UTIL_MED_DATE");

            entity.Property(e => e.Datefrom)
                .HasColumnType("datetime")
                .HasColumnName("DATEFROM");
            entity.Property(e => e.Dateto)
                .HasColumnType("datetime")
                .HasColumnName("DATETO");
            entity.Property(e => e.Medcertid).HasColumnName("MEDCERTID");
        });

        modelBuilder.Entity<UtilParNumber>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("UTIL_PAR_NUMBER");

            entity.Property(e => e.Number)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("number");
            entity.Property(e => e.Numbertype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("numbertype");
            entity.Property(e => e.Numbertypecodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("numbertypecodetype");
            entity.Property(e => e.Partyid).HasColumnName("partyid");
        });

        modelBuilder.Entity<VclmAvailabletransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_AVAILABLETRANSACTIONS");

            entity.Property(e => e.Accountid).HasColumnName("ACCOUNTID");
            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Matchedamount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("matchedamount");
            entity.Property(e => e.Partyid).HasColumnName("PARTYID");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORY");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPE");
            entity.Property(e => e.Referencenumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REFERENCENUMBER");
            entity.Property(e => e.Totalamount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("TOTALAMOUNT");
            entity.Property(e => e.Transactionid).HasColumnName("TRANSACTIONID");
        });

        modelBuilder.Entity<VclmClaimsummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_CLAIMSUMMARY");

            entity.Property(e => e.Claimid)
                .ValueGeneratedOnAdd()
                .HasColumnName("CLAIMID");
            entity.Property(e => e.Weekspaid).HasColumnName("WEEKSPAID");
        });

        modelBuilder.Entity<VclmComppayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_COMPPAYMENTS");

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Compensationfromdate)
                .HasColumnType("datetime")
                .HasColumnName("COMPENSATIONFROMDATE");
            entity.Property(e => e.Compensationtodate)
                .HasColumnType("datetime")
                .HasColumnName("COMPENSATIONTODATE");
            entity.Property(e => e.Comppay)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("comppay");
            entity.Property(e => e.Dateauthorised)
                .HasColumnType("datetime")
                .HasColumnName("DATEAUTHORISED");
            entity.Property(e => e.Paymentno).HasColumnName("PAYMENTNO");
        });

        modelBuilder.Entity<VclmEditriggerSa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_EDITRIGGER_SA");

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Triggerdate)
                .HasColumnType("datetime")
                .HasColumnName("TRIGGERDATE");
        });

        modelBuilder.Entity<VclmEstimateadjustment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_ESTIMATEADJUSTMENTS");

            entity.Property(e => e.Changedbyuserid).HasColumnName("CHANGEDBYUSERID");
            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("datetimechanged");
            entity.Property(e => e.Estimatecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESTIMATECATEGORY");
            entity.Property(e => e.Estimateno).HasColumnName("estimateno");
            entity.Property(e => e.Incurredamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("incurredamount");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.Paiditemtotal)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PAIDITEMTOTAL");
            entity.Property(e => e.Paymentid).HasColumnName("paymentid");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("reason");
        });

        modelBuilder.Entity<VclmEstimatehistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_ESTIMATEHISTORY");

            entity.Property(e => e.Changedbyuserid).HasColumnName("changedbyuserid");
            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("datetimechanged");
            entity.Property(e => e.Estimatecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("estimatecategory");
            entity.Property(e => e.Estimateno).HasColumnName("estimateno");
            entity.Property(e => e.Incurredvariation)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("incurredvariation");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.Paymentid).HasColumnName("paymentid");
            entity.Property(e => e.Paymentvariation)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("paymentvariation");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("reason");
            entity.Property(e => e.Totalincurred)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("totalincurred");
            entity.Property(e => e.Totalpaid)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("totalpaid");
        });

        modelBuilder.Entity<VclmEstimatesummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_ESTIMATESUMMARY");

            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Estimatecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESTIMATECATEGORY");
            entity.Property(e => e.Estimatecategorydisplay)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESTIMATECATEGORYDISPLAY");
            entity.Property(e => e.Incurredamount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("incurredamount");
            entity.Property(e => e.Outstanding)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("outstanding");
            entity.Property(e => e.Paidamount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("paidamount");
            entity.Property(e => e.Pendingpaidamount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("pendingpaidamount");
        });

        modelBuilder.Entity<VclmLiability>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_LIABILITY");

            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Dateliabilitychanged)
                .HasColumnType("datetime")
                .HasColumnName("DATELIABILITYCHANGED");
            entity.Property(e => e.Liability)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITY");
            entity.Property(e => e.Liabilitycodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITYCODETYPE");
            entity.Property(e => e.Liabilitydate)
                .HasColumnType("datetime")
                .HasColumnName("LIABILITYDATE");
            entity.Property(e => e.Liabilitydisplayvalue)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITYDISPLAYVALUE");
        });

        modelBuilder.Entity<VclmLiabilityhistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_LIABILITYHISTORY");

            entity.Property(e => e.Changedby).HasColumnName("CHANGEDBY");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Dateliabilitychanged)
                .HasColumnType("datetime")
                .HasColumnName("DATELIABILITYCHANGED");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Liability)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITY");
            entity.Property(e => e.Liabilitycodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITYCODETYPE");
            entity.Property(e => e.Liabilitydate)
                .HasColumnType("datetime")
                .HasColumnName("LIABILITYDATE");
            entity.Property(e => e.Liabilitydisplayvalue)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIABILITYDISPLAYVALUE");
            entity.Property(e => e.Liabilityhistoryno).HasColumnName("LIABILITYHISTORYNO");
        });

        modelBuilder.Entity<VclmMatchedtransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_MATCHEDTRANSACTIONS");

            entity.Property(e => e.Accountid).HasColumnName("accountid");
            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Matchedamount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("matchedamount");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("paymentcategory");
            entity.Property(e => e.Paymentid).HasColumnName("paymentid");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("paymenttype");
            entity.Property(e => e.Transactionid).HasColumnName("transactionid");
        });

        modelBuilder.Entity<VclmPaymentitem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_PAYMENTITEMS");

            entity.Property(e => e.Accountid).HasColumnName("ACCOUNTID");
            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Estimatecategorycodevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESTIMATECATEGORYCODEVALUE");
            entity.Property(e => e.Itemamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("ITEMAMOUNT");
            entity.Property(e => e.Itemdescription)
                .IsUnicode(false)
                .HasColumnName("ITEMDESCRIPTION");
            entity.Property(e => e.Itemgst)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("ITEMGST");
            entity.Property(e => e.Itemno).HasColumnName("ITEMNO");
            entity.Property(e => e.Itemnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ITEMNUMBER");
            entity.Property(e => e.Itemstatuscodevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEMSTATUSCODEVALUE");
            entity.Property(e => e.Itemtotal)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("ITEMTOTAL");
            entity.Property(e => e.Paiditemamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PAIDITEMAMOUNT");
            entity.Property(e => e.Paiditemgst)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PAIDITEMGST");
            entity.Property(e => e.Paiditemtotal)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PAIDITEMTOTAL");
            entity.Property(e => e.Paidsurcharge)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("PAIDSURCHARGE");
            entity.Property(e => e.Paymentcategorycodevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORYCODEVALUE");
            entity.Property(e => e.Paymentid).HasColumnName("PAYMENTID");
            entity.Property(e => e.Paymenttypecodevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPECODEVALUE");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Scheduledamount)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("SCHEDULEDAMOUNT");
            entity.Property(e => e.Servicedate)
                .HasColumnType("datetime")
                .HasColumnName("SERVICEDATE");
            entity.Property(e => e.Serviceproviderpartyid).HasColumnName("SERVICEPROVIDERPARTYID");
            entity.Property(e => e.Supplierreference)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SUPPLIERREFERENCE");
            entity.Property(e => e.Surcharge)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("SURCHARGE");
            entity.Property(e => e.Taxstatuscodevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TAXSTATUSCODEVALUE");
            entity.Property(e => e.Variationreason)
                .IsUnicode(false)
                .HasColumnName("VARIATIONREASON");
        });

        modelBuilder.Entity<VclmRecoveryadjustment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_RECOVERYADJUSTMENTS");

            entity.Property(e => e.Changedbyuserid).HasColumnName("CHANGEDBYUSERID");
            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("datetimechanged");
            entity.Property(e => e.Estimatedrecoveryamount)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("ESTIMATEDRECOVERYAMOUNT");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("reason");
            entity.Property(e => e.Recoveredamount)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("RECOVEREDAMOUNT");
            entity.Property(e => e.Recoveryestimatecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECOVERYESTIMATECATEGORY");
            entity.Property(e => e.Recoveryestimateno).HasColumnName("RECOVERYESTIMATENO");
            entity.Property(e => e.Recoveryid).HasColumnName("recoveryid");
        });

        modelBuilder.Entity<VclmRecoveryhistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_RECOVERYHISTORY");

            entity.Property(e => e.Changedbyuserid).HasColumnName("changedbyuserid");
            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Datetimechanged)
                .HasColumnType("datetime")
                .HasColumnName("datetimechanged");
            entity.Property(e => e.Estimatedrecoveryvariation)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("estimatedrecoveryvariation");
            entity.Property(e => e.Reason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("reason");
            entity.Property(e => e.Recoveryestimatecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("recoveryestimatecategory");
            entity.Property(e => e.Recoveryestimateno).HasColumnName("recoveryestimateno");
            entity.Property(e => e.Recoveryid).HasColumnName("recoveryid");
            entity.Property(e => e.Recoveryvariation)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("recoveryvariation");
            entity.Property(e => e.Totalestimatedrecovery)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("totalestimatedrecovery");
            entity.Property(e => e.Totalrecovered)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("totalrecovered");
        });

        modelBuilder.Entity<VclmRecoverysummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_RECOVERYSUMMARY");

            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Outstandingrecoveries)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("outstandingrecoveries");
            entity.Property(e => e.Pendingrecoveries)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("pendingrecoveries");
            entity.Property(e => e.Recoveryestimatecatdisplay)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECOVERYESTIMATECATDISPLAY");
            entity.Property(e => e.Recoveryestimatecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECOVERYESTIMATECATEGORY");
            entity.Property(e => e.Totalrecovered)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("totalrecovered");
            entity.Property(e => e.Totalrecoveryestimate)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("totalrecoveryestimate");
        });

        modelBuilder.Entity<VclmRtwstatushistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_RTWSTATUSHISTORY");

            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("FROMDATE");
            entity.Property(e => e.Rtwstatusno).HasColumnName("rtwstatusno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODATE");
        });

        modelBuilder.Entity<VclmRtwstatusmeasure>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_RTWSTATUSMEASURES");

            entity.Property(e => e.Claimid).HasColumnName("CLAIMID");
            entity.Property(e => e.Rtwdate103week)
                .HasColumnType("datetime")
                .HasColumnName("RTWDATE103WEEK");
            entity.Property(e => e.Rtwdate13week)
                .HasColumnType("datetime")
                .HasColumnName("RTWDATE13WEEK");
            entity.Property(e => e.Rtwdate26week)
                .HasColumnType("datetime")
                .HasColumnName("RTWDATE26WEEK");
            entity.Property(e => e.Rtwdate4week)
                .HasColumnType("datetime")
                .HasColumnName("RTWDATE4WEEK");
            entity.Property(e => e.Rtwdate52week)
                .HasColumnType("datetime")
                .HasColumnName("RTWDATE52WEEK");
            entity.Property(e => e.Rtwdate78week)
                .HasColumnType("datetime")
                .HasColumnName("RTWDATE78WEEK");
            entity.Property(e => e.Rtwstatus103week)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RTWSTATUS103WEEK");
            entity.Property(e => e.Rtwstatus13week)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RTWSTATUS13WEEK");
            entity.Property(e => e.Rtwstatus26week)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RTWSTATUS26WEEK");
            entity.Property(e => e.Rtwstatus4week)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RTWSTATUS4WEEK");
            entity.Property(e => e.Rtwstatus52week)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RTWSTATUS52WEEK");
            entity.Property(e => e.Rtwstatus78week)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RTWSTATUS78WEEK");
        });

        modelBuilder.Entity<VclmSecurityX>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_SECURITY_X");

            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Userid).HasColumnName("USERID");
            entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
        });

        modelBuilder.Entity<VclmStatushistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCLM_STATUSHISTORY");

            entity.Property(e => e.Claimid).HasColumnName("claimid");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("FROMDATE");
            entity.Property(e => e.Statusno).HasColumnName("statusno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODATE");
        });

        modelBuilder.Entity<VevtAssociateduser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VEVT_ASSOCIATEDUSERS");

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Userid).HasColumnName("USERID");
        });

        modelBuilder.Entity<VincAssociateduser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VINC_ASSOCIATEDUSERS");

            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Userid).HasColumnName("USERID");
        });

        modelBuilder.Entity<VincAssociatedwh>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VINC_ASSOCIATEDWHS");

            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Userid).HasColumnName("USERID");
        });

        modelBuilder.Entity<VincResponsibleuser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VINC_RESPONSIBLEUSERS");

            entity.Property(e => e.Hrid).HasColumnName("HRID");
            entity.Property(e => e.Incidentid).HasColumnName("INCIDENTID");
            entity.Property(e => e.Userid).HasColumnName("USERID");
        });

        modelBuilder.Entity<VincSecurityX>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VINC_SECURITY_X");

            entity.Property(e => e.Teamid).HasColumnName("teamid");
            entity.Property(e => e.Versionnumber).HasColumnName("VERSIONNUMBER");
        });

        modelBuilder.Entity<VosOrgstructure>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VOS_ORGSTRUCTURE");

            entity.Property(e => e.Codetype1)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codetype1");
            entity.Property(e => e.Codetype10)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codetype10");
            entity.Property(e => e.Codetype11)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codetype11");
            entity.Property(e => e.Codetype12)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codetype12");
            entity.Property(e => e.Codetype13)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codetype13");
            entity.Property(e => e.Codetype14)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codetype14");
            entity.Property(e => e.Codetype15)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codetype15");
            entity.Property(e => e.Codetype2)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codetype2");
            entity.Property(e => e.Codetype3)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codetype3");
            entity.Property(e => e.Codetype4)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codetype4");
            entity.Property(e => e.Codetype5)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codetype5");
            entity.Property(e => e.Codetype6)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codetype6");
            entity.Property(e => e.Codetype7)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codetype7");
            entity.Property(e => e.Codetype8)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codetype8");
            entity.Property(e => e.Codetype9)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codetype9");
            entity.Property(e => e.Displayvalue1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("displayvalue1");
            entity.Property(e => e.Displayvalue10)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("displayvalue10");
            entity.Property(e => e.Displayvalue11)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("displayvalue11");
            entity.Property(e => e.Displayvalue12)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("displayvalue12");
            entity.Property(e => e.Displayvalue13)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("displayvalue13");
            entity.Property(e => e.Displayvalue14)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("displayvalue14");
            entity.Property(e => e.Displayvalue15)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("displayvalue15");
            entity.Property(e => e.Displayvalue2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("displayvalue2");
            entity.Property(e => e.Displayvalue3)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("displayvalue3");
            entity.Property(e => e.Displayvalue4)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("displayvalue4");
            entity.Property(e => e.Displayvalue5)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("displayvalue5");
            entity.Property(e => e.Displayvalue6)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("displayvalue6");
            entity.Property(e => e.Displayvalue7)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("displayvalue7");
            entity.Property(e => e.Displayvalue8)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("displayvalue8");
            entity.Property(e => e.Displayvalue9)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("displayvalue9");
            entity.Property(e => e.Guid1).HasColumnName("guid1");
            entity.Property(e => e.Guid10).HasColumnName("guid10");
            entity.Property(e => e.Guid11).HasColumnName("guid11");
            entity.Property(e => e.Guid12).HasColumnName("guid12");
            entity.Property(e => e.Guid13).HasColumnName("guid13");
            entity.Property(e => e.Guid14).HasColumnName("guid14");
            entity.Property(e => e.Guid15).HasColumnName("guid15");
            entity.Property(e => e.Guid2).HasColumnName("guid2");
            entity.Property(e => e.Guid3).HasColumnName("guid3");
            entity.Property(e => e.Guid4).HasColumnName("guid4");
            entity.Property(e => e.Guid5).HasColumnName("guid5");
            entity.Property(e => e.Guid6).HasColumnName("guid6");
            entity.Property(e => e.Guid7).HasColumnName("guid7");
            entity.Property(e => e.Guid8).HasColumnName("guid8");
            entity.Property(e => e.Guid9).HasColumnName("guid9");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Tablename1)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("tablename1");
            entity.Property(e => e.Tablename10)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tablename10");
            entity.Property(e => e.Tablename11)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tablename11");
            entity.Property(e => e.Tablename12)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tablename12");
            entity.Property(e => e.Tablename13)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tablename13");
            entity.Property(e => e.Tablename14)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tablename14");
            entity.Property(e => e.Tablename15)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tablename15");
            entity.Property(e => e.Tablename2)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("tablename2");
            entity.Property(e => e.Tablename3)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("tablename3");
            entity.Property(e => e.Tablename4)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("tablename4");
            entity.Property(e => e.Tablename5)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("tablename5");
            entity.Property(e => e.Tablename6)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("tablename6");
            entity.Property(e => e.Tablename7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tablename7");
            entity.Property(e => e.Tablename8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tablename8");
            entity.Property(e => e.Tablename9)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tablename9");
            entity.Property(e => e.Value1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("value1");
            entity.Property(e => e.Value10)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("value10");
            entity.Property(e => e.Value11)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("value11");
            entity.Property(e => e.Value12)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("value12");
            entity.Property(e => e.Value13)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("value13");
            entity.Property(e => e.Value14)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("value14");
            entity.Property(e => e.Value15)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("value15");
            entity.Property(e => e.Value2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("value2");
            entity.Property(e => e.Value3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("value3");
            entity.Property(e => e.Value4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("value4");
            entity.Property(e => e.Value5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("value5");
            entity.Property(e => e.Value6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("value6");
            entity.Property(e => e.Value7)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("value7");
            entity.Property(e => e.Value8)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("value8");
            entity.Property(e => e.Value9)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("value9");
        });

        modelBuilder.Entity<WfAction>(entity =>
        {
            entity.HasKey(e => new { e.Workflowid, e.Timeframeno, e.Actionno });

            entity.ToTable("WF_ACTION", tb =>
                {
                    tb.HasTrigger("auddel_WF_ACTION");
                    tb.HasTrigger("audins_WF_ACTION");
                    tb.HasTrigger("audupd_WF_ACTION");
                });

            entity.Property(e => e.Workflowid).HasColumnName("WORKFLOWID");
            entity.Property(e => e.Timeframeno).HasColumnName("TIMEFRAMENO");
            entity.Property(e => e.Actionno).HasColumnName("ACTIONNO");
            entity.Property(e => e.Actionchronology).HasColumnName("ACTIONCHRONOLOGY");
            entity.Property(e => e.Actiontype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ACTIONTYPE");
            entity.Property(e => e.Days).HasColumnName("DAYS");
            entity.Property(e => e.Performwhen)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERFORMWHEN");
            entity.Property(e => e.Recurring).HasColumnName("RECURRING");
            entity.Property(e => e.Recurringdays).HasColumnName("RECURRINGDAYS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Workflow).WithMany(p => p.WfActions)
                .HasForeignKey(d => d.Workflowid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_ACTION_WORKFLOWID");

            entity.HasOne(d => d.WfTimeframe).WithMany(p => p.WfActions)
                .HasForeignKey(d => new { d.Workflowid, d.Timeframeno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_ACTION_WORKFLOWID_TIMEFRAMENO");
        });

        modelBuilder.Entity<WfActionDetail>(entity =>
        {
            entity.HasKey(e => new { e.Workflowid, e.Timeframeno, e.Actionno });

            entity.ToTable("WF_ACTION_DETAILS", tb =>
                {
                    tb.HasTrigger("auddel_WF_ACTION_DETAILS");
                    tb.HasTrigger("audins_WF_ACTION_DETAILS");
                    tb.HasTrigger("audupd_WF_ACTION_DETAILS");
                });

            entity.Property(e => e.Workflowid).HasColumnName("WORKFLOWID");
            entity.Property(e => e.Timeframeno).HasColumnName("TIMEFRAMENO");
            entity.Property(e => e.Actionno).HasColumnName("ACTIONNO");
            entity.Property(e => e.Alerttext)
                .IsUnicode(false)
                .HasColumnName("ALERTTEXT");
            entity.Property(e => e.Emailbody)
                .IsUnicode(false)
                .HasColumnName("EMAILBODY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Smstext)
                .HasMaxLength(160)
                .IsUnicode(false)
                .HasColumnName("SMSTEXT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.WfAction).WithOne(p => p.WfActionDetail)
                .HasForeignKey<WfActionDetail>(d => new { d.Workflowid, d.Timeframeno, d.Actionno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_ACTION_DETAILS_WF_ACTION");
        });

        modelBuilder.Entity<WfActionposition>(entity =>
        {
            entity.HasKey(e => new { e.Workflowid, e.Timeframeno, e.Actionno, e.Positionno });

            entity.ToTable("WF_ACTIONPOSITION", tb =>
                {
                    tb.HasTrigger("auddel_WF_ACTIONPOSITION");
                    tb.HasTrigger("audins_WF_ACTIONPOSITION");
                    tb.HasTrigger("audupd_WF_ACTIONPOSITION");
                });

            entity.Property(e => e.Workflowid).HasColumnName("WORKFLOWID");
            entity.Property(e => e.Timeframeno).HasColumnName("TIMEFRAMENO");
            entity.Property(e => e.Actionno).HasColumnName("ACTIONNO");
            entity.Property(e => e.Positionno).HasColumnName("POSITIONNO");
            entity.Property(e => e.Positionid).HasColumnName("POSITIONID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Position).WithMany(p => p.WfActionpositions)
                .HasForeignKey(d => d.Positionid)
                .HasConstraintName("FK_WF_ACTIONPOSITION_SEC_POSITION");

            entity.HasOne(d => d.WfAction).WithMany(p => p.WfActionpositions)
                .HasForeignKey(d => new { d.Workflowid, d.Timeframeno, d.Actionno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_ACTIONPOSITION_WF_ACTION");
        });

        modelBuilder.Entity<WfActionrole>(entity =>
        {
            entity.HasKey(e => new { e.Workflowid, e.Timeframeno, e.Actionno, e.Roleno });

            entity.ToTable("WF_ACTIONROLE", tb =>
                {
                    tb.HasTrigger("auddel_WF_ACTIONROLE");
                    tb.HasTrigger("audins_WF_ACTIONROLE");
                    tb.HasTrigger("audupd_WF_ACTIONROLE");
                });

            entity.Property(e => e.Workflowid).HasColumnName("WORKFLOWID");
            entity.Property(e => e.Timeframeno).HasColumnName("TIMEFRAMENO");
            entity.Property(e => e.Actionno).HasColumnName("ACTIONNO");
            entity.Property(e => e.Roleno).HasColumnName("ROLENO");
            entity.Property(e => e.Role)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.WfAction).WithMany(p => p.WfActionroles)
                .HasForeignKey(d => new { d.Workflowid, d.Timeframeno, d.Actionno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_ACTIONROLE_WF_ACTION");
        });

        modelBuilder.Entity<WfEscalatetoteam>(entity =>
        {
            entity.HasKey(e => new { e.Workflowid, e.Escalatetono });

            entity.ToTable("WF_ESCALATETOTEAM", tb =>
                {
                    tb.HasTrigger("auddel_WF_ESCALATETOTEAM");
                    tb.HasTrigger("audins_WF_ESCALATETOTEAM");
                    tb.HasTrigger("audupd_WF_ESCALATETOTEAM");
                });

            entity.Property(e => e.Workflowid).HasColumnName("WORKFLOWID");
            entity.Property(e => e.Escalatetono).HasColumnName("ESCALATETONO");
            entity.Property(e => e.Teamrole)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAMROLE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Workflow).WithMany(p => p.WfEscalatetoteams)
                .HasForeignKey(d => d.Workflowid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_ESCALATETOTEAM_WORKFLOWID");
        });

        modelBuilder.Entity<WfEvent>(entity =>
        {
            entity.HasKey(e => e.Eventid);

            entity.ToTable("WF_EVENT", tb =>
                {
                    tb.HasTrigger("auddel_WF_EVENT");
                    tb.HasTrigger("audins_WF_EVENT");
                    tb.HasTrigger("audupd_WF_EVENT");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Chronology)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CHRONOLOGY");
            entity.Property(e => e.Description)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Eventname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EVENTNAME");
            entity.Property(e => e.Eventtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVENTTYPE");
            entity.Property(e => e.Quantity)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("QUANTITY");
            entity.Property(e => e.Terminatingevent).HasColumnName("TERMINATINGEVENT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<WfEventCode>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Codeno });

            entity.ToTable("WF_EVENT_CODES", tb =>
                {
                    tb.HasTrigger("auddel_WF_EVENT_CODES");
                    tb.HasTrigger("audins_WF_EVENT_CODES");
                    tb.HasTrigger("audupd_WF_EVENT_CODES");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Codeno).HasColumnName("CODENO");
            entity.Property(e => e.Codetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CODETYPE");
            entity.Property(e => e.Codevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CODEVALUE");
            entity.Property(e => e.Fromto).HasColumnName("FROMTO");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Event).WithMany(p => p.WfEventCodes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_EVENT_CODES_WF_EVENT");
        });

        modelBuilder.Entity<WfEventCriterion>(entity =>
        {
            entity.HasKey(e => e.Eventid);

            entity.ToTable("WF_EVENT_CRITERIA", tb =>
                {
                    tb.HasTrigger("auddel_WF_EVENT_CRITERIA");
                    tb.HasTrigger("audins_WF_EVENT_CRITERIA");
                    tb.HasTrigger("audupd_WF_EVENT_CRITERIA");
                });

            entity.Property(e => e.Eventid)
                .ValueGeneratedNever()
                .HasColumnName("EVENTID");
            entity.Property(e => e.Disputetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DISPUTETYPE");
            entity.Property(e => e.Documentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTCATEGORY");
            entity.Property(e => e.Documentsource)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTSOURCE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Filenotecategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILENOTECATEGORY");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Investigationtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INVESTIGATIONTYPE");
            entity.Property(e => e.Jurisdictionzone).HasColumnName("JURISDICTIONZONE");
            entity.Property(e => e.Paymentcategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTCATEGORY");
            entity.Property(e => e.Paymenttype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PAYMENTTYPE");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Referraltype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REFERRALTYPE");
            entity.Property(e => e.Roletype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLETYPE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Event).WithOne(p => p.WfEventCriterion)
                .HasForeignKey<WfEventCriterion>(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_EVENT_CRITERIA_EVENTID");
        });

        modelBuilder.Entity<WfEventOrgstructX>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Orgstructno });

            entity.ToTable("WF_EVENT_ORGSTRUCT_X", tb =>
                {
                    tb.HasTrigger("auddel_WF_EVENT_ORGSTRUCT_X");
                    tb.HasTrigger("audins_WF_EVENT_ORGSTRUCT_X");
                    tb.HasTrigger("audupd_WF_EVENT_ORGSTRUCT_X");
                });

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Orgstructno).HasColumnName("ORGSTRUCTNO");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Orgstructid).HasColumnName("ORGSTRUCTID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Event).WithMany(p => p.WfEventOrgstructXes)
                .HasForeignKey(d => d.Eventid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_EVENT_ORGSTRUCT_X_EVENTID");

            entity.HasOne(d => d.Orgstruct).WithMany(p => p.WfEventOrgstructXes)
                .HasForeignKey(d => d.Orgstructid)
                .HasConstraintName("FK_WF_EVENT_ORGSTRUCT_X_ORGSTRUCTID");
        });

        modelBuilder.Entity<WfInitiatingevent>(entity =>
        {
            entity.HasKey(e => new { e.Workflowid, e.Initiatingeventno });

            entity.ToTable("WF_INITIATINGEVENTS", tb =>
                {
                    tb.HasTrigger("auddel_WF_INITIATINGEVENTS");
                    tb.HasTrigger("audins_WF_INITIATINGEVENTS");
                    tb.HasTrigger("audupd_WF_INITIATINGEVENTS");
                });

            entity.Property(e => e.Workflowid).HasColumnName("WORKFLOWID");
            entity.Property(e => e.Initiatingeventno).HasColumnName("INITIATINGEVENTNO");
            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Workflow).WithMany(p => p.WfInitiatingevents)
                .HasForeignKey(d => d.Workflowid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_INITIATINGEVENTS_WORKFLOWID");
        });

        modelBuilder.Entity<WfQueue>(entity =>
        {
            entity.HasKey(e => e.Workflowqueueid);

            entity.ToTable("WF_QUEUE", tb =>
                {
                    tb.HasTrigger("auddel_WF_QUEUE");
                    tb.HasTrigger("audins_WF_QUEUE");
                    tb.HasTrigger("audupd_WF_QUEUE");
                });

            entity.Property(e => e.Workflowqueueid).HasColumnName("WORKFLOWQUEUEID");
            entity.Property(e => e.Clusterid).HasColumnName("CLUSTERID");
            entity.Property(e => e.Clustertype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLUSTERTYPE");
            entity.Property(e => e.Datetimequeued)
                .HasColumnType("datetime")
                .HasColumnName("DATETIMEQUEUED");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdatetime)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATETIME");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<WfTerminatingevent>(entity =>
        {
            entity.HasKey(e => new { e.Workflowid, e.Terminatingeventno });

            entity.ToTable("WF_TERMINATINGEVENTS", tb =>
                {
                    tb.HasTrigger("auddel_WF_TERMINATINGEVENTS");
                    tb.HasTrigger("audins_WF_TERMINATINGEVENTS");
                    tb.HasTrigger("audupd_WF_TERMINATINGEVENTS");
                });

            entity.Property(e => e.Workflowid).HasColumnName("WORKFLOWID");
            entity.Property(e => e.Terminatingeventno).HasColumnName("TERMINATINGEVENTNO");
            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Workflow).WithMany(p => p.WfTerminatingevents)
                .HasForeignKey(d => d.Workflowid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_TERMINATINGEVENTS_WORKFLOWID");
        });

        modelBuilder.Entity<WfTfinitevent>(entity =>
        {
            entity.HasKey(e => new { e.Workflowid, e.Timeframeno, e.Initeventno });

            entity.ToTable("WF_TFINITEVENTS", tb =>
                {
                    tb.HasTrigger("auddel_WF_TFINITEVENTS");
                    tb.HasTrigger("audins_WF_TFINITEVENTS");
                    tb.HasTrigger("audupd_WF_TFINITEVENTS");
                });

            entity.Property(e => e.Workflowid).HasColumnName("WORKFLOWID");
            entity.Property(e => e.Timeframeno).HasColumnName("TIMEFRAMENO");
            entity.Property(e => e.Initeventno).HasColumnName("INITEVENTNO");
            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Workflow).WithMany(p => p.WfTfinitevents)
                .HasForeignKey(d => d.Workflowid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_TFINITEVENTS_WORKFLOWID");

            entity.HasOne(d => d.WfTimeframe).WithMany(p => p.WfTfinitevents)
                .HasForeignKey(d => new { d.Workflowid, d.Timeframeno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_TFINITEVENTS_WORKFLOWID_TIMEFRAMENO");
        });

        modelBuilder.Entity<WfTfsatisfyingevent>(entity =>
        {
            entity.HasKey(e => new { e.Workflowid, e.Timeframeno, e.Statisfyingeventno });

            entity.ToTable("WF_TFSATISFYINGEVENTS", tb =>
                {
                    tb.HasTrigger("auddel_WF_TFSATISFYINGEVENTS");
                    tb.HasTrigger("audins_WF_TFSATISFYINGEVENTS");
                    tb.HasTrigger("audupd_WF_TFSATISFYINGEVENTS");
                });

            entity.Property(e => e.Workflowid).HasColumnName("WORKFLOWID");
            entity.Property(e => e.Timeframeno).HasColumnName("TIMEFRAMENO");
            entity.Property(e => e.Statisfyingeventno).HasColumnName("STATISFYINGEVENTNO");
            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Workflow).WithMany(p => p.WfTfsatisfyingevents)
                .HasForeignKey(d => d.Workflowid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_TFSATISFYINGEVENTS_WORKFLOWID");

            entity.HasOne(d => d.WfTimeframe).WithMany(p => p.WfTfsatisfyingevents)
                .HasForeignKey(d => new { d.Workflowid, d.Timeframeno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_TFSATISFYINGEVENTS_WORKFLOWID_TIMEFRAMENO");
        });

        modelBuilder.Entity<WfTimeframe>(entity =>
        {
            entity.HasKey(e => new { e.Workflowid, e.Timeframeno });

            entity.ToTable("WF_TIMEFRAME", tb =>
                {
                    tb.HasTrigger("auddel_WF_TIMEFRAME");
                    tb.HasTrigger("audins_WF_TIMEFRAME");
                    tb.HasTrigger("audupd_WF_TIMEFRAME");
                });

            entity.Property(e => e.Workflowid).HasColumnName("WORKFLOWID");
            entity.Property(e => e.Timeframeno).HasColumnName("TIMEFRAMENO");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Applycurrentdate).HasColumnName("APPLYCURRENTDATE");
            entity.Property(e => e.Applyhistoricaldate).HasColumnName("APPLYHISTORICALDATE");
            entity.Property(e => e.Businessdays).HasColumnName("BUSINESSDAYS");
            entity.Property(e => e.Description)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Initbyallevent).HasColumnName("INITBYALLEVENT");
            entity.Property(e => e.Initbyanyevent).HasColumnName("INITBYANYEVENT");
            entity.Property(e => e.Initbytimeframe).HasColumnName("INITBYTIMEFRAME");
            entity.Property(e => e.Initbyworkflow).HasColumnName("INITBYWORKFLOW");
            entity.Property(e => e.Othertimeframeno).HasColumnName("OTHERTIMEFRAMENO");
            entity.Property(e => e.Perioddays).HasColumnName("PERIODDAYS");
            entity.Property(e => e.Periodweeks).HasColumnName("PERIODWEEKS");
            entity.Property(e => e.Periodyears).HasColumnName("PERIODYEARS");
            entity.Property(e => e.Relativeto)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATIVETO");
            entity.Property(e => e.Responsibilityof)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RESPONSIBILITYOF");
            entity.Property(e => e.Satisfyingevent).HasColumnName("SATISFYINGEVENT");
            entity.Property(e => e.Timeframename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TIMEFRAMENAME");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Workflow).WithMany(p => p.WfTimeframes)
                .HasForeignKey(d => d.Workflowid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_TIMEFRAME_WORKFLOWID");
        });

        modelBuilder.Entity<WfWorkflow>(entity =>
        {
            entity.HasKey(e => e.Workflowid);

            entity.ToTable("WF_WORKFLOW", tb =>
                {
                    tb.HasTrigger("auddel_WF_WORKFLOW");
                    tb.HasTrigger("audins_WF_WORKFLOW");
                    tb.HasTrigger("audupd_WF_WORKFLOW");
                });

            entity.Property(e => e.Workflowid).HasColumnName("WORKFLOWID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Daysoverdue).HasColumnName("DAYSOVERDUE");
            entity.Property(e => e.Description)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENTITYTYPE");
            entity.Property(e => e.Escalate).HasColumnName("ESCALATE");
            entity.Property(e => e.Initiatingevent).HasColumnName("INITIATINGEVENT");
            entity.Property(e => e.Other).HasColumnName("OTHER");
            entity.Property(e => e.Otherid).HasColumnName("OTHERID");
            entity.Property(e => e.Terminatingevent).HasColumnName("TERMINATINGEVENT");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Weeksoverdue).HasColumnName("WEEKSOVERDUE");
            entity.Property(e => e.Workflowname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WORKFLOWNAME");
        });

        modelBuilder.Entity<WfxEntity>(entity =>
        {
            entity.HasKey(e => new { e.Entitytype, e.Entityid });

            entity.ToTable("WFX_ENTITIES");

            entity.HasIndex(e => new { e.Clustertype, e.Clusterid }, "IDX_WFX_ENTITIES_CLUSTERED");

            entity.HasIndex(e => new { e.Clustertype, e.Guid }, "IDX_WFX_ENTITIES_CLUSTERGUID");

            entity.Property(e => e.Entitytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENTITYTYPE");
            entity.Property(e => e.Entityid).HasColumnName("ENTITYID");
            entity.Property(e => e.Clusterid).HasColumnName("CLUSTERID");
            entity.Property(e => e.Clustertype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLUSTERTYPE");
            entity.Property(e => e.Entitytime)
                .HasColumnType("datetime")
                .HasColumnName("ENTITYTIME");
            entity.Property(e => e.Guid).HasColumnName("GUID");
        });

        modelBuilder.Entity<WfxLasttriggerid>(entity =>
        {
            entity.HasKey(e => new { e.Entityid, e.Entitytype });

            entity.ToTable("WFX_LASTTRIGGERID", tb =>
                {
                    tb.HasTrigger("auddel_WFX_LASTTRIGGERID");
                    tb.HasTrigger("audins_WFX_LASTTRIGGERID");
                    tb.HasTrigger("audupd_WFX_LASTTRIGGERID");
                });

            entity.Property(e => e.Entityid).HasColumnName("ENTITYID");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENTITYTYPE");
            entity.Property(e => e.Lastriggerid)
                .HasColumnType("datetime")
                .HasColumnName("LASTRIGGERID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<WfxRole>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WFX_ROLE");

            entity.Property(e => e.Clusterid).HasColumnName("CLUSTERID");
            entity.Property(e => e.Clustertype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLUSTERTYPE");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Entityid).HasColumnName("ENTITYID");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENTITYTYPE");
            entity.Property(e => e.Fax)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FAX");
            entity.Property(e => e.Mobile)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("MOBILE");
            entity.Property(e => e.Name)
                .HasMaxLength(201)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.Role)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ROLE");
            entity.Property(e => e.Userid).HasColumnName("USERID");
        });

        modelBuilder.Entity<WfxTimeframe>(entity =>
        {
            entity.HasKey(e => new { e.Wfxworkflowid, e.Wfxtimeframeno });

            entity.ToTable("WFX_TIMEFRAME", tb =>
                {
                    tb.HasTrigger("auddel_WFX_TIMEFRAME");
                    tb.HasTrigger("audins_WFX_TIMEFRAME");
                    tb.HasTrigger("audupd_WFX_TIMEFRAME");
                });

            entity.HasIndex(e => new { e.Entitytype, e.Entityid, e.Active }, "IDX_WFX_TIMEFRAME_ENTITY");

            entity.Property(e => e.Wfxworkflowid).HasColumnName("WFXWORKFLOWID");
            entity.Property(e => e.Wfxtimeframeno).HasColumnName("WFXTIMEFRAMENO");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Dateapplied)
                .HasColumnType("datetime")
                .HasColumnName("DATEAPPLIED");
            entity.Property(e => e.Datesatisfied)
                .HasColumnType("datetime")
                .HasColumnName("DATESATISFIED");
            entity.Property(e => e.Datesatisfiedprocessed)
                .HasColumnType("datetime")
                .HasColumnName("DATESATISFIEDPROCESSED");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("DUEDATE");
            entity.Property(e => e.Entityid).HasColumnName("ENTITYID");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENTITYTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("NOTES");
            entity.Property(e => e.Overdueprocessed).HasColumnName("OVERDUEPROCESSED");
            entity.Property(e => e.Previousduedate)
                .HasColumnType("datetime")
                .HasColumnName("PREVIOUSDUEDATE");
            entity.Property(e => e.Timeframeno).HasColumnName("TIMEFRAMENO");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Workflowid).HasColumnName("WORKFLOWID");

            entity.HasOne(d => d.Wfxworkflow).WithMany(p => p.WfxTimeframes)
                .HasForeignKey(d => d.Wfxworkflowid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WFX_TIMEFRAME");
        });

        modelBuilder.Entity<WfxTrigger>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WFX_TRIGGERS");

            entity.Property(e => e.Clusterid).HasColumnName("CLUSTERID");
            entity.Property(e => e.Clustertype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLUSTERTYPE");
            entity.Property(e => e.Entityguid).HasColumnName("ENTITYGUID");
            entity.Property(e => e.Entityid).HasColumnName("ENTITYID");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENTITYTYPE");
            entity.Property(e => e.Triggerdataid).HasColumnName("TRIGGERDATAID");
            entity.Property(e => e.Triggerguid).HasColumnName("TRIGGERGUID");
            entity.Property(e => e.Triggerid)
                .HasColumnType("datetime")
                .HasColumnName("TRIGGERID");
            entity.Property(e => e.Triggertype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRIGGERTYPE");
            entity.Property(e => e.Unprocessed).HasColumnName("UNPROCESSED");
        });

        modelBuilder.Entity<WfxTriggerdatum>(entity =>
        {
            entity.HasKey(e => e.Triggerdataid).IsClustered(false);

            entity.ToTable("WFX_TRIGGERDATA");

            entity.HasIndex(e => new { e.Triggerid, e.Triggertype, e.Entitytype, e.Entityid, e.Triggerguid, e.Entityguid }, "IX_WFX_TRIGGERDATA_WF").IsClustered();

            entity.Property(e => e.Triggerdataid).HasColumnName("TRIGGERDATAID");
            entity.Property(e => e.Entityguid).HasColumnName("ENTITYGUID");
            entity.Property(e => e.Entityid).HasColumnName("ENTITYID");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENTITYTYPE");
            entity.Property(e => e.Subsequententityid).HasColumnName("SUBSEQUENTENTITYID");
            entity.Property(e => e.Triggerguid).HasColumnName("TRIGGERGUID");
            entity.Property(e => e.Triggerid)
                .HasColumnType("datetime")
                .HasColumnName("TRIGGERID");
            entity.Property(e => e.Triggertype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRIGGERTYPE");
            entity.Property(e => e.Unprocessed)
                .HasDefaultValue(1)
                .HasColumnName("UNPROCESSED");
        });

        modelBuilder.Entity<WfxWorkflow>(entity =>
        {
            entity.ToTable("WFX_WORKFLOW", tb =>
                {
                    tb.HasTrigger("auddel_WFX_WORKFLOW");
                    tb.HasTrigger("audins_WFX_WORKFLOW");
                    tb.HasTrigger("audupd_WFX_WORKFLOW");
                });

            entity.Property(e => e.Wfxworkflowid).HasColumnName("WFXWORKFLOWID");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Datetriggered)
                .HasColumnType("datetime")
                .HasColumnName("DATETRIGGERED");
            entity.Property(e => e.Entityid).HasColumnName("ENTITYID");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENTITYTYPE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Workflowid).HasColumnName("WORKFLOWID");

            entity.HasOne(d => d.Workflow).WithMany(p => p.WfxWorkflows)
                .HasForeignKey(d => d.Workflowid)
                .HasConstraintName("FK_WFX_WORKFLOW");
        });

        modelBuilder.Entity<WhsBatchErrorsX>(entity =>
        {
            entity.HasKey(e => new { e.Batchid, e.Errorno });

            entity.ToTable("WHS_BATCH_ERRORS_X", tb =>
                {
                    tb.HasTrigger("auddel_WHS_BATCH_ERRORS_X");
                    tb.HasTrigger("audins_WHS_BATCH_ERRORS_X");
                    tb.HasTrigger("audupd_WHS_BATCH_ERRORS_X");
                });

            entity.Property(e => e.Batchid).HasColumnName("BATCHID");
            entity.Property(e => e.Errorno).HasColumnName("ERRORNO");
            entity.Property(e => e.Errordesc)
                .IsUnicode(false)
                .HasColumnName("ERRORDESC");
            entity.Property(e => e.Errortype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ERRORTYPE");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Batch).WithMany(p => p.WhsBatchErrorsXes)
                .HasForeignKey(d => d.Batchid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WHS_BATCH_ERRORS_X_BATCHID");
        });

        modelBuilder.Entity<WhsBatchStagingX>(entity =>
        {
            entity.HasKey(e => new { e.Batchid, e.Rownumber });

            entity.ToTable("WHS_BATCH_STAGING_X", tb =>
                {
                    tb.HasTrigger("auddel_WHS_BATCH_STAGING_X");
                    tb.HasTrigger("audins_WHS_BATCH_STAGING_X");
                    tb.HasTrigger("audupd_WHS_BATCH_STAGING_X");
                });

            entity.Property(e => e.Batchid).HasColumnName("BATCHID");
            entity.Property(e => e.Rownumber).HasColumnName("ROWNUMBER");
            entity.Property(e => e.AccidentLocationCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Agency1)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Agency2)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Body1)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Body2)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Body3)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DateReported).HasColumnType("datetime");
            entity.Property(e => e.DutyStatus)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Entity)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
            entity.Property(e => e.IncidentDescription)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationAddress1)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationAddress2)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationAddress3)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationCountry)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationPostcode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationState)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationSuburb)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IncidentNumber)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.InitialTreatmentType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.InjuryIllnessDescription)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.InjurySide)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.InjuryType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Invalid).HasColumnName("INVALID");
            entity.Property(e => e.Level1)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Level2)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Level3)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Level4)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Level5)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Level6)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Level7)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Mechanism1)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Mechanism2)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Nature1)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Nature2)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PersonInvEmployeeNumber)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PersonInvHrid).HasColumnName("PersonInvHRID");
            entity.Property(e => e.PrimaryInjuryType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ReportedToName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SpecificLocation)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Batch).WithMany(p => p.WhsBatchStagingXes)
                .HasForeignKey(d => d.Batchid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WHS_BATCH_STAGING_X_BATCHID");
        });

        modelBuilder.Entity<WhsBatchX>(entity =>
        {
            entity.HasKey(e => e.Batchid);

            entity.ToTable("WHS_BATCH_X", tb =>
                {
                    tb.HasTrigger("auddel_WHS_BATCH_X");
                    tb.HasTrigger("audins_WHS_BATCH_X");
                    tb.HasTrigger("audupd_WHS_BATCH_X");
                });

            entity.Property(e => e.Batchid).HasColumnName("BATCHID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<WhsIncidentX>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WHS_INCIDENT_X");

            entity.Property(e => e.AccidentLocationCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Agency1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Agency2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Body1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Body2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Body3)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DateReported).HasColumnType("datetime");
            entity.Property(e => e.DutyStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Entity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
            entity.Property(e => e.IncidentDescription)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationAddress1)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationAddress2)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationAddress3)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationCountry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IncidentLocationPostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IncidentLocationState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IncidentLocationSuburb)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.IncidentNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.InitialTreatmentType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.InjuryIllnessDescription)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.InjurySide)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InjuryType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Level1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Level2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Level3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Level4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Level5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Level6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Level7)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Mechanism1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Mechanism2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Nature1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Nature2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PersonInvEmployeeNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PersonInvHrid).HasColumnName("PersonInvHRID");
            entity.Property(e => e.PrimaryInjuryType)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.ReportedToName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SpecificLocation)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Whsincidentid)
                .ValueGeneratedOnAdd()
                .HasColumnName("WHSINCIDENTID");
        });

        modelBuilder.Entity<WhsIncidentX1>(entity =>
        {
            entity.HasKey(e => e.Whsincidentid).HasName("PK_WHS_INCIDENT_X_WHSINCIDENTID");

            entity.ToTable("WHS_INCIDENT_X", "secure", tb =>
                {
                    tb.HasTrigger("auddel_WHS_INCIDENT_X");
                    tb.HasTrigger("audins_WHS_INCIDENT_X");
                    tb.HasTrigger("audupd_WHS_INCIDENT_X");
                });

            entity.HasIndex(e => e.IncidentNumber, "UNQ_WHS_INCIDENT_X_INCIDENTNUMBER").IsUnique();

            entity.Property(e => e.Whsincidentid).HasColumnName("WHSINCIDENTID");
            entity.Property(e => e.AccidentLocationCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Agency1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Agency2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Body1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Body2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Body3)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DateReported).HasColumnType("datetime");
            entity.Property(e => e.DutyStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Entity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
            entity.Property(e => e.IncidentDescription)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationAddress1)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationAddress2)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationAddress3)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationCountry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IncidentLocationPostcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IncidentLocationState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IncidentLocationSuburb)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.IncidentNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.InitialTreatmentType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.InjuryIllnessDescription)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.InjurySide)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InjuryType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Level1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Level2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Level3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Level4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Level5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Level6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Level7)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Mechanism1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Mechanism2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Nature1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Nature2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PersonInvEmployeeNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PersonInvHrid).HasColumnName("PersonInvHRID");
            entity.Property(e => e.PrimaryInjuryType)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Recorddateentered)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEENTERED");
            entity.Property(e => e.Recorddatemodified)
                .HasColumnType("datetime")
                .HasColumnName("RECORDDATEMODIFIED");
            entity.Property(e => e.Recordenteredby).HasColumnName("RECORDENTEREDBY");
            entity.Property(e => e.ReportedToName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SpecificLocation)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<Zassociatedcode>(entity =>
        {
            entity.HasKey(e => new { e.Zone, e.AssociatedType, e.Code1Type, e.Code2Type, e.Code1Value, e.Code2Value });

            entity.ToTable("ZASSOCIATEDCODE", tb =>
                {
                    tb.HasTrigger("AssocCodeTrigger");
                    tb.HasTrigger("auddel_ZASSOCIATEDCODE");
                    tb.HasTrigger("audins_ZASSOCIATEDCODE");
                    tb.HasTrigger("audupd_ZASSOCIATEDCODE");
                });

            entity.Property(e => e.Zone).HasColumnName("ZONE");
            entity.Property(e => e.AssociatedType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Code1Type)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Code2Type)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Code1Value)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Code2Value)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.AssociatedTypeNavigation).WithMany(p => p.Zassociatedcodes)
                .HasForeignKey(d => d.AssociatedType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssociatedCode_AssociatedType");
        });

        modelBuilder.Entity<Zassociatedtype>(entity =>
        {
            entity.HasKey(e => e.AssociatedType).HasName("PK_AssociatedType");

            entity.ToTable("ZASSOCIATEDTYPE", tb =>
                {
                    tb.HasTrigger("AssocTypeTrigger");
                    tb.HasTrigger("auddel_ZASSOCIATEDTYPE");
                    tb.HasTrigger("audins_ZASSOCIATEDTYPE");
                    tb.HasTrigger("audupd_ZASSOCIATEDTYPE");
                });

            entity.Property(e => e.AssociatedType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssociatedDefinition)
                .HasMaxLength(255)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssociatedDescr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Code1Type)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Code2Type)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Code1TypeNavigation).WithMany(p => p.ZassociatedtypeCode1TypeNavigations)
                .HasForeignKey(d => d.Code1Type)
                .HasConstraintName("FK_AssociatedType_PrimaryCodeDefinition");

            entity.HasOne(d => d.Code2TypeNavigation).WithMany(p => p.ZassociatedtypeCode2TypeNavigations)
                .HasForeignKey(d => d.Code2Type)
                .HasConstraintName("FK_AssociatedType_PrimaryCodeDefinition1");
        });

        modelBuilder.Entity<Zmappedcode>(entity =>
        {
            entity.HasKey(e => new { e.Zone, e.Mappingtype, e.Codetype, e.Codevalue });

            entity.ToTable("ZMAPPEDCODE", tb =>
                {
                    tb.HasTrigger("auddel_ZMAPPEDCODE");
                    tb.HasTrigger("audins_ZMAPPEDCODE");
                    tb.HasTrigger("audupd_ZMAPPEDCODE");
                });

            entity.Property(e => e.Zone).HasColumnName("ZONE");
            entity.Property(e => e.Mappingtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MAPPINGTYPE");
            entity.Property(e => e.Codetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CODETYPE");
            entity.Property(e => e.Codevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CODEVALUE");
            entity.Property(e => e.Mappedcodetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MAPPEDCODETYPE");
            entity.Property(e => e.Mappedcodevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MAPPEDCODEVALUE");
            entity.Property(e => e.Mappedzone).HasColumnName("MAPPEDZONE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");

            entity.HasOne(d => d.Zprimarycode).WithMany(p => p.ZmappedcodeZprimarycodes)
                .HasForeignKey(d => new { d.Mappedzone, d.Mappedcodetype, d.Mappedcodevalue })
                .HasConstraintName("FK_ZMAPPEDCODE_RANGE");

            entity.HasOne(d => d.ZprimarycodeNavigation).WithMany(p => p.ZmappedcodeZprimarycodeNavigations)
                .HasForeignKey(d => new { d.Zone, d.Codetype, d.Codevalue })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZMAPPEDCODE_DOMAIN");
        });

        modelBuilder.Entity<Zprimarycode>(entity =>
        {
            entity.HasKey(e => new { e.Zone, e.CodeType, e.CodeValue }).HasName("PK_PrimaryCode_1__11");

            entity.ToTable("ZPRIMARYCODE", tb =>
                {
                    tb.HasTrigger("PrimCodeTrigger");
                    tb.HasTrigger("ZPRIMARYCODE_REZONE_TRIG");
                    tb.HasTrigger("auddel_ZPRIMARYCODE");
                    tb.HasTrigger("audins_ZPRIMARYCODE");
                    tb.HasTrigger("audupd_ZPRIMARYCODE");
                });

            entity.Property(e => e.CodeType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CodeValue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AggregateType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AggregateValue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DisplayValue)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
            entity.Property(e => e.UserField)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.CodeTypeNavigation).WithMany(p => p.Zprimarycodes)
                .HasForeignKey(d => d.CodeType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PrimaryCode_CODETYPE");
        });

        modelBuilder.Entity<Zprimarycodedef>(entity =>
        {
            entity.HasKey(e => e.CodeType).HasName("PK_PrimaryCodeDefinition_1__11");

            entity.ToTable("ZPRIMARYCODEDEF", tb =>
                {
                    tb.HasTrigger("PrimCodeDefTrigger");
                    tb.HasTrigger("auddel_ZPRIMARYCODEDEF");
                    tb.HasTrigger("audins_ZPRIMARYCODEDEF");
                    tb.HasTrigger("audupd_ZPRIMARYCODEDEF");
                });

            entity.Property(e => e.CodeType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AggregatedBy)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CodeTypeDefinition)
                .HasMaxLength(255)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CodeTypeDescr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<Zzone>(entity =>
        {
            entity.HasKey(e => e.Zoneid);

            entity.ToTable("ZZONE", tb =>
                {
                    tb.HasTrigger("auddel_ZZONE");
                    tb.HasTrigger("audins_ZZONE");
                    tb.HasTrigger("audupd_ZZONE");
                });

            entity.Property(e => e.Zoneid)
                .ValueGeneratedNever()
                .HasColumnName("ZONEID");
            entity.Property(e => e.Shortname)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SHORTNAME");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Zonename)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ZONENAME");
        });

        modelBuilder.Entity<Zzonedcode>(entity =>
        {
            entity.HasKey(e => new { e.Zone, e.Codetype, e.Codevalue });

            entity.ToTable("ZZONEDCODE");

            entity.HasIndex(e => new { e.Displayvalue, e.Zone, e.Codetype, e.Codevalue }, "IX_ZZONEDCODE_DISPLAYVALUE");

            entity.HasIndex(e => e.Sourcetimestamp, "IX_ZZONEDCODE_TIMESTAMP");

            entity.Property(e => e.Zone).HasColumnName("ZONE");
            entity.Property(e => e.Codetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CODETYPE");
            entity.Property(e => e.Codevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CODEVALUE");
            entity.Property(e => e.Aggregatetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGGREGATETYPE");
            entity.Property(e => e.Aggregatevalue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AGGREGATEVALUE");
            entity.Property(e => e.Displayvalue)
                .HasMaxLength(120)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DISPLAYVALUE");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Sourceguid).HasColumnName("SOURCEGUID");
            entity.Property(e => e.Sourcetimestamp)
                .HasMaxLength(50)
                .HasColumnName("SOURCETIMESTAMP");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Userfield)
                .HasMaxLength(200)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USERFIELD");
            entity.Property(e => e.Userflag).HasColumnName("USERFLAG");
        });
        modelBuilder.HasSequence("WFENTITYIDSEQ").HasMin(1L);

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
